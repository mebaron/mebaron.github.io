{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/archive.jpg","path":"img/archive.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/baron.png","path":"img/baron.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/category.jpg","path":"img/category.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover.jpg","path":"img/cover.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover01.jpg","path":"img/cover01.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover02.jpg","path":"img/cover02.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover03.jpg","path":"img/cover03.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover04.jpg","path":"img/cover04.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover05.jpg","path":"img/cover05.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover06.jpg","path":"img/cover06.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover07.jpg","path":"img/cover07.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover08.jpg","path":"img/cover08.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover09.jpg","path":"img/cover09.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover10.jpg","path":"img/cover10.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon-16x16.png","path":"img/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon-32x32.png","path":"img/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover11.jpg","path":"img/cover11.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/cover12.jpg","path":"img/cover12.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/index.png","path":"img/index.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/tag.jpg","path":"img/tag.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d0411f1b84158f780b3b65453bdb30495100ca6f","modified":1703080087320},{"_id":"source/_posts/1.hello-world.md","hash":"3996aebfe47669830a8940c529abd36b845f3c05","modified":1704500437683},{"_id":"source/_posts/10.多重背包问题-go实现.md","hash":"96548ba6ecf6370688a536699ab3a3d23e092a2c","modified":1704500520081},{"_id":"source/_posts/11.使用kubeadm搭建k8s集群.md","hash":"d3e5b6b56e6b5ebd63d35ce1d34c8ec6a467f8a6","modified":1704500529177},{"_id":"source/_posts/12.centos系统安装containerd.md","hash":"d8bae6562bd7c8383100f87abdb18f1be72a4283","modified":1704500539233},{"_id":"source/_posts/13.k8s-apiserver证书添加新地址.md","hash":"b9731f4d36197d3fda2c4fe7b53fd67adef4598c","modified":1704500552048},{"_id":"source/_posts/15.动态主机配置协议DHCP.md","hash":"c723aa0ca287ec425b2a40a091c0a427f8a38060","modified":1704500564160},{"_id":"source/_posts/14.TCP的三次握手和四次挥手.md","hash":"738bbc3d382984e5f2806de2336bd68a5043eecf","modified":1704500558013},{"_id":"source/_posts/16.域名系统DNS.md","hash":"0263e2672ba3bfc51df824e6442e55a7b1e5e7c6","modified":1704500569481},{"_id":"source/_posts/17.go实现web服务器.md","hash":"54c59f4f3f0b2e3fc61fe42087192b0c61cedb68","modified":1704500574200},{"_id":"source/_posts/18.go处理表单.md","hash":"fd49e01d861d0e73ef184f6cd2911211c6cdf26c","modified":1704500579744},{"_id":"source/_posts/19.go访问数据库.md","hash":"653e3d9d1ca2becb10f186e2e130fa99f40c45d4","modified":1704500585521},{"_id":"source/_posts/2.使用hexo搭建个人博客.md","hash":"54f92eae9df5a204ea8c5fae780aac4245ab1e3b","modified":1704500454537},{"_id":"source/_posts/21.go文本处理.md","hash":"6f391bc26fa1c2b36d845fdb259fcc6ef6cf8546","modified":1704500594362},{"_id":"source/_posts/20.go操作cookie和session.md","hash":"fcbf088a278e15b364708fc02f8d95b3f1fa81e6","modified":1704500590185},{"_id":"source/_posts/23.go文件操作.md","hash":"6e0ac3dba38c669ff1dca70288d4fd97a41a8640","modified":1704500603290},{"_id":"source/_posts/25.go-Socket编程.md","hash":"b13288fbc44d3d830ec7602e3e1d239069c9d300","modified":1704500611673},{"_id":"source/_posts/22.go正则处理.md","hash":"924de71983e6d5783252ddcc5b17db2240c3ff80","modified":1704500599089},{"_id":"source/_posts/26.go-WebSocket编程.md","hash":"e4091a7a236baeb1a8409ab79799e7f31b1eb96a","modified":1704500616186},{"_id":"source/_posts/27.go-rpc编程.md","hash":"7998d86ed994fbf2bd7e801efac119b326da44d9","modified":1704500622648},{"_id":"source/_posts/28.算法基础-基础算法模板.md","hash":"e8d9204be9c9bf0d183f07ffda9e8d82150f69d2","modified":1704610752332},{"_id":"source/_posts/29.算法基础-数据结构模板.md","hash":"ddfdb34684cc7511e5ba37c860167157a34c92d3","modified":1704635950053},{"_id":"source/_posts/30.算法基础-图论模板.md","hash":"efeb6b2e21b278dc0d48a191026e8c1f06b99477","modified":1704714097240},{"_id":"source/_posts/4.nodejs版本管理工具nvm的使用.md","hash":"e3aad47760001b8b38035d1f0739b383c99be0b2","modified":1704500468903},{"_id":"source/_posts/24.go字符串处理.md","hash":"b048f63ae3bbbbcd3420a67b5222dfe3e45eb319","modified":1704500607744},{"_id":"source/_posts/5.七层OSI模型.md","hash":"fd0544a366c65a3d1a8d1af47291974fc8f2b489","modified":1704500492336},{"_id":"source/_posts/6.go交叉编译-Mac-Linux-Windows.md","hash":"1277b83bca7178ebb5d61d8d3c7f3614655aeef6","modified":1704528984616},{"_id":"source/_posts/8.01背包问题-go实现.md","hash":"47271d0d80b1d0f7a56f7288d99e1824513ec6f3","modified":1704500507353},{"_id":"source/_posts/9.完全背包问题-go实现.md","hash":"18c8490472349befc476a43f01609381a78a4c1b","modified":1704500513319},{"_id":"source/about/index.md","hash":"7f28a3022d64789056410e4ddfa4ff91d1913c64","modified":1703080087326},{"_id":"source/categories/index.md","hash":"1af9311c3e83a64dc21a231ed774d44aa0cc2a7b","modified":1703080087327},{"_id":"source/tags/index.md","hash":"304f8f4c5803458987e8542701082b341dd04ff8","modified":1703080087330},{"_id":"source/_posts/31.Kafka安装.md","hash":"eb9c187bd91a74a1e09093b5a8d827d915c7aaf6","modified":1704784416994},{"_id":"source/_posts/32.Java_sdk安装.md","hash":"7074ad701a1d3f7d93847ec9895ca457c4c92c7b","modified":1704719920440},{"_id":"source/_posts/33.zookeeper安装.md","hash":"789dbd2debca71cddf43d97caa748240e977f2f7","modified":1704723704972},{"_id":"source/_posts/3.next主题美化配置.md","hash":"4a2d88062080e1b39eba76817890484a9e1684cd","modified":1704500462352},{"_id":"source/_posts/7.dd大牛的《背包九讲》.md","hash":"3a9447dcfdd735f8a5d44e6ac0b5872c56bd1400","modified":1704500500891},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1703071927813},{"_id":"themes/butterfly/package.json","hash":"806ede300bb0d8a12b23af1d64a639ad09cb29f9","modified":1703071927860},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1703071927813},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1703071927813},{"_id":"themes/butterfly/_config.yml","hash":"421b77b99c85035f34183ff14cbfbc4dff1a3078","modified":1703071927814},{"_id":"themes/butterfly/plugins.yml","hash":"3b3b5fa56c0211a52530a99a69137027245c21b0","modified":1703071927861},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1703071927815},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1703071927815},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1703071927816},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1703071927859},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1703071927817},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1703071927859},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1703071927815},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1703071927860},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1703071927811},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1703071927816},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1703071927811},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1703071927812},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1703071927817},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1703071927859},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1703071927811},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1703071927812},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1703071927818},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ecec62305aaa596bb1dfbb46c13d06fb5a9628cf","modified":1703071927818},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"9524c64f1ed05ab1bac260029e3d8a0c8c5cb83d","modified":1704530529005},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1703071927824},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1703071927861},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1703071927862},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1703071927830},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1703071927863},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1703071927862},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1703071927828},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1703071927864},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"351df17e06bb5c5788cd36105ecaa849d43edcce","modified":1703071927863},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1703071927866},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1703071927864},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1703071927866},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1703071927867},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1703071927867},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1703071927868},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1703071927868},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1703071927869},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1703071927829},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1703071927865},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1703071927865},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1703071927869},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1703071927870},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1703071927870},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1703071927871},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1703071927871},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1703071927871},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1703071927872},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1703071927872},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1703071927873},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1703071927873},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1703071927873},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1703071927874},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1703071927896},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1703071927896},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1703071927897},{"_id":"themes/butterfly/source/img/baron.png","hash":"3df38d4aa92a1d945343e95e8308c9f63941c31c","modified":1703072492543},{"_id":"themes/butterfly/source/img/favicon-16x16.png","hash":"4dfc8fcd13cd1f7fc0c3bb0fb8a96f082c386d39","modified":1703043978000},{"_id":"themes/butterfly/source/img/favicon-32x32.png","hash":"1d4b6f9c7da190bb885237540cca4b348dbc82f2","modified":1703043978000},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"1420268f9fa1ca9316b2324ff0c00d78c0c260c8","modified":1703043978000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1703071927898},{"_id":"themes/butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1703071927899},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1703071927901},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1703071927819},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1703071927901},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1703071927820},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1703071927819},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1703071927821},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1703071927820},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1703071927821},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1703071927820},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1703071927823},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":1703071927823},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1703071927822},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1703071927824},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1703071927825},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1703071927825},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1703071927825},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1703071927821},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1703071927827},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1703071927827},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":1703071927826},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1703071927826},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1703071927828},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1703071927822},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1703071927829},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1703071927831},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1703071927849},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1703071927827},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1703071927843},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1703071927829},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1703071927854},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1703071927850},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1703071927854},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1703071927854},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1703071927853},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1703071927855},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1703071927856},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1703071927857},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1703071927856},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1703071927855},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1703071927858},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1703071927849},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"3ec354778f6a4ac97fb64d5629c83b293ccceb5e","modified":1703071927856},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1703071927857},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1703071927858},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1703071927858},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1703071927875},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1703071927876},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1703071927876},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1703071927880},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1703071927880},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1703071927881},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1703071927879},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1703071927881},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1703071927882},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":1703071927882},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1703071927883},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1703071927884},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"ef0fd5e3fe04a50e4386bb3f22e2ccd9290c6653","modified":1703071927883},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1703071927884},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1703071927884},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1703071927885},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1703071927886},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1703071927885},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1703071927886},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1703071927888},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1703071927887},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1703071927887},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1703071927888},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1703071927889},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1703071927888},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1703071927889},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1703071927890},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1703071927890},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1703071927893},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1703071927891},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1703071927892},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1703071927893},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1703071927892},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1703071927894},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1703071927893},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1703071927894},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1703071927895},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1703071927895},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1703071927896},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1703071927831},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1703071927831},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1703071927900},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1703071927900},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1703071927857},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1703071927833},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1703071927833},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1703071927832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1703071927834},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1703071927832},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1703071927833},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1703071927834},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1703071927834},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1703071927836},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1703071927835},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1703071927836},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1703071927836},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1703071927837},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1703071927837},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5b73920843ce858df6e3b03325d5d1f43cdab3","modified":1703071927838},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1703071927838},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1703071927839},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1703071927839},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1703071927840},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1703071927839},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1703071927840},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1703071927841},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1703071927841},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1703071927841},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":1703071927842},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1703071927844},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1703071927842},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"ad7f1ee2e67deee0706e0838b5724dd37fc30a34","modified":1703071927843},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1703071927844},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1703071927843},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1703071927845},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1703071927845},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9a3617f5e90c4e4176aa2ee2e904c22466e9663b","modified":1703071927846},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1703071927846},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e434bcfb7fee59c7be2dac58a9b3a1989f21caa8","modified":1703071927847},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1703071927848},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1703071927847},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1703071927850},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1703071927848},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1703071927848},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1703071927849},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1703071927851},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1703071927851},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1703071927852},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1703071927853},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1703071927852},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1703071927852},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1703071927878},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1703071927877},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1703071927877},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1703071927879},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1703071927878},{"_id":"themes/butterfly/source/img/cover12.jpg","hash":"513a38d130df0d716d9da0cd4b36e746c4a75f36","modified":1704526258471},{"_id":"themes/butterfly/source/img/cover06.jpg","hash":"ed6444e1163868614c6411885158f4695ac6f948","modified":1704526251293},{"_id":"themes/butterfly/source/img/cover05.jpg","hash":"ae6b810104587dd2cb6b69fc68d34f715b7d8028","modified":1704527513769},{"_id":"themes/butterfly/source/img/category.jpg","hash":"5778ebf8724a341ee4eb4e5a7b8024c88814e721","modified":1704527042348},{"_id":"themes/butterfly/source/img/default.jpg","hash":"5db3af1b765e120868e0967d8f888dbed0e47e9b","modified":1704527173646},{"_id":"themes/butterfly/source/img/cover10.jpg","hash":"911dafafee4e8ca7d1311d3ea3a3944e38b67c7c","modified":1704526263500},{"_id":"themes/butterfly/source/img/cover09.jpg","hash":"790e28569d44e0545c2923e65629019dbf8d52a4","modified":1704526272415},{"_id":"themes/butterfly/source/img/cover08.jpg","hash":"cfdbccca39c1f1e8c17982226b969cf35d0041f8","modified":1704526285418},{"_id":"themes/butterfly/source/img/cover03.jpg","hash":"50fe4eb25d912e584c356d8ba48ad46376c6cf76","modified":1704526232444},{"_id":"themes/butterfly/source/img/tag.jpg","hash":"50fe4eb25d912e584c356d8ba48ad46376c6cf76","modified":1704526232444},{"_id":"themes/butterfly/source/img/cover01.jpg","hash":"1fecf8cd990d57750b5e821bcc94b883939e1db6","modified":1704526271188},{"_id":"themes/butterfly/source/img/cover11.jpg","hash":"30928560fc7243a0be16e66e6e768d936adab192","modified":1704526260747},{"_id":"themes/butterfly/source/img/cover04.jpg","hash":"1d443d1262d562305c43f5a6d96669e61e79bb12","modified":1704526230866},{"_id":"themes/butterfly/source/img/cover07.jpg","hash":"4282c1e7c5f26aa08a34f4e99c9187a79a6d29be","modified":1704526290927},{"_id":"themes/butterfly/source/img/cover.jpg","hash":"7766ed32205d547a77d53da32bec633bba83d1ba","modified":1704527338996},{"_id":"themes/butterfly/source/img/archive.jpg","hash":"b504a8f8c61f0d89ce48ee7fa5bee806e7ae41b2","modified":1704527251893},{"_id":"themes/butterfly/source/img/cover02.jpg","hash":"0f51ca3e26c3bf4d89e74b87f2dfde864178b8c2","modified":1704526270394},{"_id":"themes/butterfly/source/img/index.png","hash":"2ae2254416b8813cc4e1a018323f7956d375034f","modified":1704526274261},{"_id":"public/search.xml","hash":"59af554e755c925945ccde6796af50be045ac921","modified":1704843460196},{"_id":"public/about/index.html","hash":"f8bd84e1cf8db79be9d23de4d93ee5ce43573dfb","modified":1704843460196},{"_id":"public/tags/index.html","hash":"cfef956dd723c2f19cc8405a83c8eaf11d7ed826","modified":1704843460196},{"_id":"public/categories/index.html","hash":"7c9daec7ab6f2087a37512d1382492b2b80c8426","modified":1704843460196},{"_id":"public/2024/01/08/33.zookeeper安装/index.html","hash":"7670485da0ae8edb5c64f4b6cdaf51d10cbb9ffe","modified":1704843460196},{"_id":"public/2024/01/08/32.Java_sdk安装/index.html","hash":"799d9daba26c3c7ef1b163f9b18d8be9433321ac","modified":1704843460196},{"_id":"public/2024/01/08/31.Kafka安装/index.html","hash":"f869a7f1dcdba0cf7232f78a6c27b22b0bab2748","modified":1704843460196},{"_id":"public/2024/01/08/30.算法基础-图论模板/index.html","hash":"ab5e20ca1b5a1302bcf837b345e850475bed809a","modified":1704843460196},{"_id":"public/2024/01/07/29.算法基础-数据结构模板/index.html","hash":"3ede3b3ddfeb4866b728582a5188e5963db8085b","modified":1704843460196},{"_id":"public/2024/01/07/28.算法基础-基础算法模板/index.html","hash":"a4ab9f5d415ea916d365a871a6533473629ff121","modified":1704843460196},{"_id":"public/2023/12/30/27.go-rpc编程/index.html","hash":"6ec4fc065c965e9bcb42d1433f3ef44fdd3811ab","modified":1704843460196},{"_id":"public/2023/12/30/26.go-WebSocket编程/index.html","hash":"ee1480e63937ecda2e9f9fbb73da5ab05218b712","modified":1704843460196},{"_id":"public/2023/12/29/25.go-Socket编程/index.html","hash":"8e2e0eb7032708f174083eaae9086eb3ea7821fb","modified":1704843460196},{"_id":"public/2023/12/29/24.go字符串处理/index.html","hash":"962a634b8386609b1548b6b51c1fa3d63dd9aa23","modified":1704843460196},{"_id":"public/2023/12/28/23.go文件操作/index.html","hash":"9b8dd4e4bbd61ea3eea2dbc7c1713156b7265676","modified":1704843460196},{"_id":"public/2023/12/28/22.go正则处理/index.html","hash":"34f2ea1d4b4958e8bac85b97d554d48db1334adb","modified":1704843460196},{"_id":"public/2023/12/27/21.go文本处理/index.html","hash":"4d5f59f83e8a40dfd843a460e42020c92204c779","modified":1704843460196},{"_id":"public/2023/12/27/20.go操作cookie和session/index.html","hash":"12ed2c13e073eb26ca5aa7f99b4e31f05d6ff076","modified":1704843460196},{"_id":"public/2023/12/27/19.go访问数据库/index.html","hash":"65e2e771da6daa2ef509998d9638db5a15e2183b","modified":1704843460196},{"_id":"public/2023/12/26/18.go处理表单/index.html","hash":"f39fa42aab51e08d1a30ad7c829e8878ac6d5069","modified":1704843460196},{"_id":"public/2023/12/25/17.go实现web服务器/index.html","hash":"23049b27c79b4b5159b68e4acec84e8a5a918afb","modified":1704843460196},{"_id":"public/2023/12/25/16.域名系统DNS/index.html","hash":"df639ba7a8176a2444a2b48aab50458a9c198c92","modified":1704843460196},{"_id":"public/2023/12/25/15.动态主机配置协议DHCP/index.html","hash":"c65e5ab11cfbf3bbb8b91657c11cb72b2cd6a72b","modified":1704843460196},{"_id":"public/2023/12/22/14.TCP的三次握手和四次挥手/index.html","hash":"6a5747da0eddd8e5bb95c27054d539e9aa5fd16f","modified":1704843460196},{"_id":"public/2023/12/21/5.七层OSI模型/index.html","hash":"7785df1b529b3ade4c8c218c5d25971e3a7426d6","modified":1704843460196},{"_id":"public/2023/03/28/13.k8s-apiserver证书添加新地址/index.html","hash":"1c8721ecb7e2aa3d705f89e103b4dce58fccbc5c","modified":1704843460196},{"_id":"public/2023/03/28/12.centos系统安装containerd/index.html","hash":"c1c528f23e06cd578d38bd9ef458f335a4f7d29e","modified":1704843460196},{"_id":"public/2023/03/28/11.使用kubeadm搭建k8s集群/index.html","hash":"d8e93ab1c12915e2bd299fd9922c4598f0752445","modified":1704843460196},{"_id":"public/2023/02/27/10.多重背包问题-go实现/index.html","hash":"be26f2801875172cdde0d13a1d693f6bd2a8158a","modified":1704843460196},{"_id":"public/2023/02/27/9.完全背包问题-go实现/index.html","hash":"1513388faa41c6dc2bcdd79328d95e1ec4ee518d","modified":1704843460196},{"_id":"public/2023/02/27/8.01背包问题-go实现/index.html","hash":"459bb5e6f1d2b7ee55682df1e933764b0f921080","modified":1704843460196},{"_id":"public/2023/02/25/7.dd大牛的《背包九讲》/index.html","hash":"1d43b58788efedea975250456f38219b9455d4bd","modified":1704843460196},{"_id":"public/2023/02/25/6.go交叉编译-Mac-Linux-Windows/index.html","hash":"1864adb9d93ad11e6630836b11ab02722d224097","modified":1704843460196},{"_id":"public/2023/02/16/4.nodejs版本管理工具nvm的使用/index.html","hash":"8c5d4696352e5555fa3ef661491ba7cc769401b2","modified":1704843460196},{"_id":"public/2021/12/11/2.使用hexo搭建个人博客/index.html","hash":"ed9016fa0442192617f35480aecd88b5e4723463","modified":1704843460196},{"_id":"public/2021/12/11/3.next主题美化配置/index.html","hash":"510e8d5271f4f683181bd8706a09d8b2f4e620be","modified":1704843460196},{"_id":"public/2021/12/11/1.hello-world/index.html","hash":"83e76631ab5e7075d052ea3dacb875cd09c2b36d","modified":1704843460196},{"_id":"public/archives/index.html","hash":"16289550bb12d4e17e1a95ab02af8d689615c0a4","modified":1704843460196},{"_id":"public/archives/page/2/index.html","hash":"dd16db4341d8779433fd09b40f02c25f596325fb","modified":1704843460196},{"_id":"public/archives/page/3/index.html","hash":"c500422ecf91a9e49aac5e0ae02d94aa60de693a","modified":1704843460196},{"_id":"public/archives/page/4/index.html","hash":"b8e7d39e83540af6e987009b96e5b6df9ad1a510","modified":1704843460196},{"_id":"public/archives/2021/index.html","hash":"6095ddd3d7af0b52b70d9ebd83eb6fd244622644","modified":1704843460196},{"_id":"public/archives/2021/12/index.html","hash":"a9f6f23cdf3833e3af0b964ec91af1c2d7043cc3","modified":1704843460196},{"_id":"public/archives/2023/index.html","hash":"162648428f9ebf3ec766d2725a949980acebf122","modified":1704843460196},{"_id":"public/archives/2023/page/2/index.html","hash":"8405f51d9c4cbb093d055088b940d8e91fa10858","modified":1704843460196},{"_id":"public/archives/2023/page/3/index.html","hash":"b3ffc1b377a4143e39614978db0582b9cc2cd19f","modified":1704843460196},{"_id":"public/archives/2023/02/index.html","hash":"bc3a19bc420f2b51230a071637eaf149fc4b43cf","modified":1704843460196},{"_id":"public/archives/2023/03/index.html","hash":"96f8069cb0a2aea84479c60b6719d5e2a469b024","modified":1704843460196},{"_id":"public/archives/2023/12/index.html","hash":"27a3dc86a8145a6ffae2a829eb1b402f29241b2e","modified":1704843460196},{"_id":"public/archives/2023/12/page/2/index.html","hash":"e28a0444bb16847bce8e82c1bd27f66862c4d8f0","modified":1704843460196},{"_id":"public/archives/2024/index.html","hash":"facc4b9ac76938756ad90fcf05f711a0a4e1d59c","modified":1704843460196},{"_id":"public/archives/2024/01/index.html","hash":"382fb6b79acf64a303532ba4170ce7afa94a731f","modified":1704843460196},{"_id":"public/categories/随笔/index.html","hash":"1603d49d7db1648e350ad78cd1ae10a2da5bf673","modified":1704843460196},{"_id":"public/categories/学习笔记/index.html","hash":"7207c5484a625dd2da3e9e14b80fc00a122166ea","modified":1704843460196},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"52dc77e6fdde595892aa0826251b699127e37f3b","modified":1704843460196},{"_id":"public/categories/学习笔记/page/3/index.html","hash":"2ad7974b3bc51d743ce541cad04aeeb0dd32b68c","modified":1704843460196},{"_id":"public/categories/实践/index.html","hash":"80ace75b0c1cec7734f06a589c0e4261e3051d04","modified":1704843460196},{"_id":"public/index.html","hash":"70162c063f4a9624e28b267c212eb91a61a157c9","modified":1704843460196},{"_id":"public/page/2/index.html","hash":"b7f2827b2fbe3cf7ed2bf7c9bb4e562c11e97016","modified":1704843460196},{"_id":"public/page/3/index.html","hash":"9720b651c3aa8998d41fc62b9afff13ca83b3974","modified":1704843460196},{"_id":"public/page/4/index.html","hash":"9e5febeeac3f48fadc8a6cc1cd6573515e7d6a5f","modified":1704843460196},{"_id":"public/tags/开始/index.html","hash":"4915b3914c51bd0475151bcc940e4c7836a5cb47","modified":1704843460196},{"_id":"public/tags/背包问题/index.html","hash":"565db45fb97a20749c1146e692f3a72bbf353929","modified":1704843460196},{"_id":"public/tags/go/index.html","hash":"d22b5d61b1a5fb0173a3629282d0a24389565f69","modified":1704843460196},{"_id":"public/tags/go/page/2/index.html","hash":"3c0258e2e4a1b19da40cc5198aff9e465f7d081a","modified":1704843460196},{"_id":"public/tags/k8s/index.html","hash":"c5c44239e364ca5a30e9b6627f78eb3aa9d84c83","modified":1704843460196},{"_id":"public/tags/kubeadm/index.html","hash":"b52a9f3a5dbf4a80fc65172a67541eb72f306baf","modified":1704843460196},{"_id":"public/tags/containerd/index.html","hash":"8d54a1be292d0756d22cd7c61e59ed39b91ea706","modified":1704843460196},{"_id":"public/tags/ca/index.html","hash":"7b1be0161a638b8decc52781a0ac7f9d6ce0a5eb","modified":1704843460196},{"_id":"public/tags/DHCP/index.html","hash":"6e6e95c325567ea557d4426fa077ab40808df57d","modified":1704843460196},{"_id":"public/tags/网络/index.html","hash":"52f3aeb1a3be3bb8ff53ccfe470222ac0ac614fd","modified":1704843460196},{"_id":"public/tags/TCP/index.html","hash":"9377ae67534bd8583c63708439102db10a485504","modified":1704843460196},{"_id":"public/tags/DNS/index.html","hash":"b5b82c43a382a5ed70784ce161d8923e1bc11673","modified":1704843460196},{"_id":"public/tags/Web/index.html","hash":"222f9aa4509b4605bffd6eaf6f7a85fc76da1aeb","modified":1704843460196},{"_id":"public/tags/web/index.html","hash":"049fddbf72db761a1c926f4ba1a053a8b14ff0a8","modified":1704843460196},{"_id":"public/tags/mysql/index.html","hash":"415de0375d46fc9563610c875cc8d7d55c86f208","modified":1704843460196},{"_id":"public/tags/hexo/index.html","hash":"767c92918bdfd07a253b4f0a52be383a4aa7171c","modified":1704843460196},{"_id":"public/tags/next/index.html","hash":"62b42d399d3957739d33fcb0777c6eab31e9ab46","modified":1704843460196},{"_id":"public/tags/博客/index.html","hash":"9d8a54843fde72b44743e5607b1d877384737f76","modified":1704843460196},{"_id":"public/tags/xml/index.html","hash":"597e0ad1e0a5203623a1172af9e2a74f4421766a","modified":1704843460196},{"_id":"public/tags/json/index.html","hash":"e424e788610ffa2d2ef23958057d2313c5ca9c11","modified":1704843460196},{"_id":"public/tags/正则表达式/index.html","hash":"12821150acba993fd286feb451c130ef49afbf62","modified":1704843460196},{"_id":"public/tags/linux/index.html","hash":"425187460a4531677910e7677975b7b55729079c","modified":1704843460196},{"_id":"public/tags/strings/index.html","hash":"be561b90768c1ce3d3a9ed763e62947b2ab6742d","modified":1704843460196},{"_id":"public/tags/socket/index.html","hash":"1fd19ec029fdd09ef4195f56528acae2402b105b","modified":1704843460196},{"_id":"public/tags/websocket/index.html","hash":"73de62e74958dee114884360556e517ad3651848","modified":1704843460196},{"_id":"public/tags/rpc/index.html","hash":"c994ba8ea2ff11521d4bf23409ce6ff20e067c6c","modified":1704843460196},{"_id":"public/tags/算法/index.html","hash":"aa772bf571aab54090b380eaf2dc367ff071124f","modified":1704843460196},{"_id":"public/tags/nodejs/index.html","hash":"8d6b09a595550330af47bf07470761793f17d460","modified":1704843460196},{"_id":"public/tags/nvm/index.html","hash":"c85e18409be4e5470fcc33436233abcb493d0e3a","modified":1704843460196},{"_id":"public/tags/版本管理/index.html","hash":"2a29b60954fc43774636a3fbbaa7b0aeb2bfca3e","modified":1704843460196},{"_id":"public/tags/osi/index.html","hash":"dd948e15e3622eeb073534d69b75c7e460a4054c","modified":1704843460196},{"_id":"public/tags/build/index.html","hash":"9e60891810cb7ac47d016f574b5413226a6dcf1f","modified":1704843460196},{"_id":"public/tags/完全背包/index.html","hash":"0a64db869a4cee26a640be0c5ce9fb89c602bfc3","modified":1704843460196},{"_id":"public/tags/01背包问题/index.html","hash":"b357ec118ea9bb536037e5c9342e6843b099e093","modified":1704843460196},{"_id":"public/tags/java/index.html","hash":"3cf53434d24115d55ab0f47c9abf4895b7f3ffe1","modified":1704843460196},{"_id":"public/tags/shell/index.html","hash":"478e9de194337ec57a362b607250b756c6ee5853","modified":1704843460196},{"_id":"public/tags/Kafka/index.html","hash":"578db2c84f0b5c928b480d97b5b89ae554a7cf96","modified":1704843460196},{"_id":"public/tags/zookeeper/index.html","hash":"293910f1073e21f16208c2f60524564277c69088","modified":1704843460196},{"_id":"public/tags/背包九讲/index.html","hash":"f92227740c231fc7d94b53a9d2054b9b811f39d0","modified":1704843460196},{"_id":"public/CNAME","hash":"d0411f1b84158f780b3b65453bdb30495100ca6f","modified":1704843460196},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1704843460196},{"_id":"public/img/baron.png","hash":"3df38d4aa92a1d945343e95e8308c9f63941c31c","modified":1704843460196},{"_id":"public/img/favicon-16x16.png","hash":"4dfc8fcd13cd1f7fc0c3bb0fb8a96f082c386d39","modified":1704843460196},{"_id":"public/img/favicon-32x32.png","hash":"1d4b6f9c7da190bb885237540cca4b348dbc82f2","modified":1704843460196},{"_id":"public/img/favicon.ico","hash":"1420268f9fa1ca9316b2324ff0c00d78c0c260c8","modified":1704843460196},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1704843460196},{"_id":"public/img/cover12.jpg","hash":"513a38d130df0d716d9da0cd4b36e746c4a75f36","modified":1704843460196},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1704843460196},{"_id":"public/css/index.css","hash":"7b84ac3262f214b2e9545983951ef6af5f365bba","modified":1704843460196},{"_id":"public/img/cover05.jpg","hash":"ae6b810104587dd2cb6b69fc68d34f715b7d8028","modified":1704843460196},{"_id":"public/img/cover06.jpg","hash":"ed6444e1163868614c6411885158f4695ac6f948","modified":1704843460196},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1704843460196},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1704843460196},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1704843460196},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1704843460196},{"_id":"public/img/default.jpg","hash":"5db3af1b765e120868e0967d8f888dbed0e47e9b","modified":1704843460196},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1704843460196},{"_id":"public/img/category.jpg","hash":"5778ebf8724a341ee4eb4e5a7b8024c88814e721","modified":1704843460196},{"_id":"public/img/cover09.jpg","hash":"790e28569d44e0545c2923e65629019dbf8d52a4","modified":1704843460196},{"_id":"public/img/cover08.jpg","hash":"cfdbccca39c1f1e8c17982226b969cf35d0041f8","modified":1704843460196},{"_id":"public/img/cover10.jpg","hash":"911dafafee4e8ca7d1311d3ea3a3944e38b67c7c","modified":1704843460196},{"_id":"public/img/tag.jpg","hash":"50fe4eb25d912e584c356d8ba48ad46376c6cf76","modified":1704843460196},{"_id":"public/img/cover03.jpg","hash":"50fe4eb25d912e584c356d8ba48ad46376c6cf76","modified":1704843460196},{"_id":"public/img/cover11.jpg","hash":"30928560fc7243a0be16e66e6e768d936adab192","modified":1704843460196},{"_id":"public/img/cover01.jpg","hash":"1fecf8cd990d57750b5e821bcc94b883939e1db6","modified":1704843460196},{"_id":"public/img/cover04.jpg","hash":"1d443d1262d562305c43f5a6d96669e61e79bb12","modified":1704843460196},{"_id":"public/img/archive.jpg","hash":"b504a8f8c61f0d89ce48ee7fa5bee806e7ae41b2","modified":1704843460196},{"_id":"public/img/cover.jpg","hash":"7766ed32205d547a77d53da32bec633bba83d1ba","modified":1704843460196},{"_id":"public/img/cover07.jpg","hash":"4282c1e7c5f26aa08a34f4e99c9187a79a6d29be","modified":1704843460196},{"_id":"public/img/cover02.jpg","hash":"0f51ca3e26c3bf4d89e74b87f2dfde864178b8c2","modified":1704843460196},{"_id":"public/img/index.png","hash":"2ae2254416b8813cc4e1a018323f7956d375034f","modified":1704843460196}],"Category":[{"name":"随笔","_id":"clr6zs1d300040cfvh8wmdvvl"},{"name":"学习笔记","_id":"clr6zs1d7000a0cfvfyvmdh3h"},{"name":"实践","_id":"clr6zs1da000g0cfv8orpex0x"}],"Data":[],"Page":[{"title":"关于本站","date":"2021-12-11T07:56:41.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于本站\ndate: 2021-12-11 15:56:41\n---\n","updated":"2023-12-20T13:48:07.326Z","path":"about/index.html","comments":1,"layout":"page","_id":"clr6zs1cu00000cfv0fixawmi","content":"","site":{"data":{}},"cover":"/img/cover03.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签","date":"2021-12-11T07:57:06.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-12-11 15:57:06\ntype: \"tags\"\n---\n","updated":"2023-12-20T13:48:07.330Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clr6zs1d000020cfvfowc2x4i","content":"","site":{"data":{}},"cover":"/img/cover.jpg","cover_type":"img","excerpt":"","more":""},{"title":"分类","date":"2021-12-11T07:57:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-12-11 15:57:20\ntype: \"categories\"\n---\n","updated":"2023-12-20T13:48:07.327Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clr6zs1d400060cfv8h7dcqvd","content":"","site":{"data":{}},"cover":"/img/cover05.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2021-12-11T08:10:26.000Z","type":"tags","_content":"## hello world\n\n","source":"_posts/1.hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-12-11 16:10:26\ntags:\n- 开始\ncategories:\n- 随笔\ntype: \"tags\"\n---\n## hello world\n\n","slug":"1.hello-world","published":1,"updated":"2024-01-06T00:20:37.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1cy00010cfvfigvhrei","content":"<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2>","site":{"data":{}},"cover":"/img/cover11.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2>"},{"title":"多重背包问题(go实现)","date":"2023-02-27T12:41:35.000Z","type":"tags","_content":"\n# 多重背包问题\n\n## 1.问题\n\n有 N 种物品和一个容量是 V 的背包。\n\n第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。\n\n求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。\n输出最大价值。\n\n输入格式\n\n​\t第一行两个整数，N，V；N，V，用空格隔开，分别表示物品种数和背包容积。\n\n​\t接下来有 N 行，每行三个整数 vi,wi,si；vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。\n\n输出格式\n\n​\t输出一个整数，表示最大价值。\n\n数据范围\n\n​\t0<N,V≤1000<N,V≤100\n​\t0<vi,wi,si≤100\n\n<!--more-->\n\n## 2.解题思路及代码实现\n\n","source":"_posts/10.多重背包问题-go实现.md","raw":"---\ntitle: 多重背包问题(go实现)\ndate: 2023-02-27 20:41:35\ntags:\n- 背包问题\n- go\ncategories:\n- 学习笔记\ntype: \"tags\"\n---\n\n# 多重背包问题\n\n## 1.问题\n\n有 N 种物品和一个容量是 V 的背包。\n\n第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。\n\n求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。\n输出最大价值。\n\n输入格式\n\n​\t第一行两个整数，N，V；N，V，用空格隔开，分别表示物品种数和背包容积。\n\n​\t接下来有 N 行，每行三个整数 vi,wi,si；vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。\n\n输出格式\n\n​\t输出一个整数，表示最大价值。\n\n数据范围\n\n​\t0<N,V≤1000<N,V≤100\n​\t0<vi,wi,si≤100\n\n<!--more-->\n\n## 2.解题思路及代码实现\n\n","slug":"10.多重背包问题-go实现","published":1,"updated":"2024-01-06T00:22:00.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1d100030cfv7oxp6lcm","content":"<h1 id=\"多重背包问题\"><a href=\"#多重背包问题\" class=\"headerlink\" title=\"多重背包问题\"></a>多重背包问题</h1><h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>有 N 种物品和一个容量是 V 的背包。</p>\n<p>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>​    第一行两个整数，N，V；N，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>​    接下来有 N 行，每行三个整数 vi,wi,si；vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p>\n<p>输出格式</p>\n<p>​    输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>​    0&lt;N,V≤1000&lt;N,V≤100<br>​    0&lt;vi,wi,si≤100</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-解题思路及代码实现\"><a href=\"#2-解题思路及代码实现\" class=\"headerlink\" title=\"2.解题思路及代码实现\"></a>2.解题思路及代码实现</h2>","site":{"data":{}},"cover":"/img/cover06.jpg","cover_type":"img","excerpt":"<h1 id=\"多重背包问题\"><a href=\"#多重背包问题\" class=\"headerlink\" title=\"多重背包问题\"></a>多重背包问题</h1><h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>有 N 种物品和一个容量是 V 的背包。</p>\n<p>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p>\n<p>输入格式</p>\n<p>​    第一行两个整数，N，V；N，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>​    接下来有 N 行，每行三个整数 vi,wi,si；vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p>\n<p>输出格式</p>\n<p>​    输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>​    0&lt;N,V≤1000&lt;N,V≤100<br>​    0&lt;vi,wi,si≤100</p>","more":"<h2 id=\"2-解题思路及代码实现\"><a href=\"#2-解题思路及代码实现\" class=\"headerlink\" title=\"2.解题思路及代码实现\"></a>2.解题思路及代码实现</h2>"},{"title":"11.使用kubeadm搭建k8s集群","date":"2023-03-28T07:54:57.000Z","type":"tags","_content":"\n# 使用kubeadm搭建k8s集群\n\n## 1.安装环境准备\n\n### 1.1.云服务器准备\n\n|  IP地址  |    节点角色     | CPU  | Memory | Hostname |\n| :------: | :-------------: | :--: | :----: | :------: |\n| 10.0.1.9 | master and etcd | >=2c |  >=2G  |  master  |\n| 10.0.1.5 |      node       | >=2c |  >=2G  |  node1   |\n\n### 1.2.软件版本\n\n|  系统类型  | Kubernetes版本 | docker版本 | kubeadm版本 | kubectl版本 | kubelet版本 |\n| :--------: | :------------: | :--------: | :---------: | :---------: | :---------: |\n| CentOS 7.6 |    v1.17.4     | 19.03.8-ce |   v1.17.4   |   v1.17.4   |   v1.17.4   |\n\n<!--more-->\n\n### 1.3.云服务器环境初始化操作\n\n#### 1.3.1.设置主机名 \n\n```bash\n#master是设置名称 2台设备分别是 master node1\nhostnamectl set-hostname master \n```\n\n#### 1.3.2.修改host文件 \n\n```bash\nvim /etc/hosts\n\n#添加\n10.0.1.9 master\n10.0.1.5 node1\n```\n\n#### 1.3.3.关闭selinux\n\n```bash\n#实时动态关闭\nsetenforce 0 \n\n#禁止重启后自动开启\nsed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config \n```\n\n#### 1.3.4.关闭交换分区\n\n```bash\n#实时动态关闭\nswapoff -a \n\n#禁止重启后自动开启\nsed -i '/ swap / s/^/#/' /etc/fstab \n```\n\n#### 1.3.5.网络配置文件\n\n```bash\ncat > /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nvm.swappiness=0\n\n#退出 按 Ctrl + D\n\n#执行该命令 如果不执行就会在应用k8s.conf时出现加载错误\nmodprobe br_netfilter  \n\n#应用配置文件\nsysctl -p /etc/sysctl.d/k8s.conf\n```\n\n#### 1.3.6.配置资源地址\n\n```bash\nyum install wget -y  #安装wget命令行\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo  #配置yum源\n\nyum makecache #更新缓存\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #配置docker下载的地址\n```\n\n#### 1.3.7.安装Docker\n\n```bash\nyum list docker-ce --showduplicates|sort -r  #展示版本列表\n\nyum install -y docker-ce  #默认安装最新版，也可以指定版本下载\n\nsystemctl start docker #启动docker\nsystemctl enable docker #将docker加入到开机启动\n\ndocker version #查看docker启动情况 和版本信息\n\n# 如果安装的docker版本使用的cgroups，按以下方式修改为systemd\nvim /etc/docker/daemon.json\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"registry-mirrors\": [\"https://mj9kvemk.mirror.aliyuncs.com\"]\n}\n\nsystemctl daemon-reload\nsystemctl restart docker\n```\n\n#### 1.3.8.配置k8s资源的下载地址\n\n```bash\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n```\n\n#### 1.3.9.安装 kubelet kubeadm kubectl\n\n```bash\n# 默认安装最新版本，也可以指定版本\nyum install -y kubelet kubeadm kubectl\n\n#设置kubelet开机启动\nsystemctl enable kubelet.service \n```\n\n## 2.开始初始化 （只在主节点Master上面操作）\n\n### 2.1.创建初始化配置文件\n\n```\nkubeadm config print init-defaults > kubeadm-config.yaml\n```\n\n### 2.2.根据各自部署环境修改配置文件\n\n```yaml\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 10.0.1.9\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: k8s1\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: gcr.azk8s.cn/google-containers\nkind: ClusterConfiguration\nkubernetesVersion: v1.17.3\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: \"192.168.0.0/16\"\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n```\n\n配置说明：\n**imageRepository**：指定为业务所需的镜像仓库地址\n**podSubnet**：指定的IP地址段与后续部署的网络插件相匹配。（部署flannel插件，配置为10.244.0.0/16；部署calico插件，配置为192.168.0.0/16）\n\n### 2.3.开始初始化\n\n```bash\n#只在Master1的主机上面执行 版本信息与你要安装的相同\nkubeadm init --config=kubeadm-config.yaml\n\n#当出现 类似 如下说明master安装成功\nkubeadm join 10.0.1.9:6443 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128\n\n#然后执行安装成功提示的命令行，这部分执行你安装成功后的部分，可能每个人的有所不同\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n## 3.节点node加入（默认此事上面一步骤 都进行了操作）\n\n```bash\n# 执行master安装成功后的 kubeadm join命令，注意是你自己的，下面是举例\nkubeadm join 10.0.1.9:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128\n\n#当出现 类似 如下说明node加入集群成功\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n```\n\n## 4.master节点验证安装进度\n\n```bash\n#命令一 \nkubectl get cs #显示内容如下说明Master安装没问题\nNAME                 STATUS    MESSAGE              ERROR\nscheduler            Healthy   ok                   \ncontroller-manager   Healthy   ok                   \netcd-0               Healthy   {\"health\": \"true\"} \n\n#命令二\nkubectl get pod -n kube-system #查看pod状态，下面只是部分pod内容\nNAME                                   READY   STATUS             RESTARTS   AGE\ncoredns-86c58d9df4-j9g8d               1/1     Running            0          128m\ncoredns-86c58d9df4-pg45w               1/1     Running            0          128m\netcd-k8s1                              1/1     Running            0          127m\nkube-apiserver-k8s1                    1/1     Running            0          127m\nkube-controller-manager-k8s1           1/1     Running            0          127m\n\n\n#在这里你可能发现你的coredns的状态并不是Running，不要着急，这里需要给集群配置网络插件，配置好就自动Running了\n\n#命令三\nkubectl get node #查看节点状态 \nNAME   STATUS   ROLES    AGE    VERSION\nmaster   NoReady    master   131m   v1.17.4\nnode1   NoReady    <none>   93m    v1.17.4\n\n#如果你添加了节点里面看的话,可能还未初始化，显示的是NoReady是因为集群网络插件还未配置。\n```\n\n## 5.安装集群网络插件 (只需要Master安装)\n\n下面两种网络插件任选一种即可。\n\n### 5.1.安装Flannel 网络插件\n\n```bash\n# 获取flannel网络插件配置yaml文件\nwget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# 如果云服务器为多网卡机器，在启动命令中添加：\n\t\t...\n        command:\n        - /opt/bin/flanneld\n        args:\n        - --ip-masq\n        - --kube-subnet-mgr\n        - --iface=eth0  # 指定使用的相应网卡\n        ...\n\nkubectl apply -f kube-flannel.yml\n\n#安装成功后查看pod\nkubectl get pod -n kube-system\nNAME                                   READY   STATUS             RESTARTS   AGE\ncoredns-86c58d9df4-j9g8d               1/1     Running            0          128m\ncoredns-86c58d9df4-pg45w               1/1     Running            0          128m\netcd-k8s1                              1/1     Running            0          127m\nkube-apiserver-k8s1                    1/1     Running            0          127m\nkube-controller-manager-k8s1           1/1     Running            0          127m\nkube-flannel-ds-amd64-7btlw            1/1     Running            0          91m\nkube-flannel-ds-amd64-9vq42            1/1     Running            0          106m\nkube-flannel-ds-amd64-kdf42            1/1     Running            0          90m\nkube-proxy-dtmfs                       1/1     Running            0          128m\nkube-proxy-p76tc                       1/1     Running            0          90m\nkube-proxy-xgw28                       1/1     Running            0          91m\nkube-scheduler-k8s1                    1/1     Running            0          128m\n\n#全部Running则表示 成功了\n```\n\n### 5.2.安装calico\n\n```bash\n# 获取calico网络插件配置yaml文件\nwget https://docs.projectcalico.org/manifests/calico.yaml\n\nkubectl apply -f calico.yaml\n\n#安装成功后查看pod\nkubectl get pod -n kube-system\n\n#全部Running则表示 成功了\n```\n","source":"_posts/11.使用kubeadm搭建k8s集群.md","raw":"---\ntitle: 11.使用kubeadm搭建k8s集群\ndate: 2023-03-28 15:54:57\ntags:\n- k8s\n- kubeadm\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n# 使用kubeadm搭建k8s集群\n\n## 1.安装环境准备\n\n### 1.1.云服务器准备\n\n|  IP地址  |    节点角色     | CPU  | Memory | Hostname |\n| :------: | :-------------: | :--: | :----: | :------: |\n| 10.0.1.9 | master and etcd | >=2c |  >=2G  |  master  |\n| 10.0.1.5 |      node       | >=2c |  >=2G  |  node1   |\n\n### 1.2.软件版本\n\n|  系统类型  | Kubernetes版本 | docker版本 | kubeadm版本 | kubectl版本 | kubelet版本 |\n| :--------: | :------------: | :--------: | :---------: | :---------: | :---------: |\n| CentOS 7.6 |    v1.17.4     | 19.03.8-ce |   v1.17.4   |   v1.17.4   |   v1.17.4   |\n\n<!--more-->\n\n### 1.3.云服务器环境初始化操作\n\n#### 1.3.1.设置主机名 \n\n```bash\n#master是设置名称 2台设备分别是 master node1\nhostnamectl set-hostname master \n```\n\n#### 1.3.2.修改host文件 \n\n```bash\nvim /etc/hosts\n\n#添加\n10.0.1.9 master\n10.0.1.5 node1\n```\n\n#### 1.3.3.关闭selinux\n\n```bash\n#实时动态关闭\nsetenforce 0 \n\n#禁止重启后自动开启\nsed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config \n```\n\n#### 1.3.4.关闭交换分区\n\n```bash\n#实时动态关闭\nswapoff -a \n\n#禁止重启后自动开启\nsed -i '/ swap / s/^/#/' /etc/fstab \n```\n\n#### 1.3.5.网络配置文件\n\n```bash\ncat > /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.ipv4.ip_forward = 1\nvm.swappiness=0\n\n#退出 按 Ctrl + D\n\n#执行该命令 如果不执行就会在应用k8s.conf时出现加载错误\nmodprobe br_netfilter  \n\n#应用配置文件\nsysctl -p /etc/sysctl.d/k8s.conf\n```\n\n#### 1.3.6.配置资源地址\n\n```bash\nyum install wget -y  #安装wget命令行\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo  #配置yum源\n\nyum makecache #更新缓存\n\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #配置docker下载的地址\n```\n\n#### 1.3.7.安装Docker\n\n```bash\nyum list docker-ce --showduplicates|sort -r  #展示版本列表\n\nyum install -y docker-ce  #默认安装最新版，也可以指定版本下载\n\nsystemctl start docker #启动docker\nsystemctl enable docker #将docker加入到开机启动\n\ndocker version #查看docker启动情况 和版本信息\n\n# 如果安装的docker版本使用的cgroups，按以下方式修改为systemd\nvim /etc/docker/daemon.json\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"registry-mirrors\": [\"https://mj9kvemk.mirror.aliyuncs.com\"]\n}\n\nsystemctl daemon-reload\nsystemctl restart docker\n```\n\n#### 1.3.8.配置k8s资源的下载地址\n\n```bash\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n```\n\n#### 1.3.9.安装 kubelet kubeadm kubectl\n\n```bash\n# 默认安装最新版本，也可以指定版本\nyum install -y kubelet kubeadm kubectl\n\n#设置kubelet开机启动\nsystemctl enable kubelet.service \n```\n\n## 2.开始初始化 （只在主节点Master上面操作）\n\n### 2.1.创建初始化配置文件\n\n```\nkubeadm config print init-defaults > kubeadm-config.yaml\n```\n\n### 2.2.根据各自部署环境修改配置文件\n\n```yaml\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 10.0.1.9\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  name: k8s1\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: gcr.azk8s.cn/google-containers\nkind: ClusterConfiguration\nkubernetesVersion: v1.17.3\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: \"192.168.0.0/16\"\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n```\n\n配置说明：\n**imageRepository**：指定为业务所需的镜像仓库地址\n**podSubnet**：指定的IP地址段与后续部署的网络插件相匹配。（部署flannel插件，配置为10.244.0.0/16；部署calico插件，配置为192.168.0.0/16）\n\n### 2.3.开始初始化\n\n```bash\n#只在Master1的主机上面执行 版本信息与你要安装的相同\nkubeadm init --config=kubeadm-config.yaml\n\n#当出现 类似 如下说明master安装成功\nkubeadm join 10.0.1.9:6443 --token abcdef.0123456789abcdef \\\n    --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128\n\n#然后执行安装成功提示的命令行，这部分执行你安装成功后的部分，可能每个人的有所不同\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n\n## 3.节点node加入（默认此事上面一步骤 都进行了操作）\n\n```bash\n# 执行master安装成功后的 kubeadm join命令，注意是你自己的，下面是举例\nkubeadm join 10.0.1.9:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128\n\n#当出现 类似 如下说明node加入集群成功\nThis node has joined the cluster:\n* Certificate signing request was sent to apiserver and a response was received.\n* The Kubelet was informed of the new secure connection details.\n```\n\n## 4.master节点验证安装进度\n\n```bash\n#命令一 \nkubectl get cs #显示内容如下说明Master安装没问题\nNAME                 STATUS    MESSAGE              ERROR\nscheduler            Healthy   ok                   \ncontroller-manager   Healthy   ok                   \netcd-0               Healthy   {\"health\": \"true\"} \n\n#命令二\nkubectl get pod -n kube-system #查看pod状态，下面只是部分pod内容\nNAME                                   READY   STATUS             RESTARTS   AGE\ncoredns-86c58d9df4-j9g8d               1/1     Running            0          128m\ncoredns-86c58d9df4-pg45w               1/1     Running            0          128m\netcd-k8s1                              1/1     Running            0          127m\nkube-apiserver-k8s1                    1/1     Running            0          127m\nkube-controller-manager-k8s1           1/1     Running            0          127m\n\n\n#在这里你可能发现你的coredns的状态并不是Running，不要着急，这里需要给集群配置网络插件，配置好就自动Running了\n\n#命令三\nkubectl get node #查看节点状态 \nNAME   STATUS   ROLES    AGE    VERSION\nmaster   NoReady    master   131m   v1.17.4\nnode1   NoReady    <none>   93m    v1.17.4\n\n#如果你添加了节点里面看的话,可能还未初始化，显示的是NoReady是因为集群网络插件还未配置。\n```\n\n## 5.安装集群网络插件 (只需要Master安装)\n\n下面两种网络插件任选一种即可。\n\n### 5.1.安装Flannel 网络插件\n\n```bash\n# 获取flannel网络插件配置yaml文件\nwget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# 如果云服务器为多网卡机器，在启动命令中添加：\n\t\t...\n        command:\n        - /opt/bin/flanneld\n        args:\n        - --ip-masq\n        - --kube-subnet-mgr\n        - --iface=eth0  # 指定使用的相应网卡\n        ...\n\nkubectl apply -f kube-flannel.yml\n\n#安装成功后查看pod\nkubectl get pod -n kube-system\nNAME                                   READY   STATUS             RESTARTS   AGE\ncoredns-86c58d9df4-j9g8d               1/1     Running            0          128m\ncoredns-86c58d9df4-pg45w               1/1     Running            0          128m\netcd-k8s1                              1/1     Running            0          127m\nkube-apiserver-k8s1                    1/1     Running            0          127m\nkube-controller-manager-k8s1           1/1     Running            0          127m\nkube-flannel-ds-amd64-7btlw            1/1     Running            0          91m\nkube-flannel-ds-amd64-9vq42            1/1     Running            0          106m\nkube-flannel-ds-amd64-kdf42            1/1     Running            0          90m\nkube-proxy-dtmfs                       1/1     Running            0          128m\nkube-proxy-p76tc                       1/1     Running            0          90m\nkube-proxy-xgw28                       1/1     Running            0          91m\nkube-scheduler-k8s1                    1/1     Running            0          128m\n\n#全部Running则表示 成功了\n```\n\n### 5.2.安装calico\n\n```bash\n# 获取calico网络插件配置yaml文件\nwget https://docs.projectcalico.org/manifests/calico.yaml\n\nkubectl apply -f calico.yaml\n\n#安装成功后查看pod\nkubectl get pod -n kube-system\n\n#全部Running则表示 成功了\n```\n","slug":"11.使用kubeadm搭建k8s集群","published":1,"updated":"2024-01-06T00:22:09.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1d500070cfv19mg505s","content":"<h1 id=\"使用kubeadm搭建k8s集群\"><a href=\"#使用kubeadm搭建k8s集群\" class=\"headerlink\" title=\"使用kubeadm搭建k8s集群\"></a>使用kubeadm搭建k8s集群</h1><h2 id=\"1-安装环境准备\"><a href=\"#1-安装环境准备\" class=\"headerlink\" title=\"1.安装环境准备\"></a>1.安装环境准备</h2><h3 id=\"1-1-云服务器准备\"><a href=\"#1-1-云服务器准备\" class=\"headerlink\" title=\"1.1.云服务器准备\"></a>1.1.云服务器准备</h3><table>\n<thead>\n<tr>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">节点角色</th>\n<th align=\"center\">CPU</th>\n<th align=\"center\">Memory</th>\n<th align=\"center\">Hostname</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">10.0.1.9</td>\n<td align=\"center\">master and etcd</td>\n<td align=\"center\">&gt;=2c</td>\n<td align=\"center\">&gt;=2G</td>\n<td align=\"center\">master</td>\n</tr>\n<tr>\n<td align=\"center\">10.0.1.5</td>\n<td align=\"center\">node</td>\n<td align=\"center\">&gt;=2c</td>\n<td align=\"center\">&gt;=2G</td>\n<td align=\"center\">node1</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2-软件版本\"><a href=\"#1-2-软件版本\" class=\"headerlink\" title=\"1.2.软件版本\"></a>1.2.软件版本</h3><table>\n<thead>\n<tr>\n<th align=\"center\">系统类型</th>\n<th align=\"center\">Kubernetes版本</th>\n<th align=\"center\">docker版本</th>\n<th align=\"center\">kubeadm版本</th>\n<th align=\"center\">kubectl版本</th>\n<th align=\"center\">kubelet版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CentOS 7.6</td>\n<td align=\"center\">v1.17.4</td>\n<td align=\"center\">19.03.8-ce</td>\n<td align=\"center\">v1.17.4</td>\n<td align=\"center\">v1.17.4</td>\n<td align=\"center\">v1.17.4</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h3 id=\"1-3-云服务器环境初始化操作\"><a href=\"#1-3-云服务器环境初始化操作\" class=\"headerlink\" title=\"1.3.云服务器环境初始化操作\"></a>1.3.云服务器环境初始化操作</h3><h4 id=\"1-3-1-设置主机名\"><a href=\"#1-3-1-设置主机名\" class=\"headerlink\" title=\"1.3.1.设置主机名\"></a>1.3.1.设置主机名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#master是设置名称 2台设备分别是 master node1</span></span><br><span class=\"line\">hostnamectl set-hostname master </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-修改host文件\"><a href=\"#1-3-2-修改host文件\" class=\"headerlink\" title=\"1.3.2.修改host文件\"></a>1.3.2.修改host文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">10.0.1.9 master</span><br><span class=\"line\">10.0.1.5 node1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-3-关闭selinux\"><a href=\"#1-3-3-关闭selinux\" class=\"headerlink\" title=\"1.3.3.关闭selinux\"></a>1.3.3.关闭selinux</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实时动态关闭</span></span><br><span class=\"line\">setenforce 0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止重启后自动开启</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-4-关闭交换分区\"><a href=\"#1-3-4-关闭交换分区\" class=\"headerlink\" title=\"1.3.4.关闭交换分区\"></a>1.3.4.关闭交换分区</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实时动态关闭</span></span><br><span class=\"line\">swapoff -a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止重启后自动开启</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-5-网络配置文件\"><a href=\"#1-3-5-网络配置文件\" class=\"headerlink\" title=\"1.3.5.网络配置文件\"></a>1.3.5.网络配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#退出 按 Ctrl + D</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行该命令 如果不执行就会在应用k8s.conf时出现加载错误</span></span><br><span class=\"line\">modprobe br_netfilter  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#应用配置文件</span></span><br><span class=\"line\">sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-6-配置资源地址\"><a href=\"#1-3-6-配置资源地址\" class=\"headerlink\" title=\"1.3.6.配置资源地址\"></a>1.3.6.配置资源地址</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install wget -y  <span class=\"comment\">#安装wget命令行</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo  <span class=\"comment\">#配置yum源</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum makecache <span class=\"comment\">#更新缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class=\"comment\">#配置docker下载的地址</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-7-安装Docker\"><a href=\"#1-3-7-安装Docker\" class=\"headerlink\" title=\"1.3.7.安装Docker\"></a>1.3.7.安装Docker</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates|<span class=\"built_in\">sort</span> -r  <span class=\"comment\">#展示版本列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y docker-ce  <span class=\"comment\">#默认安装最新版，也可以指定版本下载</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start docker <span class=\"comment\">#启动docker</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker <span class=\"comment\">#将docker加入到开机启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker version <span class=\"comment\">#查看docker启动情况 和版本信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果安装的docker版本使用的cgroups，按以下方式修改为systemd</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;exec-opts&quot;</span>: [<span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://mj9kvemk.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-8-配置k8s资源的下载地址\"><a href=\"#1-3-8-配置k8s资源的下载地址\" class=\"headerlink\" title=\"1.3.8.配置k8s资源的下载地址\"></a>1.3.8.配置k8s资源的下载地址</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-9-安装-kubelet-kubeadm-kubectl\"><a href=\"#1-3-9-安装-kubelet-kubeadm-kubectl\" class=\"headerlink\" title=\"1.3.9.安装 kubelet kubeadm kubectl\"></a>1.3.9.安装 kubelet kubeadm kubectl</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认安装最新版本，也可以指定版本</span></span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置kubelet开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet.service </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-开始初始化-（只在主节点Master上面操作）\"><a href=\"#2-开始初始化-（只在主节点Master上面操作）\" class=\"headerlink\" title=\"2.开始初始化 （只在主节点Master上面操作）\"></a>2.开始初始化 （只在主节点Master上面操作）</h2><h3 id=\"2-1-创建初始化配置文件\"><a href=\"#2-1-创建初始化配置文件\" class=\"headerlink\" title=\"2.1.创建初始化配置文件\"></a>2.1.创建初始化配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-根据各自部署环境修改配置文件\"><a href=\"#2-2-根据各自部署环境修改配置文件\" class=\"headerlink\" title=\"2.2.根据各自部署环境修改配置文件\"></a>2.2.根据各自部署环境修改配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">bootstrapTokens:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">groups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class=\"line\">  <span class=\"attr\">token:</span> <span class=\"string\">abcdef.0123456789abcdef</span></span><br><span class=\"line\">  <span class=\"attr\">ttl:</span> <span class=\"string\">24h0m0s</span></span><br><span class=\"line\">  <span class=\"attr\">usages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">signing</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">authentication</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">InitConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">localAPIEndpoint:</span></span><br><span class=\"line\">  <span class=\"attr\">advertiseAddress:</span> <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.9</span></span><br><span class=\"line\">  <span class=\"attr\">bindPort:</span> <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">nodeRegistration:</span></span><br><span class=\"line\">  <span class=\"attr\">criSocket:</span> <span class=\"string\">/var/run/dockershim.sock</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s1</span></span><br><span class=\"line\">  <span class=\"attr\">taints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiServer:</span></span><br><span class=\"line\">  <span class=\"attr\">timeoutForControlPlane:</span> <span class=\"string\">4m0s</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">certificatesDir:</span> <span class=\"string\">/etc/kubernetes/pki</span></span><br><span class=\"line\"><span class=\"attr\">clusterName:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">controllerManager:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">CoreDNS</span></span><br><span class=\"line\"><span class=\"attr\">etcd:</span></span><br><span class=\"line\">  <span class=\"attr\">local:</span></span><br><span class=\"line\">    <span class=\"attr\">dataDir:</span> <span class=\"string\">/var/lib/etcd</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">gcr.azk8s.cn/google-containers</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">kubernetesVersion:</span> <span class=\"string\">v1.17.3</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">dnsDomain:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\">  <span class=\"attr\">podSubnet:</span> <span class=\"string\">&quot;192.168.0.0/16&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">serviceSubnet:</span> <span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/12</span></span><br><span class=\"line\"><span class=\"attr\">scheduler:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置说明：<br><strong>imageRepository</strong>：指定为业务所需的镜像仓库地址<br><strong>podSubnet</strong>：指定的IP地址段与后续部署的网络插件相匹配。（部署flannel插件，配置为10.244.0.0/16；部署calico插件，配置为192.168.0.0/16）</p>\n<h3 id=\"2-3-开始初始化\"><a href=\"#2-3-开始初始化\" class=\"headerlink\" title=\"2.3.开始初始化\"></a>2.3.开始初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#只在Master1的主机上面执行 版本信息与你要安装的相同</span></span><br><span class=\"line\">kubeadm init --config=kubeadm-config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#当出现 类似 如下说明master安装成功</span></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 10.0.1.9:6443 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后执行安装成功提示的命令行，这部分执行你安装成功后的部分，可能每个人的有所不同</span></span><br><span class=\"line\">  <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-节点node加入（默认此事上面一步骤-都进行了操作）\"><a href=\"#3-节点node加入（默认此事上面一步骤-都进行了操作）\" class=\"headerlink\" title=\"3.节点node加入（默认此事上面一步骤 都进行了操作）\"></a>3.节点node加入（默认此事上面一步骤 都进行了操作）</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行master安装成功后的 kubeadm join命令，注意是你自己的，下面是举例</span></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 10.0.1.9:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#当出现 类似 如下说明node加入集群成功</span></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-master节点验证安装进度\"><a href=\"#4-master节点验证安装进度\" class=\"headerlink\" title=\"4.master节点验证安装进度\"></a>4.master节点验证安装进度</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令一 </span></span><br><span class=\"line\">kubectl get cs <span class=\"comment\">#显示内容如下说明Master安装没问题</span></span><br><span class=\"line\">NAME                 STATUS    MESSAGE              ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                   </span><br><span class=\"line\">controller-manager   Healthy   ok                   </span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>: <span class=\"string\">&quot;true&quot;</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#命令二</span></span><br><span class=\"line\">kubectl get pod -n kube-system <span class=\"comment\">#查看pod状态，下面只是部分pod内容</span></span><br><span class=\"line\">NAME                                   READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">coredns-86c58d9df4-j9g8d               1/1     Running            0          128m</span><br><span class=\"line\">coredns-86c58d9df4-pg45w               1/1     Running            0          128m</span><br><span class=\"line\">etcd-k8s1                              1/1     Running            0          127m</span><br><span class=\"line\">kube-apiserver-k8s1                    1/1     Running            0          127m</span><br><span class=\"line\">kube-controller-manager-k8s1           1/1     Running            0          127m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在这里你可能发现你的coredns的状态并不是Running，不要着急，这里需要给集群配置网络插件，配置好就自动Running了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#命令三</span></span><br><span class=\"line\">kubectl get node <span class=\"comment\">#查看节点状态 </span></span><br><span class=\"line\">NAME   STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">master   NoReady    master   131m   v1.17.4</span><br><span class=\"line\">node1   NoReady    &lt;none&gt;   93m    v1.17.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果你添加了节点里面看的话,可能还未初始化，显示的是NoReady是因为集群网络插件还未配置。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-安装集群网络插件-只需要Master安装\"><a href=\"#5-安装集群网络插件-只需要Master安装\" class=\"headerlink\" title=\"5.安装集群网络插件 (只需要Master安装)\"></a>5.安装集群网络插件 (只需要Master安装)</h2><p>下面两种网络插件任选一种即可。</p>\n<h3 id=\"5-1-安装Flannel-网络插件\"><a href=\"#5-1-安装Flannel-网络插件\" class=\"headerlink\" title=\"5.1.安装Flannel 网络插件\"></a>5.1.安装Flannel 网络插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取flannel网络插件配置yaml文件</span></span><br><span class=\"line\">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果云服务器为多网卡机器，在启动命令中添加：</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        <span class=\"built_in\">command</span>:</span><br><span class=\"line\">        - /opt/bin/flanneld</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --ip-masq</span><br><span class=\"line\">        - --kube-subnet-mgr</span><br><span class=\"line\">        - --iface=eth0  <span class=\"comment\"># 指定使用的相应网卡</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f kube-flannel.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装成功后查看pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                                   READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">coredns-86c58d9df4-j9g8d               1/1     Running            0          128m</span><br><span class=\"line\">coredns-86c58d9df4-pg45w               1/1     Running            0          128m</span><br><span class=\"line\">etcd-k8s1                              1/1     Running            0          127m</span><br><span class=\"line\">kube-apiserver-k8s1                    1/1     Running            0          127m</span><br><span class=\"line\">kube-controller-manager-k8s1           1/1     Running            0          127m</span><br><span class=\"line\">kube-flannel-ds-amd64-7btlw            1/1     Running            0          91m</span><br><span class=\"line\">kube-flannel-ds-amd64-9vq42            1/1     Running            0          106m</span><br><span class=\"line\">kube-flannel-ds-amd64-kdf42            1/1     Running            0          90m</span><br><span class=\"line\">kube-proxy-dtmfs                       1/1     Running            0          128m</span><br><span class=\"line\">kube-proxy-p76tc                       1/1     Running            0          90m</span><br><span class=\"line\">kube-proxy-xgw28                       1/1     Running            0          91m</span><br><span class=\"line\">kube-scheduler-k8s1                    1/1     Running            0          128m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#全部Running则表示 成功了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-安装calico\"><a href=\"#5-2-安装calico\" class=\"headerlink\" title=\"5.2.安装calico\"></a>5.2.安装calico</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取calico网络插件配置yaml文件</span></span><br><span class=\"line\">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装成功后查看pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#全部Running则表示 成功了</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"/img/cover08.jpg","cover_type":"img","excerpt":"<h1 id=\"使用kubeadm搭建k8s集群\"><a href=\"#使用kubeadm搭建k8s集群\" class=\"headerlink\" title=\"使用kubeadm搭建k8s集群\"></a>使用kubeadm搭建k8s集群</h1><h2 id=\"1-安装环境准备\"><a href=\"#1-安装环境准备\" class=\"headerlink\" title=\"1.安装环境准备\"></a>1.安装环境准备</h2><h3 id=\"1-1-云服务器准备\"><a href=\"#1-1-云服务器准备\" class=\"headerlink\" title=\"1.1.云服务器准备\"></a>1.1.云服务器准备</h3><table>\n<thead>\n<tr>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">节点角色</th>\n<th align=\"center\">CPU</th>\n<th align=\"center\">Memory</th>\n<th align=\"center\">Hostname</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">10.0.1.9</td>\n<td align=\"center\">master and etcd</td>\n<td align=\"center\">&gt;=2c</td>\n<td align=\"center\">&gt;=2G</td>\n<td align=\"center\">master</td>\n</tr>\n<tr>\n<td align=\"center\">10.0.1.5</td>\n<td align=\"center\">node</td>\n<td align=\"center\">&gt;=2c</td>\n<td align=\"center\">&gt;=2G</td>\n<td align=\"center\">node1</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2-软件版本\"><a href=\"#1-2-软件版本\" class=\"headerlink\" title=\"1.2.软件版本\"></a>1.2.软件版本</h3><table>\n<thead>\n<tr>\n<th align=\"center\">系统类型</th>\n<th align=\"center\">Kubernetes版本</th>\n<th align=\"center\">docker版本</th>\n<th align=\"center\">kubeadm版本</th>\n<th align=\"center\">kubectl版本</th>\n<th align=\"center\">kubelet版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">CentOS 7.6</td>\n<td align=\"center\">v1.17.4</td>\n<td align=\"center\">19.03.8-ce</td>\n<td align=\"center\">v1.17.4</td>\n<td align=\"center\">v1.17.4</td>\n<td align=\"center\">v1.17.4</td>\n</tr>\n</tbody></table>","more":"<h3 id=\"1-3-云服务器环境初始化操作\"><a href=\"#1-3-云服务器环境初始化操作\" class=\"headerlink\" title=\"1.3.云服务器环境初始化操作\"></a>1.3.云服务器环境初始化操作</h3><h4 id=\"1-3-1-设置主机名\"><a href=\"#1-3-1-设置主机名\" class=\"headerlink\" title=\"1.3.1.设置主机名\"></a>1.3.1.设置主机名</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#master是设置名称 2台设备分别是 master node1</span></span><br><span class=\"line\">hostnamectl set-hostname master </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-2-修改host文件\"><a href=\"#1-3-2-修改host文件\" class=\"headerlink\" title=\"1.3.2.修改host文件\"></a>1.3.2.修改host文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">10.0.1.9 master</span><br><span class=\"line\">10.0.1.5 node1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-3-关闭selinux\"><a href=\"#1-3-3-关闭selinux\" class=\"headerlink\" title=\"1.3.3.关闭selinux\"></a>1.3.3.关闭selinux</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实时动态关闭</span></span><br><span class=\"line\">setenforce 0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止重启后自动开启</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-4-关闭交换分区\"><a href=\"#1-3-4-关闭交换分区\" class=\"headerlink\" title=\"1.3.4.关闭交换分区\"></a>1.3.4.关闭交换分区</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实时动态关闭</span></span><br><span class=\"line\">swapoff -a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁止重启后自动开启</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-5-网络配置文件\"><a href=\"#1-3-5-网络配置文件\" class=\"headerlink\" title=\"1.3.5.网络配置文件\"></a>1.3.5.网络配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/sysctl.d/k8s.conf</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">net.ipv4.ip_forward = 1</span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#退出 按 Ctrl + D</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行该命令 如果不执行就会在应用k8s.conf时出现加载错误</span></span><br><span class=\"line\">modprobe br_netfilter  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#应用配置文件</span></span><br><span class=\"line\">sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-6-配置资源地址\"><a href=\"#1-3-6-配置资源地址\" class=\"headerlink\" title=\"1.3.6.配置资源地址\"></a>1.3.6.配置资源地址</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install wget -y  <span class=\"comment\">#安装wget命令行</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo  <span class=\"comment\">#配置yum源</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum makecache <span class=\"comment\">#更新缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class=\"comment\">#配置docker下载的地址</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-7-安装Docker\"><a href=\"#1-3-7-安装Docker\" class=\"headerlink\" title=\"1.3.7.安装Docker\"></a>1.3.7.安装Docker</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates|<span class=\"built_in\">sort</span> -r  <span class=\"comment\">#展示版本列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y docker-ce  <span class=\"comment\">#默认安装最新版，也可以指定版本下载</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start docker <span class=\"comment\">#启动docker</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker <span class=\"comment\">#将docker加入到开机启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker version <span class=\"comment\">#查看docker启动情况 和版本信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果安装的docker版本使用的cgroups，按以下方式修改为systemd</span></span><br><span class=\"line\">vim /etc/docker/daemon.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;exec-opts&quot;</span>: [<span class=\"string\">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://mj9kvemk.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-8-配置k8s资源的下载地址\"><a href=\"#1-3-8-配置k8s资源的下载地址\" class=\"headerlink\" title=\"1.3.8.配置k8s资源的下载地址\"></a>1.3.8.配置k8s资源的下载地址</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-9-安装-kubelet-kubeadm-kubectl\"><a href=\"#1-3-9-安装-kubelet-kubeadm-kubectl\" class=\"headerlink\" title=\"1.3.9.安装 kubelet kubeadm kubectl\"></a>1.3.9.安装 kubelet kubeadm kubectl</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认安装最新版本，也可以指定版本</span></span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置kubelet开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet.service </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-开始初始化-（只在主节点Master上面操作）\"><a href=\"#2-开始初始化-（只在主节点Master上面操作）\" class=\"headerlink\" title=\"2.开始初始化 （只在主节点Master上面操作）\"></a>2.开始初始化 （只在主节点Master上面操作）</h2><h3 id=\"2-1-创建初始化配置文件\"><a href=\"#2-1-创建初始化配置文件\" class=\"headerlink\" title=\"2.1.创建初始化配置文件\"></a>2.1.创建初始化配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-根据各自部署环境修改配置文件\"><a href=\"#2-2-根据各自部署环境修改配置文件\" class=\"headerlink\" title=\"2.2.根据各自部署环境修改配置文件\"></a>2.2.根据各自部署环境修改配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">bootstrapTokens:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">groups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class=\"line\">  <span class=\"attr\">token:</span> <span class=\"string\">abcdef.0123456789abcdef</span></span><br><span class=\"line\">  <span class=\"attr\">ttl:</span> <span class=\"string\">24h0m0s</span></span><br><span class=\"line\">  <span class=\"attr\">usages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">signing</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">authentication</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">InitConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">localAPIEndpoint:</span></span><br><span class=\"line\">  <span class=\"attr\">advertiseAddress:</span> <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.9</span></span><br><span class=\"line\">  <span class=\"attr\">bindPort:</span> <span class=\"number\">6443</span></span><br><span class=\"line\"><span class=\"attr\">nodeRegistration:</span></span><br><span class=\"line\">  <span class=\"attr\">criSocket:</span> <span class=\"string\">/var/run/dockershim.sock</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s1</span></span><br><span class=\"line\">  <span class=\"attr\">taints:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">effect:</span> <span class=\"string\">NoSchedule</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiServer:</span></span><br><span class=\"line\">  <span class=\"attr\">timeoutForControlPlane:</span> <span class=\"string\">4m0s</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">certificatesDir:</span> <span class=\"string\">/etc/kubernetes/pki</span></span><br><span class=\"line\"><span class=\"attr\">clusterName:</span> <span class=\"string\">kubernetes</span></span><br><span class=\"line\"><span class=\"attr\">controllerManager:</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">CoreDNS</span></span><br><span class=\"line\"><span class=\"attr\">etcd:</span></span><br><span class=\"line\">  <span class=\"attr\">local:</span></span><br><span class=\"line\">    <span class=\"attr\">dataDir:</span> <span class=\"string\">/var/lib/etcd</span></span><br><span class=\"line\"><span class=\"attr\">imageRepository:</span> <span class=\"string\">gcr.azk8s.cn/google-containers</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">kubernetesVersion:</span> <span class=\"string\">v1.17.3</span></span><br><span class=\"line\"><span class=\"attr\">networking:</span></span><br><span class=\"line\">  <span class=\"attr\">dnsDomain:</span> <span class=\"string\">cluster.local</span></span><br><span class=\"line\">  <span class=\"attr\">podSubnet:</span> <span class=\"string\">&quot;192.168.0.0/16&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">serviceSubnet:</span> <span class=\"number\">10.96</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/12</span></span><br><span class=\"line\"><span class=\"attr\">scheduler:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置说明：<br><strong>imageRepository</strong>：指定为业务所需的镜像仓库地址<br><strong>podSubnet</strong>：指定的IP地址段与后续部署的网络插件相匹配。（部署flannel插件，配置为10.244.0.0/16；部署calico插件，配置为192.168.0.0/16）</p>\n<h3 id=\"2-3-开始初始化\"><a href=\"#2-3-开始初始化\" class=\"headerlink\" title=\"2.3.开始初始化\"></a>2.3.开始初始化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#只在Master1的主机上面执行 版本信息与你要安装的相同</span></span><br><span class=\"line\">kubeadm init --config=kubeadm-config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#当出现 类似 如下说明master安装成功</span></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 10.0.1.9:6443 --token abcdef.0123456789abcdef \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后执行安装成功提示的命令行，这部分执行你安装成功后的部分，可能每个人的有所不同</span></span><br><span class=\"line\">  <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-节点node加入（默认此事上面一步骤-都进行了操作）\"><a href=\"#3-节点node加入（默认此事上面一步骤-都进行了操作）\" class=\"headerlink\" title=\"3.节点node加入（默认此事上面一步骤 都进行了操作）\"></a>3.节点node加入（默认此事上面一步骤 都进行了操作）</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行master安装成功后的 kubeadm join命令，注意是你自己的，下面是举例</span></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> 10.0.1.9:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:b617794af7644843a3dd1104d717686fb31b9c295c7636c2b664b253e0fa6128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#当出现 类似 如下说明node加入集群成功</span></span><br><span class=\"line\">This node has joined the cluster:</span><br><span class=\"line\">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class=\"line\">* The Kubelet was informed of the new secure connection details.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-master节点验证安装进度\"><a href=\"#4-master节点验证安装进度\" class=\"headerlink\" title=\"4.master节点验证安装进度\"></a>4.master节点验证安装进度</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令一 </span></span><br><span class=\"line\">kubectl get cs <span class=\"comment\">#显示内容如下说明Master安装没问题</span></span><br><span class=\"line\">NAME                 STATUS    MESSAGE              ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                   </span><br><span class=\"line\">controller-manager   Healthy   ok                   </span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>: <span class=\"string\">&quot;true&quot;</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#命令二</span></span><br><span class=\"line\">kubectl get pod -n kube-system <span class=\"comment\">#查看pod状态，下面只是部分pod内容</span></span><br><span class=\"line\">NAME                                   READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">coredns-86c58d9df4-j9g8d               1/1     Running            0          128m</span><br><span class=\"line\">coredns-86c58d9df4-pg45w               1/1     Running            0          128m</span><br><span class=\"line\">etcd-k8s1                              1/1     Running            0          127m</span><br><span class=\"line\">kube-apiserver-k8s1                    1/1     Running            0          127m</span><br><span class=\"line\">kube-controller-manager-k8s1           1/1     Running            0          127m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在这里你可能发现你的coredns的状态并不是Running，不要着急，这里需要给集群配置网络插件，配置好就自动Running了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#命令三</span></span><br><span class=\"line\">kubectl get node <span class=\"comment\">#查看节点状态 </span></span><br><span class=\"line\">NAME   STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">master   NoReady    master   131m   v1.17.4</span><br><span class=\"line\">node1   NoReady    &lt;none&gt;   93m    v1.17.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果你添加了节点里面看的话,可能还未初始化，显示的是NoReady是因为集群网络插件还未配置。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-安装集群网络插件-只需要Master安装\"><a href=\"#5-安装集群网络插件-只需要Master安装\" class=\"headerlink\" title=\"5.安装集群网络插件 (只需要Master安装)\"></a>5.安装集群网络插件 (只需要Master安装)</h2><p>下面两种网络插件任选一种即可。</p>\n<h3 id=\"5-1-安装Flannel-网络插件\"><a href=\"#5-1-安装Flannel-网络插件\" class=\"headerlink\" title=\"5.1.安装Flannel 网络插件\"></a>5.1.安装Flannel 网络插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取flannel网络插件配置yaml文件</span></span><br><span class=\"line\">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果云服务器为多网卡机器，在启动命令中添加：</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        <span class=\"built_in\">command</span>:</span><br><span class=\"line\">        - /opt/bin/flanneld</span><br><span class=\"line\">        args:</span><br><span class=\"line\">        - --ip-masq</span><br><span class=\"line\">        - --kube-subnet-mgr</span><br><span class=\"line\">        - --iface=eth0  <span class=\"comment\"># 指定使用的相应网卡</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f kube-flannel.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装成功后查看pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\">NAME                                   READY   STATUS             RESTARTS   AGE</span><br><span class=\"line\">coredns-86c58d9df4-j9g8d               1/1     Running            0          128m</span><br><span class=\"line\">coredns-86c58d9df4-pg45w               1/1     Running            0          128m</span><br><span class=\"line\">etcd-k8s1                              1/1     Running            0          127m</span><br><span class=\"line\">kube-apiserver-k8s1                    1/1     Running            0          127m</span><br><span class=\"line\">kube-controller-manager-k8s1           1/1     Running            0          127m</span><br><span class=\"line\">kube-flannel-ds-amd64-7btlw            1/1     Running            0          91m</span><br><span class=\"line\">kube-flannel-ds-amd64-9vq42            1/1     Running            0          106m</span><br><span class=\"line\">kube-flannel-ds-amd64-kdf42            1/1     Running            0          90m</span><br><span class=\"line\">kube-proxy-dtmfs                       1/1     Running            0          128m</span><br><span class=\"line\">kube-proxy-p76tc                       1/1     Running            0          90m</span><br><span class=\"line\">kube-proxy-xgw28                       1/1     Running            0          91m</span><br><span class=\"line\">kube-scheduler-k8s1                    1/1     Running            0          128m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#全部Running则表示 成功了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-安装calico\"><a href=\"#5-2-安装calico\" class=\"headerlink\" title=\"5.2.安装calico\"></a>5.2.安装calico</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取calico网络插件配置yaml文件</span></span><br><span class=\"line\">wget https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装成功后查看pod</span></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#全部Running则表示 成功了</span></span><br></pre></td></tr></table></figure>"},{"title":"12.centos系统安装containerd","date":"2023-03-28T08:45:03.000Z","type":"tags","_content":"\n# centos系统安装containerd\n\n## 1.背景\n\nKubernetes 的早期版本仅适用于特定的容器运行时：Docker Engine。 后来，Kubernetes 增加了对使用其他容器运行时的支持。创建[CRI 标准](https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/) 是为了实现编排器（如 Kubernetes）和许多不同的容器运行时之间交互操作。 Docker Engine 没有实现（CRI）接口，因此 Kubernetes 项目创建了特殊代码来帮助过渡， 并使 dockershim 代码成为 Kubernetes 的一部分。\n\ndockershim 代码一直是一个临时解决方案（因此得名：shim）。 你可以阅读 [Kubernetes 移除 Dockershim 增强方案](https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim) 以了解相关的社区讨论和计划。 事实上，维护 dockershim 已经成为 Kubernetes 维护者的沉重负担。\n\n此外，在较新的 CRI 运行时中实现了与 dockershim 不兼容的功能，例如 cgroups v2 和用户命名空间。 从 Kubernetes 中移除 dockershim 允许在这些领域进行进一步的开发。\n\nKubernetes 在 [v1.24 版](https://kubernetes.io/releases/#release-v1-24)正式移除了 dockershim。\n\n<!--more-->\n\n## 2.containerd运行时\n\n[containerd](https://github.com/containerd/containerd)作为CNCF社区毕业的运行时项目，在k8s移除dockershim的背景下，有必要了解containerd的安装和基本使用。\n\n### 2.1.containerd安装\n\n```bash\n# 1.安装依赖\n \nyum install -y yum-utils device-mapper-persistent-data lvm2\n \n# 2.添加yum源\n \nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n \n# 3.安装containerd\n \nyum install containerd -y\n \n# 4.生成配置文件\n \ncontainerd config default > /etc/containerd/config.toml\n \n# 5.替换 containerd 默认的 sand_box 镜像，编辑 /etc/containerd/config.toml\n \nsandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.2\"\n \n# 6.启动服务\n \nsystemctl restart containerd && systemctl enable containerd\n```\n\n","source":"_posts/12.centos系统安装containerd.md","raw":"---\ntitle: 12.centos系统安装containerd\ndate: 2023-03-28 16:45:03\ntags:\n- k8s\n- containerd\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n# centos系统安装containerd\n\n## 1.背景\n\nKubernetes 的早期版本仅适用于特定的容器运行时：Docker Engine。 后来，Kubernetes 增加了对使用其他容器运行时的支持。创建[CRI 标准](https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/) 是为了实现编排器（如 Kubernetes）和许多不同的容器运行时之间交互操作。 Docker Engine 没有实现（CRI）接口，因此 Kubernetes 项目创建了特殊代码来帮助过渡， 并使 dockershim 代码成为 Kubernetes 的一部分。\n\ndockershim 代码一直是一个临时解决方案（因此得名：shim）。 你可以阅读 [Kubernetes 移除 Dockershim 增强方案](https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim) 以了解相关的社区讨论和计划。 事实上，维护 dockershim 已经成为 Kubernetes 维护者的沉重负担。\n\n此外，在较新的 CRI 运行时中实现了与 dockershim 不兼容的功能，例如 cgroups v2 和用户命名空间。 从 Kubernetes 中移除 dockershim 允许在这些领域进行进一步的开发。\n\nKubernetes 在 [v1.24 版](https://kubernetes.io/releases/#release-v1-24)正式移除了 dockershim。\n\n<!--more-->\n\n## 2.containerd运行时\n\n[containerd](https://github.com/containerd/containerd)作为CNCF社区毕业的运行时项目，在k8s移除dockershim的背景下，有必要了解containerd的安装和基本使用。\n\n### 2.1.containerd安装\n\n```bash\n# 1.安装依赖\n \nyum install -y yum-utils device-mapper-persistent-data lvm2\n \n# 2.添加yum源\n \nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n \n# 3.安装containerd\n \nyum install containerd -y\n \n# 4.生成配置文件\n \ncontainerd config default > /etc/containerd/config.toml\n \n# 5.替换 containerd 默认的 sand_box 镜像，编辑 /etc/containerd/config.toml\n \nsandbox_image = \"registry.aliyuncs.com/google_containers/pause:3.2\"\n \n# 6.启动服务\n \nsystemctl restart containerd && systemctl enable containerd\n```\n\n","slug":"12.centos系统安装containerd","published":1,"updated":"2024-01-06T00:22:19.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1d600080cfvf42qapml","content":"<h1 id=\"centos系统安装containerd\"><a href=\"#centos系统安装containerd\" class=\"headerlink\" title=\"centos系统安装containerd\"></a>centos系统安装containerd</h1><h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h2><p>Kubernetes 的早期版本仅适用于特定的容器运行时：Docker Engine。 后来，Kubernetes 增加了对使用其他容器运行时的支持。创建<a href=\"https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/\">CRI 标准</a> 是为了实现编排器（如 Kubernetes）和许多不同的容器运行时之间交互操作。 Docker Engine 没有实现（CRI）接口，因此 Kubernetes 项目创建了特殊代码来帮助过渡， 并使 dockershim 代码成为 Kubernetes 的一部分。</p>\n<p>dockershim 代码一直是一个临时解决方案（因此得名：shim）。 你可以阅读 <a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim\">Kubernetes 移除 Dockershim 增强方案</a> 以了解相关的社区讨论和计划。 事实上，维护 dockershim 已经成为 Kubernetes 维护者的沉重负担。</p>\n<p>此外，在较新的 CRI 运行时中实现了与 dockershim 不兼容的功能，例如 cgroups v2 和用户命名空间。 从 Kubernetes 中移除 dockershim 允许在这些领域进行进一步的开发。</p>\n<p>Kubernetes 在 <a href=\"https://kubernetes.io/releases/#release-v1-24\">v1.24 版</a>正式移除了 dockershim。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-containerd运行时\"><a href=\"#2-containerd运行时\" class=\"headerlink\" title=\"2.containerd运行时\"></a>2.containerd运行时</h2><p><a href=\"https://github.com/containerd/containerd\">containerd</a>作为CNCF社区毕业的运行时项目，在k8s移除dockershim的背景下，有必要了解containerd的安装和基本使用。</p>\n<h3 id=\"2-1-containerd安装\"><a href=\"#2-1-containerd安装\" class=\"headerlink\" title=\"2.1.containerd安装\"></a>2.1.containerd安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.安装依赖</span></span><br><span class=\"line\"> </span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 2.添加yum源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 3.安装containerd</span></span><br><span class=\"line\"> </span><br><span class=\"line\">yum install containerd -y</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 4.生成配置文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 5.替换 containerd 默认的 sand_box 镜像，编辑 /etc/containerd/config.toml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">sandbox_image = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 6.启动服务</span></span><br><span class=\"line\"> </span><br><span class=\"line\">systemctl restart containerd &amp;&amp; systemctl <span class=\"built_in\">enable</span> containerd</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover01.jpg","cover_type":"img","excerpt":"<h1 id=\"centos系统安装containerd\"><a href=\"#centos系统安装containerd\" class=\"headerlink\" title=\"centos系统安装containerd\"></a>centos系统安装containerd</h1><h2 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h2><p>Kubernetes 的早期版本仅适用于特定的容器运行时：Docker Engine。 后来，Kubernetes 增加了对使用其他容器运行时的支持。创建<a href=\"https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/\">CRI 标准</a> 是为了实现编排器（如 Kubernetes）和许多不同的容器运行时之间交互操作。 Docker Engine 没有实现（CRI）接口，因此 Kubernetes 项目创建了特殊代码来帮助过渡， 并使 dockershim 代码成为 Kubernetes 的一部分。</p>\n<p>dockershim 代码一直是一个临时解决方案（因此得名：shim）。 你可以阅读 <a href=\"https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim\">Kubernetes 移除 Dockershim 增强方案</a> 以了解相关的社区讨论和计划。 事实上，维护 dockershim 已经成为 Kubernetes 维护者的沉重负担。</p>\n<p>此外，在较新的 CRI 运行时中实现了与 dockershim 不兼容的功能，例如 cgroups v2 和用户命名空间。 从 Kubernetes 中移除 dockershim 允许在这些领域进行进一步的开发。</p>\n<p>Kubernetes 在 <a href=\"https://kubernetes.io/releases/#release-v1-24\">v1.24 版</a>正式移除了 dockershim。</p>","more":"<h2 id=\"2-containerd运行时\"><a href=\"#2-containerd运行时\" class=\"headerlink\" title=\"2.containerd运行时\"></a>2.containerd运行时</h2><p><a href=\"https://github.com/containerd/containerd\">containerd</a>作为CNCF社区毕业的运行时项目，在k8s移除dockershim的背景下，有必要了解containerd的安装和基本使用。</p>\n<h3 id=\"2-1-containerd安装\"><a href=\"#2-1-containerd安装\" class=\"headerlink\" title=\"2.1.containerd安装\"></a>2.1.containerd安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.安装依赖</span></span><br><span class=\"line\"> </span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 2.添加yum源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 3.安装containerd</span></span><br><span class=\"line\"> </span><br><span class=\"line\">yum install containerd -y</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 4.生成配置文件</span></span><br><span class=\"line\"> </span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 5.替换 containerd 默认的 sand_box 镜像，编辑 /etc/containerd/config.toml</span></span><br><span class=\"line\"> </span><br><span class=\"line\">sandbox_image = <span class=\"string\">&quot;registry.aliyuncs.com/google_containers/pause:3.2&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 6.启动服务</span></span><br><span class=\"line\"> </span><br><span class=\"line\">systemctl restart containerd &amp;&amp; systemctl <span class=\"built_in\">enable</span> containerd</span><br></pre></td></tr></table></figure>"},{"title":"k8s apiserver证书添加新地址","date":"2023-03-28T13:01:05.000Z","type":"tags","_content":"\n# k8s apiserver证书添加新地址\n\n## 1.环境基础\n\n| 集群版本 |     安装环境      |\n| :------: | :---------------: |\n| v1.26.3  | kubeadm安装的集群 |\n\n<!--more-->\n\n## 2.查看当前证书中的可信地址\n\n```bash\n# k8s证书目录： /etc/kubernetes/pki\n\nopenssl x509 -in apiserver.crt -noout -text\n```\n\n## 3.给证书添加新地址\n\n### 3.1.修改kubeadm-config.yaml ,在certSANs中添加要加入的地址\n\n```yaml\napiServer:\n  certSANs:\n  - xx.xx.xx.xx\n```\n\n### 3.2.删除k8s证书目录中的apiserver.crt 、apiserver.key\n\n```bash\n# k8s证书目录： /etc/kubernetes/pki\n\nrm -f apiserver.*\n```\n\n### 3.3.根据kubeadm配置文件生成新的证书\n\n```bash\nkubeadm init phase certs apiserver --config ./kubeadm-config.yaml\n```\n\n### 3.4.查看新生成证书中的可信地址\n\n```bash\n# k8s证书目录： /etc/kubernetes/pki\n\nopenssl x509 -in apiserver.crt -noout -text\n```\n\n","source":"_posts/13.k8s-apiserver证书添加新地址.md","raw":"---\ntitle: k8s apiserver证书添加新地址\ndate: 2023-03-28 21:01:05\ntags:\n- k8s\n- ca\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n# k8s apiserver证书添加新地址\n\n## 1.环境基础\n\n| 集群版本 |     安装环境      |\n| :------: | :---------------: |\n| v1.26.3  | kubeadm安装的集群 |\n\n<!--more-->\n\n## 2.查看当前证书中的可信地址\n\n```bash\n# k8s证书目录： /etc/kubernetes/pki\n\nopenssl x509 -in apiserver.crt -noout -text\n```\n\n## 3.给证书添加新地址\n\n### 3.1.修改kubeadm-config.yaml ,在certSANs中添加要加入的地址\n\n```yaml\napiServer:\n  certSANs:\n  - xx.xx.xx.xx\n```\n\n### 3.2.删除k8s证书目录中的apiserver.crt 、apiserver.key\n\n```bash\n# k8s证书目录： /etc/kubernetes/pki\n\nrm -f apiserver.*\n```\n\n### 3.3.根据kubeadm配置文件生成新的证书\n\n```bash\nkubeadm init phase certs apiserver --config ./kubeadm-config.yaml\n```\n\n### 3.4.查看新生成证书中的可信地址\n\n```bash\n# k8s证书目录： /etc/kubernetes/pki\n\nopenssl x509 -in apiserver.crt -noout -text\n```\n\n","slug":"13.k8s-apiserver证书添加新地址","published":1,"updated":"2024-01-06T00:22:32.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1d700090cfv1irhafvt","content":"<h1 id=\"k8s-apiserver证书添加新地址\"><a href=\"#k8s-apiserver证书添加新地址\" class=\"headerlink\" title=\"k8s apiserver证书添加新地址\"></a>k8s apiserver证书添加新地址</h1><h2 id=\"1-环境基础\"><a href=\"#1-环境基础\" class=\"headerlink\" title=\"1.环境基础\"></a>1.环境基础</h2><table>\n<thead>\n<tr>\n<th align=\"center\">集群版本</th>\n<th align=\"center\">安装环境</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">v1.26.3</td>\n<td align=\"center\">kubeadm安装的集群</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h2 id=\"2-查看当前证书中的可信地址\"><a href=\"#2-查看当前证书中的可信地址\" class=\"headerlink\" title=\"2.查看当前证书中的可信地址\"></a>2.查看当前证书中的可信地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s证书目录： /etc/kubernetes/pki</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> apiserver.crt -noout -text</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-给证书添加新地址\"><a href=\"#3-给证书添加新地址\" class=\"headerlink\" title=\"3.给证书添加新地址\"></a>3.给证书添加新地址</h2><h3 id=\"3-1-修改kubeadm-config-yaml-在certSANs中添加要加入的地址\"><a href=\"#3-1-修改kubeadm-config-yaml-在certSANs中添加要加入的地址\" class=\"headerlink\" title=\"3.1.修改kubeadm-config.yaml ,在certSANs中添加要加入的地址\"></a>3.1.修改kubeadm-config.yaml ,在certSANs中添加要加入的地址</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiServer:</span></span><br><span class=\"line\">  <span class=\"attr\">certSANs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">xx.xx.xx.xx</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-删除k8s证书目录中的apiserver-crt-、apiserver-key\"><a href=\"#3-2-删除k8s证书目录中的apiserver-crt-、apiserver-key\" class=\"headerlink\" title=\"3.2.删除k8s证书目录中的apiserver.crt 、apiserver.key\"></a>3.2.删除k8s证书目录中的apiserver.crt 、apiserver.key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s证书目录： /etc/kubernetes/pki</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -f apiserver.*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-根据kubeadm配置文件生成新的证书\"><a href=\"#3-3-根据kubeadm配置文件生成新的证书\" class=\"headerlink\" title=\"3.3.根据kubeadm配置文件生成新的证书\"></a>3.3.根据kubeadm配置文件生成新的证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init phase certs apiserver --config ./kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-查看新生成证书中的可信地址\"><a href=\"#3-4-查看新生成证书中的可信地址\" class=\"headerlink\" title=\"3.4.查看新生成证书中的可信地址\"></a>3.4.查看新生成证书中的可信地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s证书目录： /etc/kubernetes/pki</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> apiserver.crt -noout -text</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover09.jpg","cover_type":"img","excerpt":"<h1 id=\"k8s-apiserver证书添加新地址\"><a href=\"#k8s-apiserver证书添加新地址\" class=\"headerlink\" title=\"k8s apiserver证书添加新地址\"></a>k8s apiserver证书添加新地址</h1><h2 id=\"1-环境基础\"><a href=\"#1-环境基础\" class=\"headerlink\" title=\"1.环境基础\"></a>1.环境基础</h2><table>\n<thead>\n<tr>\n<th align=\"center\">集群版本</th>\n<th align=\"center\">安装环境</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">v1.26.3</td>\n<td align=\"center\">kubeadm安装的集群</td>\n</tr>\n</tbody></table>","more":"<h2 id=\"2-查看当前证书中的可信地址\"><a href=\"#2-查看当前证书中的可信地址\" class=\"headerlink\" title=\"2.查看当前证书中的可信地址\"></a>2.查看当前证书中的可信地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s证书目录： /etc/kubernetes/pki</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> apiserver.crt -noout -text</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-给证书添加新地址\"><a href=\"#3-给证书添加新地址\" class=\"headerlink\" title=\"3.给证书添加新地址\"></a>3.给证书添加新地址</h2><h3 id=\"3-1-修改kubeadm-config-yaml-在certSANs中添加要加入的地址\"><a href=\"#3-1-修改kubeadm-config-yaml-在certSANs中添加要加入的地址\" class=\"headerlink\" title=\"3.1.修改kubeadm-config.yaml ,在certSANs中添加要加入的地址\"></a>3.1.修改kubeadm-config.yaml ,在certSANs中添加要加入的地址</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiServer:</span></span><br><span class=\"line\">  <span class=\"attr\">certSANs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">xx.xx.xx.xx</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-删除k8s证书目录中的apiserver-crt-、apiserver-key\"><a href=\"#3-2-删除k8s证书目录中的apiserver-crt-、apiserver-key\" class=\"headerlink\" title=\"3.2.删除k8s证书目录中的apiserver.crt 、apiserver.key\"></a>3.2.删除k8s证书目录中的apiserver.crt 、apiserver.key</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s证书目录： /etc/kubernetes/pki</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -f apiserver.*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-根据kubeadm配置文件生成新的证书\"><a href=\"#3-3-根据kubeadm配置文件生成新的证书\" class=\"headerlink\" title=\"3.3.根据kubeadm配置文件生成新的证书\"></a>3.3.根据kubeadm配置文件生成新的证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init phase certs apiserver --config ./kubeadm-config.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-查看新生成证书中的可信地址\"><a href=\"#3-4-查看新生成证书中的可信地址\" class=\"headerlink\" title=\"3.4.查看新生成证书中的可信地址\"></a>3.4.查看新生成证书中的可信地址</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># k8s证书目录： /etc/kubernetes/pki</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> apiserver.crt -noout -text</span><br></pre></td></tr></table></figure>"},{"title":"动态主机配置协议DHCP","type":"tags","date":"2023-12-25T03:19:10.000Z","_content":"\n## 动态主机配置协议DHCP\n\n### 1.什么是DHCP\n\nDHCP是一个应用层协议，能够让设备自动获取IP地址（以及其他重要网络资源，比如DNS服务器和路由网关的地址）。\n\n### 2.DHCP头结构\n\n| 偏移位 |           0-15           |     16-31      |\n| :----: | :----------------------: | :------------: |\n|   0    |    操作代码\\|硬件类型    | 硬件长度\\|跳数 |\n|   32   |          事务id          |                |\n|   64   |         消耗时间         |      标记      |\n|   96   |       客户端IP地址       |                |\n|  128   |        你的IP地址        |                |\n|  160   |       服务器IP地址       |                |\n|  196   |        网关IP地址        |                |\n|  228+  | 客户端硬件地址（16字节） |                |\n|        | 服务器主机地址（64字节） |                |\n|        |   启动文件（128字节）    |                |\n|        |           选项           |                |\n\n- 操作代码（OpCode)：用来指出这个数据包是DHCP请求还是DHCP回复。\n- 硬件类型（Hardware Type）：硬件地址类型（10MB以太网、IEEE802等）。\n- 硬件长度（Hardware Length）：硬件地址长度。\n- 跳数（Hops）：中继代理用来帮助寻找DHCP服务器。\n- 事务ID（Transaction ID）：用来匹配请求和响应的一个随机数。\n- 标记（Flags）：DHCP客户端能够接受的流量类型（单播、广播以及其他）。\n- 客户端IP地址（Client IP Address）：客户端的IP地址。\n- 你的IP地址（Your IP　Address）：DHCP服务器提供的IP地址。\n- 服务器IP地址（Server　IP　Address）：DHCP服务器的IP地址。\n- 网关IP地址（Gateway　IP　Address）：网络默认网关的IP地址。\n- 客户端硬件地址（Client　Hardware　Address）：客户端的MAC地址。\n- 服务器主机名（Server　Host　Name）：服务器的主机名（可选）。\n- 启动文件（Boot　File）：DHCP所使用的启动文件（可选）。\n- 选项（Options）：用来对DHCP数据包进行扩展，以提供更多功能。\n\n### 3.DHCP续租过程\n\n续租过程在一个客户端和DHCP服务器之间进行，总共分四步：\n\n第一步：客户端向DHCP服务器发送发现（Discover）数据包。\n\n第二步：DHCP服务器向客户端发送提供（Offer）数据包。\n\n第三步：客户端向DHCP服务器发送请求（Request）数据包。\n\n第四步：DHCP服务器向客户端发送确认（Acknowledgement）数据包。\n\n注意，租内续约只需要请求和确认两个步骤。\n","source":"_posts/15.动态主机配置协议DHCP.md","raw":"---\ntitle: 动态主机配置协议DHCP\ntype: tags\ndate: 2023-12-25 11:19:10\ntags:\n- DHCP\ncategories:\n- 学习笔记\n---\n\n## 动态主机配置协议DHCP\n\n### 1.什么是DHCP\n\nDHCP是一个应用层协议，能够让设备自动获取IP地址（以及其他重要网络资源，比如DNS服务器和路由网关的地址）。\n\n### 2.DHCP头结构\n\n| 偏移位 |           0-15           |     16-31      |\n| :----: | :----------------------: | :------------: |\n|   0    |    操作代码\\|硬件类型    | 硬件长度\\|跳数 |\n|   32   |          事务id          |                |\n|   64   |         消耗时间         |      标记      |\n|   96   |       客户端IP地址       |                |\n|  128   |        你的IP地址        |                |\n|  160   |       服务器IP地址       |                |\n|  196   |        网关IP地址        |                |\n|  228+  | 客户端硬件地址（16字节） |                |\n|        | 服务器主机地址（64字节） |                |\n|        |   启动文件（128字节）    |                |\n|        |           选项           |                |\n\n- 操作代码（OpCode)：用来指出这个数据包是DHCP请求还是DHCP回复。\n- 硬件类型（Hardware Type）：硬件地址类型（10MB以太网、IEEE802等）。\n- 硬件长度（Hardware Length）：硬件地址长度。\n- 跳数（Hops）：中继代理用来帮助寻找DHCP服务器。\n- 事务ID（Transaction ID）：用来匹配请求和响应的一个随机数。\n- 标记（Flags）：DHCP客户端能够接受的流量类型（单播、广播以及其他）。\n- 客户端IP地址（Client IP Address）：客户端的IP地址。\n- 你的IP地址（Your IP　Address）：DHCP服务器提供的IP地址。\n- 服务器IP地址（Server　IP　Address）：DHCP服务器的IP地址。\n- 网关IP地址（Gateway　IP　Address）：网络默认网关的IP地址。\n- 客户端硬件地址（Client　Hardware　Address）：客户端的MAC地址。\n- 服务器主机名（Server　Host　Name）：服务器的主机名（可选）。\n- 启动文件（Boot　File）：DHCP所使用的启动文件（可选）。\n- 选项（Options）：用来对DHCP数据包进行扩展，以提供更多功能。\n\n### 3.DHCP续租过程\n\n续租过程在一个客户端和DHCP服务器之间进行，总共分四步：\n\n第一步：客户端向DHCP服务器发送发现（Discover）数据包。\n\n第二步：DHCP服务器向客户端发送提供（Offer）数据包。\n\n第三步：客户端向DHCP服务器发送请求（Request）数据包。\n\n第四步：DHCP服务器向客户端发送确认（Acknowledgement）数据包。\n\n注意，租内续约只需要请求和确认两个步骤。\n","slug":"15.动态主机配置协议DHCP","published":1,"updated":"2024-01-06T00:22:44.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1d8000d0cfvf2iifzjv","content":"<h2 id=\"动态主机配置协议DHCP\"><a href=\"#动态主机配置协议DHCP\" class=\"headerlink\" title=\"动态主机配置协议DHCP\"></a>动态主机配置协议DHCP</h2><h3 id=\"1-什么是DHCP\"><a href=\"#1-什么是DHCP\" class=\"headerlink\" title=\"1.什么是DHCP\"></a>1.什么是DHCP</h3><p>DHCP是一个应用层协议，能够让设备自动获取IP地址（以及其他重要网络资源，比如DNS服务器和路由网关的地址）。</p>\n<h3 id=\"2-DHCP头结构\"><a href=\"#2-DHCP头结构\" class=\"headerlink\" title=\"2.DHCP头结构\"></a>2.DHCP头结构</h3><table>\n<thead>\n<tr>\n<th align=\"center\">偏移位</th>\n<th align=\"center\">0-15</th>\n<th align=\"center\">16-31</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">操作代码|硬件类型</td>\n<td align=\"center\">硬件长度|跳数</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\">事务id</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">64</td>\n<td align=\"center\">消耗时间</td>\n<td align=\"center\">标记</td>\n</tr>\n<tr>\n<td align=\"center\">96</td>\n<td align=\"center\">客户端IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">128</td>\n<td align=\"center\">你的IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">160</td>\n<td align=\"center\">服务器IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">196</td>\n<td align=\"center\">网关IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">228+</td>\n<td align=\"center\">客户端硬件地址（16字节）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">服务器主机地址（64字节）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">启动文件（128字节）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">选项</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>操作代码（OpCode)：用来指出这个数据包是DHCP请求还是DHCP回复。</li>\n<li>硬件类型（Hardware Type）：硬件地址类型（10MB以太网、IEEE802等）。</li>\n<li>硬件长度（Hardware Length）：硬件地址长度。</li>\n<li>跳数（Hops）：中继代理用来帮助寻找DHCP服务器。</li>\n<li>事务ID（Transaction ID）：用来匹配请求和响应的一个随机数。</li>\n<li>标记（Flags）：DHCP客户端能够接受的流量类型（单播、广播以及其他）。</li>\n<li>客户端IP地址（Client IP Address）：客户端的IP地址。</li>\n<li>你的IP地址（Your IP　Address）：DHCP服务器提供的IP地址。</li>\n<li>服务器IP地址（Server　IP　Address）：DHCP服务器的IP地址。</li>\n<li>网关IP地址（Gateway　IP　Address）：网络默认网关的IP地址。</li>\n<li>客户端硬件地址（Client　Hardware　Address）：客户端的MAC地址。</li>\n<li>服务器主机名（Server　Host　Name）：服务器的主机名（可选）。</li>\n<li>启动文件（Boot　File）：DHCP所使用的启动文件（可选）。</li>\n<li>选项（Options）：用来对DHCP数据包进行扩展，以提供更多功能。</li>\n</ul>\n<h3 id=\"3-DHCP续租过程\"><a href=\"#3-DHCP续租过程\" class=\"headerlink\" title=\"3.DHCP续租过程\"></a>3.DHCP续租过程</h3><p>续租过程在一个客户端和DHCP服务器之间进行，总共分四步：</p>\n<p>第一步：客户端向DHCP服务器发送发现（Discover）数据包。</p>\n<p>第二步：DHCP服务器向客户端发送提供（Offer）数据包。</p>\n<p>第三步：客户端向DHCP服务器发送请求（Request）数据包。</p>\n<p>第四步：DHCP服务器向客户端发送确认（Acknowledgement）数据包。</p>\n<p>注意，租内续约只需要请求和确认两个步骤。</p>\n","site":{"data":{}},"cover":"/img/cover03.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"动态主机配置协议DHCP\"><a href=\"#动态主机配置协议DHCP\" class=\"headerlink\" title=\"动态主机配置协议DHCP\"></a>动态主机配置协议DHCP</h2><h3 id=\"1-什么是DHCP\"><a href=\"#1-什么是DHCP\" class=\"headerlink\" title=\"1.什么是DHCP\"></a>1.什么是DHCP</h3><p>DHCP是一个应用层协议，能够让设备自动获取IP地址（以及其他重要网络资源，比如DNS服务器和路由网关的地址）。</p>\n<h3 id=\"2-DHCP头结构\"><a href=\"#2-DHCP头结构\" class=\"headerlink\" title=\"2.DHCP头结构\"></a>2.DHCP头结构</h3><table>\n<thead>\n<tr>\n<th align=\"center\">偏移位</th>\n<th align=\"center\">0-15</th>\n<th align=\"center\">16-31</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">操作代码|硬件类型</td>\n<td align=\"center\">硬件长度|跳数</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\">事务id</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">64</td>\n<td align=\"center\">消耗时间</td>\n<td align=\"center\">标记</td>\n</tr>\n<tr>\n<td align=\"center\">96</td>\n<td align=\"center\">客户端IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">128</td>\n<td align=\"center\">你的IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">160</td>\n<td align=\"center\">服务器IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">196</td>\n<td align=\"center\">网关IP地址</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">228+</td>\n<td align=\"center\">客户端硬件地址（16字节）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">服务器主机地址（64字节）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">启动文件（128字节）</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">选项</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>操作代码（OpCode)：用来指出这个数据包是DHCP请求还是DHCP回复。</li>\n<li>硬件类型（Hardware Type）：硬件地址类型（10MB以太网、IEEE802等）。</li>\n<li>硬件长度（Hardware Length）：硬件地址长度。</li>\n<li>跳数（Hops）：中继代理用来帮助寻找DHCP服务器。</li>\n<li>事务ID（Transaction ID）：用来匹配请求和响应的一个随机数。</li>\n<li>标记（Flags）：DHCP客户端能够接受的流量类型（单播、广播以及其他）。</li>\n<li>客户端IP地址（Client IP Address）：客户端的IP地址。</li>\n<li>你的IP地址（Your IP　Address）：DHCP服务器提供的IP地址。</li>\n<li>服务器IP地址（Server　IP　Address）：DHCP服务器的IP地址。</li>\n<li>网关IP地址（Gateway　IP　Address）：网络默认网关的IP地址。</li>\n<li>客户端硬件地址（Client　Hardware　Address）：客户端的MAC地址。</li>\n<li>服务器主机名（Server　Host　Name）：服务器的主机名（可选）。</li>\n<li>启动文件（Boot　File）：DHCP所使用的启动文件（可选）。</li>\n<li>选项（Options）：用来对DHCP数据包进行扩展，以提供更多功能。</li>\n</ul>\n<h3 id=\"3-DHCP续租过程\"><a href=\"#3-DHCP续租过程\" class=\"headerlink\" title=\"3.DHCP续租过程\"></a>3.DHCP续租过程</h3><p>续租过程在一个客户端和DHCP服务器之间进行，总共分四步：</p>\n<p>第一步：客户端向DHCP服务器发送发现（Discover）数据包。</p>\n<p>第二步：DHCP服务器向客户端发送提供（Offer）数据包。</p>\n<p>第三步：客户端向DHCP服务器发送请求（Request）数据包。</p>\n<p>第四步：DHCP服务器向客户端发送确认（Acknowledgement）数据包。</p>\n<p>注意，租内续约只需要请求和确认两个步骤。</p>\n"},{"title":"TCP的三次握手和四次挥手","type":"tags","date":"2023-12-22T09:26:06.000Z","_content":"\n## TCP的三次握手和四次挥手\n\n### 1.常见的网络概念\n\nMTU：maximum transmission unit，数据链路协议所使用的最大传输单元。\n\n### 2.TCP的三次握手\n\n所有基于TCP的通信都需要以两台主机的握手开始，这个握手过程主要希望能达到以下不同的目的：\n\n- 保证源主机确定目的主机在线，并且可以进行通信。\n- 让源主机检查它是否正在监听试图去连接的端口。\n- 允许源主机向接收者发送它的起始序列号，使得两台主机可以将数据包流保持有序。\n\nTCP握手分为三个步骤：\n\n第一步，主动发起通信的设备（假设它为主机A）向目标（假设它为主机B）发送了一个TCP数据包。这个数据包的TCP头设置了SYN标志，并包含了在通信过程中会用到的初始序列号和最大分段大小。\n\n第二步，主机B对于这个数据包回复一个类似于设置了SYN和ACK标志以及包含了它初始序列号的数据包。\n\n第三步，主机A向主机B发送最后一个仅设置了ACK标志的数据包。\n\n这个过程完成后，双方设备就具备了正常通信所需的信息。\n\n### 3.TCP的四次挥手\n\n在TCP中，每次握手后也会有终止。TCP终止用来在两台设备完成通信后正常地结束连接。这个过程包含4个数据包，并且用一个FIN标志来表明连接的终结。\n\nTCP挥手分为四步：\n\n第一步，主机A通过发送一个设置了FIN和ACK标志的TCP的数据包，告诉主机B通信完成。\n\n第二步，主机B以一个ACK数据包响应。\n\n第三步，主机B传输自己的FIN/ACK数据包给主机A。\n\n第四步，主机A响应一个ACK数据包。\n\n这个过程完成后，双方就结束了本次通信。\n","source":"_posts/14.TCP的三次握手和四次挥手.md","raw":"---\ntitle: TCP的三次握手和四次挥手\ntype: tags\ndate: 2023-12-22 17:26:06\ntags:\n- 网络\n- TCP\ncategories:\n- 学习笔记\n---\n\n## TCP的三次握手和四次挥手\n\n### 1.常见的网络概念\n\nMTU：maximum transmission unit，数据链路协议所使用的最大传输单元。\n\n### 2.TCP的三次握手\n\n所有基于TCP的通信都需要以两台主机的握手开始，这个握手过程主要希望能达到以下不同的目的：\n\n- 保证源主机确定目的主机在线，并且可以进行通信。\n- 让源主机检查它是否正在监听试图去连接的端口。\n- 允许源主机向接收者发送它的起始序列号，使得两台主机可以将数据包流保持有序。\n\nTCP握手分为三个步骤：\n\n第一步，主动发起通信的设备（假设它为主机A）向目标（假设它为主机B）发送了一个TCP数据包。这个数据包的TCP头设置了SYN标志，并包含了在通信过程中会用到的初始序列号和最大分段大小。\n\n第二步，主机B对于这个数据包回复一个类似于设置了SYN和ACK标志以及包含了它初始序列号的数据包。\n\n第三步，主机A向主机B发送最后一个仅设置了ACK标志的数据包。\n\n这个过程完成后，双方设备就具备了正常通信所需的信息。\n\n### 3.TCP的四次挥手\n\n在TCP中，每次握手后也会有终止。TCP终止用来在两台设备完成通信后正常地结束连接。这个过程包含4个数据包，并且用一个FIN标志来表明连接的终结。\n\nTCP挥手分为四步：\n\n第一步，主机A通过发送一个设置了FIN和ACK标志的TCP的数据包，告诉主机B通信完成。\n\n第二步，主机B以一个ACK数据包响应。\n\n第三步，主机B传输自己的FIN/ACK数据包给主机A。\n\n第四步，主机A响应一个ACK数据包。\n\n这个过程完成后，双方就结束了本次通信。\n","slug":"14.TCP的三次握手和四次挥手","published":1,"updated":"2024-01-06T00:22:38.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1d9000e0cfv4eaq3zz6","content":"<h2 id=\"TCP的三次握手和四次挥手\"><a href=\"#TCP的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP的三次握手和四次挥手\"></a>TCP的三次握手和四次挥手</h2><h3 id=\"1-常见的网络概念\"><a href=\"#1-常见的网络概念\" class=\"headerlink\" title=\"1.常见的网络概念\"></a>1.常见的网络概念</h3><p>MTU：maximum transmission unit，数据链路协议所使用的最大传输单元。</p>\n<h3 id=\"2-TCP的三次握手\"><a href=\"#2-TCP的三次握手\" class=\"headerlink\" title=\"2.TCP的三次握手\"></a>2.TCP的三次握手</h3><p>所有基于TCP的通信都需要以两台主机的握手开始，这个握手过程主要希望能达到以下不同的目的：</p>\n<ul>\n<li>保证源主机确定目的主机在线，并且可以进行通信。</li>\n<li>让源主机检查它是否正在监听试图去连接的端口。</li>\n<li>允许源主机向接收者发送它的起始序列号，使得两台主机可以将数据包流保持有序。</li>\n</ul>\n<p>TCP握手分为三个步骤：</p>\n<p>第一步，主动发起通信的设备（假设它为主机A）向目标（假设它为主机B）发送了一个TCP数据包。这个数据包的TCP头设置了SYN标志，并包含了在通信过程中会用到的初始序列号和最大分段大小。</p>\n<p>第二步，主机B对于这个数据包回复一个类似于设置了SYN和ACK标志以及包含了它初始序列号的数据包。</p>\n<p>第三步，主机A向主机B发送最后一个仅设置了ACK标志的数据包。</p>\n<p>这个过程完成后，双方设备就具备了正常通信所需的信息。</p>\n<h3 id=\"3-TCP的四次挥手\"><a href=\"#3-TCP的四次挥手\" class=\"headerlink\" title=\"3.TCP的四次挥手\"></a>3.TCP的四次挥手</h3><p>在TCP中，每次握手后也会有终止。TCP终止用来在两台设备完成通信后正常地结束连接。这个过程包含4个数据包，并且用一个FIN标志来表明连接的终结。</p>\n<p>TCP挥手分为四步：</p>\n<p>第一步，主机A通过发送一个设置了FIN和ACK标志的TCP的数据包，告诉主机B通信完成。</p>\n<p>第二步，主机B以一个ACK数据包响应。</p>\n<p>第三步，主机B传输自己的FIN/ACK数据包给主机A。</p>\n<p>第四步，主机A响应一个ACK数据包。</p>\n<p>这个过程完成后，双方就结束了本次通信。</p>\n","site":{"data":{}},"cover":"/img/cover12.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"TCP的三次握手和四次挥手\"><a href=\"#TCP的三次握手和四次挥手\" class=\"headerlink\" title=\"TCP的三次握手和四次挥手\"></a>TCP的三次握手和四次挥手</h2><h3 id=\"1-常见的网络概念\"><a href=\"#1-常见的网络概念\" class=\"headerlink\" title=\"1.常见的网络概念\"></a>1.常见的网络概念</h3><p>MTU：maximum transmission unit，数据链路协议所使用的最大传输单元。</p>\n<h3 id=\"2-TCP的三次握手\"><a href=\"#2-TCP的三次握手\" class=\"headerlink\" title=\"2.TCP的三次握手\"></a>2.TCP的三次握手</h3><p>所有基于TCP的通信都需要以两台主机的握手开始，这个握手过程主要希望能达到以下不同的目的：</p>\n<ul>\n<li>保证源主机确定目的主机在线，并且可以进行通信。</li>\n<li>让源主机检查它是否正在监听试图去连接的端口。</li>\n<li>允许源主机向接收者发送它的起始序列号，使得两台主机可以将数据包流保持有序。</li>\n</ul>\n<p>TCP握手分为三个步骤：</p>\n<p>第一步，主动发起通信的设备（假设它为主机A）向目标（假设它为主机B）发送了一个TCP数据包。这个数据包的TCP头设置了SYN标志，并包含了在通信过程中会用到的初始序列号和最大分段大小。</p>\n<p>第二步，主机B对于这个数据包回复一个类似于设置了SYN和ACK标志以及包含了它初始序列号的数据包。</p>\n<p>第三步，主机A向主机B发送最后一个仅设置了ACK标志的数据包。</p>\n<p>这个过程完成后，双方设备就具备了正常通信所需的信息。</p>\n<h3 id=\"3-TCP的四次挥手\"><a href=\"#3-TCP的四次挥手\" class=\"headerlink\" title=\"3.TCP的四次挥手\"></a>3.TCP的四次挥手</h3><p>在TCP中，每次握手后也会有终止。TCP终止用来在两台设备完成通信后正常地结束连接。这个过程包含4个数据包，并且用一个FIN标志来表明连接的终结。</p>\n<p>TCP挥手分为四步：</p>\n<p>第一步，主机A通过发送一个设置了FIN和ACK标志的TCP的数据包，告诉主机B通信完成。</p>\n<p>第二步，主机B以一个ACK数据包响应。</p>\n<p>第三步，主机B传输自己的FIN/ACK数据包给主机A。</p>\n<p>第四步，主机A响应一个ACK数据包。</p>\n<p>这个过程完成后，双方就结束了本次通信。</p>\n"},{"title":"域名系统DNS","type":"tags","date":"2023-12-25T06:31:14.000Z","_content":"\n## 域名系统DNS\n\nDNS服务器存储了一个有着IP地址和DNS名字映射资源记录的数据库，并将其和客户端与其他DNS服务器共享。\n\n### 1.DNS数据包结构\n\n| 偏移位 |      0-15      |                         16-31                          |\n| :----: | :------------: | :----------------------------------------------------: |\n|   0    |    DNS ID号    | QR \\| 操作代码\\| AA \\| TC \\| RD \\| RA \\| Z \\| 响应代码 |\n|   32   |    问题计数    |                        回答区段                        |\n|   64   | 域名服务器计数 |                      额外记录计数                      |\n|   96   |    问题区段    |                        回答区段                        |\n|  128   |    权威区段    |                      额外信息区段                      |\n\n- DNS ID号（DNS　ID　Number）：用来应对DNS查询和DNS响应。\n- 查询／响应（Query／Response）：用来指明这个数据包是DNS查询还是响应。\n- 操作代码（OpCode）：用来定义消息中的请求类型。\n- 权威应答（Authoritative Answer）：如果响应数据包中设定了这个则说明这个响应是由域内权威域名服务器发出的。\n- 截断（Truncation）：用来指明这个响应由于太长，无法装入数据包而被截断。\n- 期望递归（Recursion　Desired）：当请求中设定了这个值，则说明DNS客户端在目标域名服务器不含有所请求信息的情况下，要求进行递归查询。\n- 可用递归（Recursion　Available）：当响应中设定了这个值，说明域名服务器支持递归查询。\n- 响应代码（Response　Code）：在DNS响应中用来指明错误。\n- 问题计数（Question　Count）：在问题区段中的条目数。\n- 回答计数（Answer　Count）：在回答区段中的条目数。\n- 域名服务器计数（Name　Server　Count）：在权威区段的域名资源记录数。\n- 额外记录计数（Additional　Records　Count）：在额外信息区段中其他资源记录数。\n- 问题区段（Question　section）：大小可变，包含有被发送到DNS服务器的一条或多条的信息查询的部分。\n- 回答区段（Answer　Section）：大小可变，含有用来回答查询的一条或多条资源记录。\n- 权威区段（Authority　Section）：大小可变，包含指向权威域名服务器的资源记录，用以继续解析过程。\n- 额外信息区段（Additional　Information　Section）：包含资源记录且大小可变的区段，这些资源记录用来存储完全没有必要回答的查询相关的额外信息。\n\n### 2.常用的DNS资源记录类型\n\n| 值   | 类型  | 描述           |\n| ---- | ----- | -------------- |\n| １   | A     | IPv4主机地址   |\n| 2    | NS    | 权威域名服务器 |\n| 5    | CNAME | 规范别名       |\n| 15   | MX    | 邮件交换       |\n| 16   | TXT   | 文本字符串     |\n| 28   | AAAA  | IPv6主机地址   |\n| 251  | IXFR  | 增量区域传送   |\n| 252  | AXFR  | 完整区域传送   |\n\n- 完整区域传送（AXFR）：这个类型的传送将整个区域在设备间进行传送。\n- 增量区域传送（LXFR）：这个类型的传送仅传送区域信息的一部分。\n\n上面是指DNS主备服务器之间信息同步的不同方案。\n","source":"_posts/16.域名系统DNS.md","raw":"---\ntitle: 域名系统DNS\ntype: tags\ndate: 2023-12-25 14:31:14\ntags:\n- DNS\ncategories:\n- 学习笔记\n---\n\n## 域名系统DNS\n\nDNS服务器存储了一个有着IP地址和DNS名字映射资源记录的数据库，并将其和客户端与其他DNS服务器共享。\n\n### 1.DNS数据包结构\n\n| 偏移位 |      0-15      |                         16-31                          |\n| :----: | :------------: | :----------------------------------------------------: |\n|   0    |    DNS ID号    | QR \\| 操作代码\\| AA \\| TC \\| RD \\| RA \\| Z \\| 响应代码 |\n|   32   |    问题计数    |                        回答区段                        |\n|   64   | 域名服务器计数 |                      额外记录计数                      |\n|   96   |    问题区段    |                        回答区段                        |\n|  128   |    权威区段    |                      额外信息区段                      |\n\n- DNS ID号（DNS　ID　Number）：用来应对DNS查询和DNS响应。\n- 查询／响应（Query／Response）：用来指明这个数据包是DNS查询还是响应。\n- 操作代码（OpCode）：用来定义消息中的请求类型。\n- 权威应答（Authoritative Answer）：如果响应数据包中设定了这个则说明这个响应是由域内权威域名服务器发出的。\n- 截断（Truncation）：用来指明这个响应由于太长，无法装入数据包而被截断。\n- 期望递归（Recursion　Desired）：当请求中设定了这个值，则说明DNS客户端在目标域名服务器不含有所请求信息的情况下，要求进行递归查询。\n- 可用递归（Recursion　Available）：当响应中设定了这个值，说明域名服务器支持递归查询。\n- 响应代码（Response　Code）：在DNS响应中用来指明错误。\n- 问题计数（Question　Count）：在问题区段中的条目数。\n- 回答计数（Answer　Count）：在回答区段中的条目数。\n- 域名服务器计数（Name　Server　Count）：在权威区段的域名资源记录数。\n- 额外记录计数（Additional　Records　Count）：在额外信息区段中其他资源记录数。\n- 问题区段（Question　section）：大小可变，包含有被发送到DNS服务器的一条或多条的信息查询的部分。\n- 回答区段（Answer　Section）：大小可变，含有用来回答查询的一条或多条资源记录。\n- 权威区段（Authority　Section）：大小可变，包含指向权威域名服务器的资源记录，用以继续解析过程。\n- 额外信息区段（Additional　Information　Section）：包含资源记录且大小可变的区段，这些资源记录用来存储完全没有必要回答的查询相关的额外信息。\n\n### 2.常用的DNS资源记录类型\n\n| 值   | 类型  | 描述           |\n| ---- | ----- | -------------- |\n| １   | A     | IPv4主机地址   |\n| 2    | NS    | 权威域名服务器 |\n| 5    | CNAME | 规范别名       |\n| 15   | MX    | 邮件交换       |\n| 16   | TXT   | 文本字符串     |\n| 28   | AAAA  | IPv6主机地址   |\n| 251  | IXFR  | 增量区域传送   |\n| 252  | AXFR  | 完整区域传送   |\n\n- 完整区域传送（AXFR）：这个类型的传送将整个区域在设备间进行传送。\n- 增量区域传送（LXFR）：这个类型的传送仅传送区域信息的一部分。\n\n上面是指DNS主备服务器之间信息同步的不同方案。\n","slug":"16.域名系统DNS","published":1,"updated":"2024-01-06T00:22:49.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1db000i0cfv3xz3caql","content":"<h2 id=\"域名系统DNS\"><a href=\"#域名系统DNS\" class=\"headerlink\" title=\"域名系统DNS\"></a>域名系统DNS</h2><p>DNS服务器存储了一个有着IP地址和DNS名字映射资源记录的数据库，并将其和客户端与其他DNS服务器共享。</p>\n<h3 id=\"1-DNS数据包结构\"><a href=\"#1-DNS数据包结构\" class=\"headerlink\" title=\"1.DNS数据包结构\"></a>1.DNS数据包结构</h3><table>\n<thead>\n<tr>\n<th align=\"center\">偏移位</th>\n<th align=\"center\">0-15</th>\n<th align=\"center\">16-31</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">DNS ID号</td>\n<td align=\"center\">QR | 操作代码| AA | TC | RD | RA | Z | 响应代码</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\">问题计数</td>\n<td align=\"center\">回答区段</td>\n</tr>\n<tr>\n<td align=\"center\">64</td>\n<td align=\"center\">域名服务器计数</td>\n<td align=\"center\">额外记录计数</td>\n</tr>\n<tr>\n<td align=\"center\">96</td>\n<td align=\"center\">问题区段</td>\n<td align=\"center\">回答区段</td>\n</tr>\n<tr>\n<td align=\"center\">128</td>\n<td align=\"center\">权威区段</td>\n<td align=\"center\">额外信息区段</td>\n</tr>\n</tbody></table>\n<ul>\n<li>DNS ID号（DNS　ID　Number）：用来应对DNS查询和DNS响应。</li>\n<li>查询／响应（Query／Response）：用来指明这个数据包是DNS查询还是响应。</li>\n<li>操作代码（OpCode）：用来定义消息中的请求类型。</li>\n<li>权威应答（Authoritative Answer）：如果响应数据包中设定了这个则说明这个响应是由域内权威域名服务器发出的。</li>\n<li>截断（Truncation）：用来指明这个响应由于太长，无法装入数据包而被截断。</li>\n<li>期望递归（Recursion　Desired）：当请求中设定了这个值，则说明DNS客户端在目标域名服务器不含有所请求信息的情况下，要求进行递归查询。</li>\n<li>可用递归（Recursion　Available）：当响应中设定了这个值，说明域名服务器支持递归查询。</li>\n<li>响应代码（Response　Code）：在DNS响应中用来指明错误。</li>\n<li>问题计数（Question　Count）：在问题区段中的条目数。</li>\n<li>回答计数（Answer　Count）：在回答区段中的条目数。</li>\n<li>域名服务器计数（Name　Server　Count）：在权威区段的域名资源记录数。</li>\n<li>额外记录计数（Additional　Records　Count）：在额外信息区段中其他资源记录数。</li>\n<li>问题区段（Question　section）：大小可变，包含有被发送到DNS服务器的一条或多条的信息查询的部分。</li>\n<li>回答区段（Answer　Section）：大小可变，含有用来回答查询的一条或多条资源记录。</li>\n<li>权威区段（Authority　Section）：大小可变，包含指向权威域名服务器的资源记录，用以继续解析过程。</li>\n<li>额外信息区段（Additional　Information　Section）：包含资源记录且大小可变的区段，这些资源记录用来存储完全没有必要回答的查询相关的额外信息。</li>\n</ul>\n<h3 id=\"2-常用的DNS资源记录类型\"><a href=\"#2-常用的DNS资源记录类型\" class=\"headerlink\" title=\"2.常用的DNS资源记录类型\"></a>2.常用的DNS资源记录类型</h3><table>\n<thead>\n<tr>\n<th>值</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>１</td>\n<td>A</td>\n<td>IPv4主机地址</td>\n</tr>\n<tr>\n<td>2</td>\n<td>NS</td>\n<td>权威域名服务器</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CNAME</td>\n<td>规范别名</td>\n</tr>\n<tr>\n<td>15</td>\n<td>MX</td>\n<td>邮件交换</td>\n</tr>\n<tr>\n<td>16</td>\n<td>TXT</td>\n<td>文本字符串</td>\n</tr>\n<tr>\n<td>28</td>\n<td>AAAA</td>\n<td>IPv6主机地址</td>\n</tr>\n<tr>\n<td>251</td>\n<td>IXFR</td>\n<td>增量区域传送</td>\n</tr>\n<tr>\n<td>252</td>\n<td>AXFR</td>\n<td>完整区域传送</td>\n</tr>\n</tbody></table>\n<ul>\n<li>完整区域传送（AXFR）：这个类型的传送将整个区域在设备间进行传送。</li>\n<li>增量区域传送（LXFR）：这个类型的传送仅传送区域信息的一部分。</li>\n</ul>\n<p>上面是指DNS主备服务器之间信息同步的不同方案。</p>\n","site":{"data":{}},"cover":"/img/cover07.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"域名系统DNS\"><a href=\"#域名系统DNS\" class=\"headerlink\" title=\"域名系统DNS\"></a>域名系统DNS</h2><p>DNS服务器存储了一个有着IP地址和DNS名字映射资源记录的数据库，并将其和客户端与其他DNS服务器共享。</p>\n<h3 id=\"1-DNS数据包结构\"><a href=\"#1-DNS数据包结构\" class=\"headerlink\" title=\"1.DNS数据包结构\"></a>1.DNS数据包结构</h3><table>\n<thead>\n<tr>\n<th align=\"center\">偏移位</th>\n<th align=\"center\">0-15</th>\n<th align=\"center\">16-31</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">0</td>\n<td align=\"center\">DNS ID号</td>\n<td align=\"center\">QR | 操作代码| AA | TC | RD | RA | Z | 响应代码</td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\">问题计数</td>\n<td align=\"center\">回答区段</td>\n</tr>\n<tr>\n<td align=\"center\">64</td>\n<td align=\"center\">域名服务器计数</td>\n<td align=\"center\">额外记录计数</td>\n</tr>\n<tr>\n<td align=\"center\">96</td>\n<td align=\"center\">问题区段</td>\n<td align=\"center\">回答区段</td>\n</tr>\n<tr>\n<td align=\"center\">128</td>\n<td align=\"center\">权威区段</td>\n<td align=\"center\">额外信息区段</td>\n</tr>\n</tbody></table>\n<ul>\n<li>DNS ID号（DNS　ID　Number）：用来应对DNS查询和DNS响应。</li>\n<li>查询／响应（Query／Response）：用来指明这个数据包是DNS查询还是响应。</li>\n<li>操作代码（OpCode）：用来定义消息中的请求类型。</li>\n<li>权威应答（Authoritative Answer）：如果响应数据包中设定了这个则说明这个响应是由域内权威域名服务器发出的。</li>\n<li>截断（Truncation）：用来指明这个响应由于太长，无法装入数据包而被截断。</li>\n<li>期望递归（Recursion　Desired）：当请求中设定了这个值，则说明DNS客户端在目标域名服务器不含有所请求信息的情况下，要求进行递归查询。</li>\n<li>可用递归（Recursion　Available）：当响应中设定了这个值，说明域名服务器支持递归查询。</li>\n<li>响应代码（Response　Code）：在DNS响应中用来指明错误。</li>\n<li>问题计数（Question　Count）：在问题区段中的条目数。</li>\n<li>回答计数（Answer　Count）：在回答区段中的条目数。</li>\n<li>域名服务器计数（Name　Server　Count）：在权威区段的域名资源记录数。</li>\n<li>额外记录计数（Additional　Records　Count）：在额外信息区段中其他资源记录数。</li>\n<li>问题区段（Question　section）：大小可变，包含有被发送到DNS服务器的一条或多条的信息查询的部分。</li>\n<li>回答区段（Answer　Section）：大小可变，含有用来回答查询的一条或多条资源记录。</li>\n<li>权威区段（Authority　Section）：大小可变，包含指向权威域名服务器的资源记录，用以继续解析过程。</li>\n<li>额外信息区段（Additional　Information　Section）：包含资源记录且大小可变的区段，这些资源记录用来存储完全没有必要回答的查询相关的额外信息。</li>\n</ul>\n<h3 id=\"2-常用的DNS资源记录类型\"><a href=\"#2-常用的DNS资源记录类型\" class=\"headerlink\" title=\"2.常用的DNS资源记录类型\"></a>2.常用的DNS资源记录类型</h3><table>\n<thead>\n<tr>\n<th>值</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>１</td>\n<td>A</td>\n<td>IPv4主机地址</td>\n</tr>\n<tr>\n<td>2</td>\n<td>NS</td>\n<td>权威域名服务器</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CNAME</td>\n<td>规范别名</td>\n</tr>\n<tr>\n<td>15</td>\n<td>MX</td>\n<td>邮件交换</td>\n</tr>\n<tr>\n<td>16</td>\n<td>TXT</td>\n<td>文本字符串</td>\n</tr>\n<tr>\n<td>28</td>\n<td>AAAA</td>\n<td>IPv6主机地址</td>\n</tr>\n<tr>\n<td>251</td>\n<td>IXFR</td>\n<td>增量区域传送</td>\n</tr>\n<tr>\n<td>252</td>\n<td>AXFR</td>\n<td>完整区域传送</td>\n</tr>\n</tbody></table>\n<ul>\n<li>完整区域传送（AXFR）：这个类型的传送将整个区域在设备间进行传送。</li>\n<li>增量区域传送（LXFR）：这个类型的传送仅传送区域信息的一部分。</li>\n</ul>\n<p>上面是指DNS主备服务器之间信息同步的不同方案。</p>\n"},{"title":"go实现web服务器","type":"tags","date":"2023-12-25T07:13:39.000Z","_content":"\n## Web基础\n\n### 1.统一资源定位符URL（Uniform Resource Location）\n\n```txt\nschema://host[:port]/path/.../[?query-string][#anchor]\n```\n\n- schema：指定使用的协议（如http、https、ftp等）。\n- host：服务器的IP地址或者域名。\n- port：服务的监听端口（http的默认端口是80，https的默认端口是443可以省略）。\n- path：访问资源的路径。\n- query-string：发送给服务器的数据。\n- anchor：锚\n\n### 2.go实现一个简单的web服务器\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n    // 注册路由\n\thttp.HandleFunc(\"/\", helloworld)\n    \n    //启动服务\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc helloworld(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"hello world!\")\n}\n```\n\n","source":"_posts/17.go实现web服务器.md","raw":"---\ntitle: go实现web服务器\ntype: tags\ndate: 2023-12-25 15:13:39\ntags:\n- Web\n- go\ncategories:\n- 学习笔记\n---\n\n## Web基础\n\n### 1.统一资源定位符URL（Uniform Resource Location）\n\n```txt\nschema://host[:port]/path/.../[?query-string][#anchor]\n```\n\n- schema：指定使用的协议（如http、https、ftp等）。\n- host：服务器的IP地址或者域名。\n- port：服务的监听端口（http的默认端口是80，https的默认端口是443可以省略）。\n- path：访问资源的路径。\n- query-string：发送给服务器的数据。\n- anchor：锚\n\n### 2.go实现一个简单的web服务器\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n    // 注册路由\n\thttp.HandleFunc(\"/\", helloworld)\n    \n    //启动服务\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc helloworld(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"hello world!\")\n}\n```\n\n","slug":"17.go实现web服务器","published":1,"updated":"2024-01-06T00:22:54.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dc000j0cfv0o656cph","content":"<h2 id=\"Web基础\"><a href=\"#Web基础\" class=\"headerlink\" title=\"Web基础\"></a>Web基础</h2><h3 id=\"1-统一资源定位符URL（Uniform-Resource-Location）\"><a href=\"#1-统一资源定位符URL（Uniform-Resource-Location）\" class=\"headerlink\" title=\"1.统一资源定位符URL（Uniform Resource Location）\"></a>1.统一资源定位符URL（Uniform Resource Location）</h3><figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema://host[:port]/path/.../[?query-string][#anchor]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>schema：指定使用的协议（如http、https、ftp等）。</li>\n<li>host：服务器的IP地址或者域名。</li>\n<li>port：服务的监听端口（http的默认端口是80，https的默认端口是443可以省略）。</li>\n<li>path：访问资源的路径。</li>\n<li>query-string：发送给服务器的数据。</li>\n<li>anchor：锚</li>\n</ul>\n<h3 id=\"2-go实现一个简单的web服务器\"><a href=\"#2-go实现一个简单的web服务器\" class=\"headerlink\" title=\"2.go实现一个简单的web服务器\"></a>2.go实现一个简单的web服务器</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册路由</span></span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, helloworld)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">helloworld</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Fprintf(w, <span class=\"string\">&quot;hello world!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover05.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"Web基础\"><a href=\"#Web基础\" class=\"headerlink\" title=\"Web基础\"></a>Web基础</h2><h3 id=\"1-统一资源定位符URL（Uniform-Resource-Location）\"><a href=\"#1-统一资源定位符URL（Uniform-Resource-Location）\" class=\"headerlink\" title=\"1.统一资源定位符URL（Uniform Resource Location）\"></a>1.统一资源定位符URL（Uniform Resource Location）</h3><figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema://host[:port]/path/.../[?query-string][#anchor]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>schema：指定使用的协议（如http、https、ftp等）。</li>\n<li>host：服务器的IP地址或者域名。</li>\n<li>port：服务的监听端口（http的默认端口是80，https的默认端口是443可以省略）。</li>\n<li>path：访问资源的路径。</li>\n<li>query-string：发送给服务器的数据。</li>\n<li>anchor：锚</li>\n</ul>\n<h3 id=\"2-go实现一个简单的web服务器\"><a href=\"#2-go实现一个简单的web服务器\" class=\"headerlink\" title=\"2.go实现一个简单的web服务器\"></a>2.go实现一个简单的web服务器</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册路由</span></span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, helloworld)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//启动服务</span></span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">helloworld</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Fprintf(w, <span class=\"string\">&quot;hello world!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go处理表单","type":"tags","date":"2023-12-26T10:10:01.000Z","_content":"\n## go处理表单\n\n### 1.处理表单输入\n\n前端样例：\n\n```html\n<!DOCTYPE html>\n<body>\n    <form action=\"http://127.0.0.1:8080/login\" method=\"post\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"password\">\n        <input type=\"submit\" value=\"login\">\n    </form>\n</body>\n</html>\n```\n\n后端样例：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/login\", login)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc login(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tt, err := template.ParseFiles(\"./login.html\")\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tt.Execute(w, nil)\n\t} else {\n        // 这一步必不可少，否则获取不到表单数据。\n\t\tr.ParseForm()\n\t\tfor k, v := range r.Form {\n\t\t\tfmt.Println(k, \"------\", v)\n\t\t}\n\n\t\tfmt.Fprintf(w, \"get login mesage.\")\n\t}\n}\n```\n\n### 2.处理文件上传\n\n前端样例：\n\n```html\n<!DOCTYPE html>\n<body>\n    <form action=\"http://127.0.0.1:8080/upload\" method=\"post\" enctype=\"multipart/form-data\">\n        选择文件上传：<input type=\"file\" name=\"upload\">\n        <input type=\"hidden\" name=\"token\" value={{.}}>\n        <input type=\"submit\" value=\"upload\">\n    </form>\n</body>\n</html>\n```\n\n后端样例：\n\n```go\npackage main\n\nimport (\n\t\"crypto/md5\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/upload\", upload)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc upload(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tt, err := template.ParseFiles(\"./upload.html\")\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\th := md5.New()\n\t\ttoken := fmt.Sprintf(\"%x\", h.Sum(nil))\n\t\tt.Execute(w, token)\n\t} else {\n        // 读取上传文件的步骤\n\t\tr.ParseMultipartForm(32 << 20)\n\t\tf, fileHeader, err := r.FormFile(\"upload\")\n        \n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer f.Close()\n\n\t\tfmt.Fprintf(w, \"get upload file.\")\n        // 在服务器端创建文件并保存\n\t\tfile, err := os.OpenFile(\"./\"+fileHeader.Filename, os.O_WRONLY|os.O_CREATE, 0666)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer file.Close()\n\n\t\tio.Copy(file, f)\n\t}\n}\n```\n\n","source":"_posts/18.go处理表单.md","raw":"---\ntitle: go处理表单\ntype: tags\ndate: 2023-12-26 18:10:01\ntags:\n- go\n- web\ncategories:\n- 学习笔记\n---\n\n## go处理表单\n\n### 1.处理表单输入\n\n前端样例：\n\n```html\n<!DOCTYPE html>\n<body>\n    <form action=\"http://127.0.0.1:8080/login\" method=\"post\">\n        用户名：<input type=\"text\" name=\"username\">\n        密码：<input type=\"password\" name=\"password\">\n        <input type=\"submit\" value=\"login\">\n    </form>\n</body>\n</html>\n```\n\n后端样例：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/login\", login)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc login(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tt, err := template.ParseFiles(\"./login.html\")\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tt.Execute(w, nil)\n\t} else {\n        // 这一步必不可少，否则获取不到表单数据。\n\t\tr.ParseForm()\n\t\tfor k, v := range r.Form {\n\t\t\tfmt.Println(k, \"------\", v)\n\t\t}\n\n\t\tfmt.Fprintf(w, \"get login mesage.\")\n\t}\n}\n```\n\n### 2.处理文件上传\n\n前端样例：\n\n```html\n<!DOCTYPE html>\n<body>\n    <form action=\"http://127.0.0.1:8080/upload\" method=\"post\" enctype=\"multipart/form-data\">\n        选择文件上传：<input type=\"file\" name=\"upload\">\n        <input type=\"hidden\" name=\"token\" value={{.}}>\n        <input type=\"submit\" value=\"upload\">\n    </form>\n</body>\n</html>\n```\n\n后端样例：\n\n```go\npackage main\n\nimport (\n\t\"crypto/md5\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"text/template\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/upload\", upload)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc upload(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tt, err := template.ParseFiles(\"./upload.html\")\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\th := md5.New()\n\t\ttoken := fmt.Sprintf(\"%x\", h.Sum(nil))\n\t\tt.Execute(w, token)\n\t} else {\n        // 读取上传文件的步骤\n\t\tr.ParseMultipartForm(32 << 20)\n\t\tf, fileHeader, err := r.FormFile(\"upload\")\n        \n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer f.Close()\n\n\t\tfmt.Fprintf(w, \"get upload file.\")\n        // 在服务器端创建文件并保存\n\t\tfile, err := os.OpenFile(\"./\"+fileHeader.Filename, os.O_WRONLY|os.O_CREATE, 0666)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer file.Close()\n\n\t\tio.Copy(file, f)\n\t}\n}\n```\n\n","slug":"18.go处理表单","published":1,"updated":"2024-01-06T00:22:59.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1de000n0cfv6m4q50ib","content":"<h2 id=\"go处理表单\"><a href=\"#go处理表单\" class=\"headerlink\" title=\"go处理表单\"></a>go处理表单</h2><h3 id=\"1-处理表单输入\"><a href=\"#1-处理表单输入\" class=\"headerlink\" title=\"1.处理表单输入\"></a>1.处理表单输入</h3><p>前端样例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://127.0.0.1:8080/login&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>后端样例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;text/template&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/login&quot;</span>, login)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">login</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">&quot;GET&quot;</span> &#123;</span><br><span class=\"line\">\t\tt, err := template.ParseFiles(<span class=\"string\">&quot;./login.html&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt.Execute(w, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这一步必不可少，否则获取不到表单数据。</span></span><br><span class=\"line\">\t\tr.ParseForm()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> r.Form &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(k, <span class=\"string\">&quot;------&quot;</span>, v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;get login mesage.&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-处理文件上传\"><a href=\"#2-处理文件上传\" class=\"headerlink\" title=\"2.处理文件上传\"></a>2.处理文件上传</h3><p>前端样例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://127.0.0.1:8080/upload&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">        选择文件上传：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;upload&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;token&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;.&#125;&#125;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;upload&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>后端样例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;crypto/md5&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;text/template&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/upload&quot;</span>, upload)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">upload</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">&quot;GET&quot;</span> &#123;</span><br><span class=\"line\">\t\tt, err := template.ParseFiles(<span class=\"string\">&quot;./upload.html&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\th := md5.New()</span><br><span class=\"line\">\t\ttoken := fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, h.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">\t\tt.Execute(w, token)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取上传文件的步骤</span></span><br><span class=\"line\">\t\tr.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>)</span><br><span class=\"line\">\t\tf, fileHeader, err := r.FormFile(<span class=\"string\">&quot;upload&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;get upload file.&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 在服务器端创建文件并保存</span></span><br><span class=\"line\">\t\tfile, err := os.OpenFile(<span class=\"string\">&quot;./&quot;</span>+fileHeader.Filename, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tio.Copy(file, f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover10.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go处理表单\"><a href=\"#go处理表单\" class=\"headerlink\" title=\"go处理表单\"></a>go处理表单</h2><h3 id=\"1-处理表单输入\"><a href=\"#1-处理表单输入\" class=\"headerlink\" title=\"1.处理表单输入\"></a>1.处理表单输入</h3><p>前端样例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://127.0.0.1:8080/login&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>后端样例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;text/template&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/login&quot;</span>, login)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">login</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">&quot;GET&quot;</span> &#123;</span><br><span class=\"line\">\t\tt, err := template.ParseFiles(<span class=\"string\">&quot;./login.html&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt.Execute(w, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这一步必不可少，否则获取不到表单数据。</span></span><br><span class=\"line\">\t\tr.ParseForm()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> r.Form &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(k, <span class=\"string\">&quot;------&quot;</span>, v)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;get login mesage.&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-处理文件上传\"><a href=\"#2-处理文件上传\" class=\"headerlink\" title=\"2.处理文件上传\"></a>2.处理文件上传</h3><p>前端样例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://127.0.0.1:8080/upload&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">        选择文件上传：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;upload&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;token&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;.&#125;&#125;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;upload&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>后端样例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;crypto/md5&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;text/template&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/upload&quot;</span>, upload)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">upload</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r.Method == <span class=\"string\">&quot;GET&quot;</span> &#123;</span><br><span class=\"line\">\t\tt, err := template.ParseFiles(<span class=\"string\">&quot;./upload.html&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\th := md5.New()</span><br><span class=\"line\">\t\ttoken := fmt.Sprintf(<span class=\"string\">&quot;%x&quot;</span>, h.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">\t\tt.Execute(w, token)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取上传文件的步骤</span></span><br><span class=\"line\">\t\tr.ParseMultipartForm(<span class=\"number\">32</span> &lt;&lt; <span class=\"number\">20</span>)</span><br><span class=\"line\">\t\tf, fileHeader, err := r.FormFile(<span class=\"string\">&quot;upload&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;get upload file.&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 在服务器端创建文件并保存</span></span><br><span class=\"line\">\t\tfile, err := os.OpenFile(<span class=\"string\">&quot;./&quot;</span>+fileHeader.Filename, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tio.Copy(file, f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go访问数据库","type":"tags","date":"2023-12-27T07:04:26.000Z","_content":"\n## go访问数据库\n\n提前准备的数据表结构：\n\n```sql\nCREATE TABLE `userinfo` (\n\t`uid` INT(10) NOT NULL AUTO_INCREMENT,\n\t`username` VARCHAR ( 64 ) NULL DEFAULT NULL,\n\t`departname` VARCHAR ( 64 ) NULL DEFAULT NULL,\n\t`created` DATE NULL DEFAULT NULL,\nPRIMARY KEY ( `uid` ) \n)\n\n\nCREATE TABLE `userdetail` (\n\t`uid` INT ( 10 ) NOT NULL DEFAULT 0,\n\t`intro` TEXT NULL,\n\t`profile` TEXT NULL,\nPRIMARY KEY ( `uid` ) \n)\n```\n\n### 1.go操作MySQL数据库\n\n案例使用的是github.com/go-sql-driver/mysql的MySQL驱动，该驱动完全支持database/sql接口，支持keepalive。\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t// 注册driver\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库\n\tdb, _ := sql.Open(\"mysql\", \"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8\")\n\n\t// 增\n\tstmt, _ := db.Prepare(\"INSERT userinfo SET username=?,departname=?,created=?\")\n\tres, _ := stmt.Exec(\"mebaron\", \"研发部门\", time.Now())\n\n\tid, _ := res.LastInsertId()\n\tfmt.Printf(\"id: %v\\n\", id)\n\n\t// 删\n\tstmt, _ = db.Prepare(\"delete from userinfo where uid=?\")\n\tres, _ = stmt.Exec(id - 3)\n\teffect, _ := res.RowsAffected()\n\tfmt.Printf(\"delete effect: %v\\n\", effect)\n\n\t// 改\n\tstmt, _ = db.Prepare(\"update userinfo set username=? where uid=?\")\n\tres, _ = stmt.Exec(\"baron\", id)\n\n\teffect, _ = res.RowsAffected()\n\tfmt.Printf(\"update effect: %v\\n\", effect)\n\n\t// 查\n\trows, _ := db.Query(\"select * from userinfo\")\n\n\tfor rows.Next() {\n\t\tvar (\n\t\t\tuid        int\n\t\t\tusername   string\n\t\t\tdepartname string\n\t\t\tcreated    string\n\t\t)\n\t\trows.Scan(&uid, &username, &departname, &created)\n\t\tfmt.Println(uid, username, departname, created)\n\t}\n\n\t// 事务\n\ttx, _ := db.Begin()\n\tstmt, _ = tx.Prepare(\"INSERT userinfo SET username=?,departname=?,created=?\")\n\tres, _ = stmt.Exec(\"tx\", \"测试部门\", time.Now())\n\tid, _ = res.LastInsertId()\n\tfmt.Printf(\"id: %v\\n\", id)\n\tres, _ = tx.Stmt(stmt).Exec(\"tx-baron\", \"测试1部门\", time.Now())\n\tid, _ = res.LastInsertId()\n\tfmt.Printf(\"id: %v\\n\", id)\n\n\tstmt, _ = tx.Prepare(\"INSERT userdetail SET uid=?,intro=?,profile=?\")\n\tstmt.Exec(id, \"intro text\", \"profile text\")\n\n    // 事务必须以对Commit或Rollback的调用结束。调用Commit或Rollback后，一旦出现某部分失败，所有对事务的操作都会失败并返回错误值ErrTxDone\n\ttx.Commit()\n\t// tx.Rollback()\n}\n```\n\n","source":"_posts/19.go访问数据库.md","raw":"---\ntitle: go访问数据库\ntype: tags\ndate: 2023-12-27 15:04:26\ntags:\n- go\n- mysql\ncategories:\n- 学习笔记\n---\n\n## go访问数据库\n\n提前准备的数据表结构：\n\n```sql\nCREATE TABLE `userinfo` (\n\t`uid` INT(10) NOT NULL AUTO_INCREMENT,\n\t`username` VARCHAR ( 64 ) NULL DEFAULT NULL,\n\t`departname` VARCHAR ( 64 ) NULL DEFAULT NULL,\n\t`created` DATE NULL DEFAULT NULL,\nPRIMARY KEY ( `uid` ) \n)\n\n\nCREATE TABLE `userdetail` (\n\t`uid` INT ( 10 ) NOT NULL DEFAULT 0,\n\t`intro` TEXT NULL,\n\t`profile` TEXT NULL,\nPRIMARY KEY ( `uid` ) \n)\n```\n\n### 1.go操作MySQL数据库\n\n案例使用的是github.com/go-sql-driver/mysql的MySQL驱动，该驱动完全支持database/sql接口，支持keepalive。\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t// 注册driver\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\t// 连接数据库\n\tdb, _ := sql.Open(\"mysql\", \"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8\")\n\n\t// 增\n\tstmt, _ := db.Prepare(\"INSERT userinfo SET username=?,departname=?,created=?\")\n\tres, _ := stmt.Exec(\"mebaron\", \"研发部门\", time.Now())\n\n\tid, _ := res.LastInsertId()\n\tfmt.Printf(\"id: %v\\n\", id)\n\n\t// 删\n\tstmt, _ = db.Prepare(\"delete from userinfo where uid=?\")\n\tres, _ = stmt.Exec(id - 3)\n\teffect, _ := res.RowsAffected()\n\tfmt.Printf(\"delete effect: %v\\n\", effect)\n\n\t// 改\n\tstmt, _ = db.Prepare(\"update userinfo set username=? where uid=?\")\n\tres, _ = stmt.Exec(\"baron\", id)\n\n\teffect, _ = res.RowsAffected()\n\tfmt.Printf(\"update effect: %v\\n\", effect)\n\n\t// 查\n\trows, _ := db.Query(\"select * from userinfo\")\n\n\tfor rows.Next() {\n\t\tvar (\n\t\t\tuid        int\n\t\t\tusername   string\n\t\t\tdepartname string\n\t\t\tcreated    string\n\t\t)\n\t\trows.Scan(&uid, &username, &departname, &created)\n\t\tfmt.Println(uid, username, departname, created)\n\t}\n\n\t// 事务\n\ttx, _ := db.Begin()\n\tstmt, _ = tx.Prepare(\"INSERT userinfo SET username=?,departname=?,created=?\")\n\tres, _ = stmt.Exec(\"tx\", \"测试部门\", time.Now())\n\tid, _ = res.LastInsertId()\n\tfmt.Printf(\"id: %v\\n\", id)\n\tres, _ = tx.Stmt(stmt).Exec(\"tx-baron\", \"测试1部门\", time.Now())\n\tid, _ = res.LastInsertId()\n\tfmt.Printf(\"id: %v\\n\", id)\n\n\tstmt, _ = tx.Prepare(\"INSERT userdetail SET uid=?,intro=?,profile=?\")\n\tstmt.Exec(id, \"intro text\", \"profile text\")\n\n    // 事务必须以对Commit或Rollback的调用结束。调用Commit或Rollback后，一旦出现某部分失败，所有对事务的操作都会失败并返回错误值ErrTxDone\n\ttx.Commit()\n\t// tx.Rollback()\n}\n```\n\n","slug":"19.go访问数据库","published":1,"updated":"2024-01-06T00:23:05.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dg000q0cfv868l50hc","content":"<h2 id=\"go访问数据库\"><a href=\"#go访问数据库\" class=\"headerlink\" title=\"go访问数据库\"></a>go访问数据库</h2><p>提前准备的数据表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `userinfo` (</span><br><span class=\"line\">\t`uid` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">\t`username` <span class=\"type\">VARCHAR</span> ( <span class=\"number\">64</span> ) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`departname` <span class=\"type\">VARCHAR</span> ( <span class=\"number\">64</span> ) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`created` <span class=\"type\">DATE</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY ( `uid` ) </span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `userdetail` (</span><br><span class=\"line\">\t`uid` <span class=\"type\">INT</span> ( <span class=\"number\">10</span> ) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">\t`intro` TEXT <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`profile` TEXT <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY ( `uid` ) </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-go操作MySQL数据库\"><a href=\"#1-go操作MySQL数据库\" class=\"headerlink\" title=\"1.go操作MySQL数据库\"></a>1.go操作MySQL数据库</h3><p>案例使用的是github.com/go-sql-driver/mysql的MySQL驱动，该驱动完全支持database/sql接口，支持keepalive。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 注册driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\">\tdb, _ := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/test?charset=utf8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 增</span></span><br><span class=\"line\">\tstmt, _ := db.Prepare(<span class=\"string\">&quot;INSERT userinfo SET username=?,departname=?,created=?&quot;</span>)</span><br><span class=\"line\">\tres, _ := stmt.Exec(<span class=\"string\">&quot;mebaron&quot;</span>, <span class=\"string\">&quot;研发部门&quot;</span>, time.Now())</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, _ := res.LastInsertId()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;id: %v\\n&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删</span></span><br><span class=\"line\">\tstmt, _ = db.Prepare(<span class=\"string\">&quot;delete from userinfo where uid=?&quot;</span>)</span><br><span class=\"line\">\tres, _ = stmt.Exec(id - <span class=\"number\">3</span>)</span><br><span class=\"line\">\teffect, _ := res.RowsAffected()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;delete effect: %v\\n&quot;</span>, effect)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 改</span></span><br><span class=\"line\">\tstmt, _ = db.Prepare(<span class=\"string\">&quot;update userinfo set username=? where uid=?&quot;</span>)</span><br><span class=\"line\">\tres, _ = stmt.Exec(<span class=\"string\">&quot;baron&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">\teffect, _ = res.RowsAffected()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;update effect: %v\\n&quot;</span>, effect)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查</span></span><br><span class=\"line\">\trows, _ := db.Query(<span class=\"string\">&quot;select * from userinfo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\t\tuid        <span class=\"type\">int</span></span><br><span class=\"line\">\t\t\tusername   <span class=\"type\">string</span></span><br><span class=\"line\">\t\t\tdepartname <span class=\"type\">string</span></span><br><span class=\"line\">\t\t\tcreated    <span class=\"type\">string</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\trows.Scan(&amp;uid, &amp;username, &amp;departname, &amp;created)</span><br><span class=\"line\">\t\tfmt.Println(uid, username, departname, created)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事务</span></span><br><span class=\"line\">\ttx, _ := db.Begin()</span><br><span class=\"line\">\tstmt, _ = tx.Prepare(<span class=\"string\">&quot;INSERT userinfo SET username=?,departname=?,created=?&quot;</span>)</span><br><span class=\"line\">\tres, _ = stmt.Exec(<span class=\"string\">&quot;tx&quot;</span>, <span class=\"string\">&quot;测试部门&quot;</span>, time.Now())</span><br><span class=\"line\">\tid, _ = res.LastInsertId()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;id: %v\\n&quot;</span>, id)</span><br><span class=\"line\">\tres, _ = tx.Stmt(stmt).Exec(<span class=\"string\">&quot;tx-baron&quot;</span>, <span class=\"string\">&quot;测试1部门&quot;</span>, time.Now())</span><br><span class=\"line\">\tid, _ = res.LastInsertId()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;id: %v\\n&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">\tstmt, _ = tx.Prepare(<span class=\"string\">&quot;INSERT userdetail SET uid=?,intro=?,profile=?&quot;</span>)</span><br><span class=\"line\">\tstmt.Exec(id, <span class=\"string\">&quot;intro text&quot;</span>, <span class=\"string\">&quot;profile text&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 事务必须以对Commit或Rollback的调用结束。调用Commit或Rollback后，一旦出现某部分失败，所有对事务的操作都会失败并返回错误值ErrTxDone</span></span><br><span class=\"line\">\ttx.Commit()</span><br><span class=\"line\">\t<span class=\"comment\">// tx.Rollback()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover04.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go访问数据库\"><a href=\"#go访问数据库\" class=\"headerlink\" title=\"go访问数据库\"></a>go访问数据库</h2><p>提前准备的数据表结构：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `userinfo` (</span><br><span class=\"line\">\t`uid` <span class=\"type\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">\t`username` <span class=\"type\">VARCHAR</span> ( <span class=\"number\">64</span> ) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`departname` <span class=\"type\">VARCHAR</span> ( <span class=\"number\">64</span> ) <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`created` <span class=\"type\">DATE</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY ( `uid` ) </span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `userdetail` (</span><br><span class=\"line\">\t`uid` <span class=\"type\">INT</span> ( <span class=\"number\">10</span> ) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>,</span><br><span class=\"line\">\t`intro` TEXT <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">\t`profile` TEXT <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\"><span class=\"keyword\">PRIMARY</span> KEY ( `uid` ) </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-go操作MySQL数据库\"><a href=\"#1-go操作MySQL数据库\" class=\"headerlink\" title=\"1.go操作MySQL数据库\"></a>1.go操作MySQL数据库</h3><p>案例使用的是github.com/go-sql-driver/mysql的MySQL驱动，该驱动完全支持database/sql接口，支持keepalive。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 注册driver</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接数据库</span></span><br><span class=\"line\">\tdb, _ := sql.Open(<span class=\"string\">&quot;mysql&quot;</span>, <span class=\"string\">&quot;root:123456@tcp(127.0.0.1:3306)/test?charset=utf8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 增</span></span><br><span class=\"line\">\tstmt, _ := db.Prepare(<span class=\"string\">&quot;INSERT userinfo SET username=?,departname=?,created=?&quot;</span>)</span><br><span class=\"line\">\tres, _ := stmt.Exec(<span class=\"string\">&quot;mebaron&quot;</span>, <span class=\"string\">&quot;研发部门&quot;</span>, time.Now())</span><br><span class=\"line\"></span><br><span class=\"line\">\tid, _ := res.LastInsertId()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;id: %v\\n&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删</span></span><br><span class=\"line\">\tstmt, _ = db.Prepare(<span class=\"string\">&quot;delete from userinfo where uid=?&quot;</span>)</span><br><span class=\"line\">\tres, _ = stmt.Exec(id - <span class=\"number\">3</span>)</span><br><span class=\"line\">\teffect, _ := res.RowsAffected()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;delete effect: %v\\n&quot;</span>, effect)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 改</span></span><br><span class=\"line\">\tstmt, _ = db.Prepare(<span class=\"string\">&quot;update userinfo set username=? where uid=?&quot;</span>)</span><br><span class=\"line\">\tres, _ = stmt.Exec(<span class=\"string\">&quot;baron&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">\teffect, _ = res.RowsAffected()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;update effect: %v\\n&quot;</span>, effect)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查</span></span><br><span class=\"line\">\trows, _ := db.Query(<span class=\"string\">&quot;select * from userinfo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\t\tuid        <span class=\"type\">int</span></span><br><span class=\"line\">\t\t\tusername   <span class=\"type\">string</span></span><br><span class=\"line\">\t\t\tdepartname <span class=\"type\">string</span></span><br><span class=\"line\">\t\t\tcreated    <span class=\"type\">string</span></span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\trows.Scan(&amp;uid, &amp;username, &amp;departname, &amp;created)</span><br><span class=\"line\">\t\tfmt.Println(uid, username, departname, created)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 事务</span></span><br><span class=\"line\">\ttx, _ := db.Begin()</span><br><span class=\"line\">\tstmt, _ = tx.Prepare(<span class=\"string\">&quot;INSERT userinfo SET username=?,departname=?,created=?&quot;</span>)</span><br><span class=\"line\">\tres, _ = stmt.Exec(<span class=\"string\">&quot;tx&quot;</span>, <span class=\"string\">&quot;测试部门&quot;</span>, time.Now())</span><br><span class=\"line\">\tid, _ = res.LastInsertId()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;id: %v\\n&quot;</span>, id)</span><br><span class=\"line\">\tres, _ = tx.Stmt(stmt).Exec(<span class=\"string\">&quot;tx-baron&quot;</span>, <span class=\"string\">&quot;测试1部门&quot;</span>, time.Now())</span><br><span class=\"line\">\tid, _ = res.LastInsertId()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;id: %v\\n&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">\tstmt, _ = tx.Prepare(<span class=\"string\">&quot;INSERT userdetail SET uid=?,intro=?,profile=?&quot;</span>)</span><br><span class=\"line\">\tstmt.Exec(id, <span class=\"string\">&quot;intro text&quot;</span>, <span class=\"string\">&quot;profile text&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 事务必须以对Commit或Rollback的调用结束。调用Commit或Rollback后，一旦出现某部分失败，所有对事务的操作都会失败并返回错误值ErrTxDone</span></span><br><span class=\"line\">\ttx.Commit()</span><br><span class=\"line\">\t<span class=\"comment\">// tx.Rollback()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用hexo搭建个人博客","date":"2021-12-11T08:17:26.000Z","type":"tags","_content":"\n# 使用hexo搭建个人博客\n\n### 前言\n\n 目前使用hexo配合github来搭建个人博客十分常见，最近摸索了下相关技术，使用hexo➕GitHub搭建了个人博客，并且使用到了next主题，在此做个总结。\n\n### 环境准备\n\n1、安装Node.js环境。（Hexo基于Node.js，因此搭建过程需要使用到相关环境）\n\n2、安装Git。（用于与GitHub链接及日常推送）\n\n3、将本地环境的ssh公钥配置到GitHub。\n\n4、初始化本地git配置。\n\n```\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n5、创建GitHub的仓库。（仓库名使用：用户名.github.io）\n\n### 安装本地Hexo\n\n1、npm一键安装hexo.\n\n```\n# Mac环境。\nsudo npm install -g hexo-cli\n```\n\n2、hexo初始化\n\n```\n# cd到准备的博客目录（如blog）\ncd /blog\n\n# 初始化\nhexo init\n\n# 安装组件\nnpm install\n```\n\n3、测试安装结果。\n\n```\n# 生成页面\nhexo g\n\n# 启动预览\nhexo s\n```\n\n此时若在浏览器访问`http://localhost:4000`，如果出现 Hexo 默认页面，则本地博客安装成功。\n\n### 将Hexo推送到GitHub\n\n1、安装推送插件。\n\n```\n# workdir 博客目录（/blog下）\nnpm install hexo-deployer-git --save\n```\n\n2、修改工作目录下的`_config.yml` 文件的deploy部分，修改成如下\n\n```\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: main\n```\n\n3、将Hexo推送到GitHub。\n\n```\nhexo d\n```\n\n4、访问`https://用户名.github.io` 来确认下推送结果。\n\n### 使用next主题\n\n1、到博客目录下载next主题资源。\n\n```\n# cd到博客目录\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n\n2、修改Hexo的 `_config.yml` 中的theme为新主题名称 next，如下\n\n```\ntheme: next\n```\n\n3、推送到GitHub。\n\n```\nhexo d\n```\n\n4、访问`https://用户名.github.io` 来确认下推送结果。\n\n### 结语\n\n 到此，一个简单的个人博客雏形就搭建完毕了。Next主体有许多美化配置，可以让我们的博客更好看。接下来就让我们来看看next的个性化配置。\n","source":"_posts/2.使用hexo搭建个人博客.md","raw":"---\ntitle: 使用hexo搭建个人博客\ndate: 2021-12-11 16:17:26\ntags:\n- hexo\n- next\n- 博客\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n# 使用hexo搭建个人博客\n\n### 前言\n\n 目前使用hexo配合github来搭建个人博客十分常见，最近摸索了下相关技术，使用hexo➕GitHub搭建了个人博客，并且使用到了next主题，在此做个总结。\n\n### 环境准备\n\n1、安装Node.js环境。（Hexo基于Node.js，因此搭建过程需要使用到相关环境）\n\n2、安装Git。（用于与GitHub链接及日常推送）\n\n3、将本地环境的ssh公钥配置到GitHub。\n\n4、初始化本地git配置。\n\n```\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n5、创建GitHub的仓库。（仓库名使用：用户名.github.io）\n\n### 安装本地Hexo\n\n1、npm一键安装hexo.\n\n```\n# Mac环境。\nsudo npm install -g hexo-cli\n```\n\n2、hexo初始化\n\n```\n# cd到准备的博客目录（如blog）\ncd /blog\n\n# 初始化\nhexo init\n\n# 安装组件\nnpm install\n```\n\n3、测试安装结果。\n\n```\n# 生成页面\nhexo g\n\n# 启动预览\nhexo s\n```\n\n此时若在浏览器访问`http://localhost:4000`，如果出现 Hexo 默认页面，则本地博客安装成功。\n\n### 将Hexo推送到GitHub\n\n1、安装推送插件。\n\n```\n# workdir 博客目录（/blog下）\nnpm install hexo-deployer-git --save\n```\n\n2、修改工作目录下的`_config.yml` 文件的deploy部分，修改成如下\n\n```\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: main\n```\n\n3、将Hexo推送到GitHub。\n\n```\nhexo d\n```\n\n4、访问`https://用户名.github.io` 来确认下推送结果。\n\n### 使用next主题\n\n1、到博客目录下载next主题资源。\n\n```\n# cd到博客目录\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n\n2、修改Hexo的 `_config.yml` 中的theme为新主题名称 next，如下\n\n```\ntheme: next\n```\n\n3、推送到GitHub。\n\n```\nhexo d\n```\n\n4、访问`https://用户名.github.io` 来确认下推送结果。\n\n### 结语\n\n 到此，一个简单的个人博客雏形就搭建完毕了。Next主体有许多美化配置，可以让我们的博客更好看。接下来就让我们来看看next的个性化配置。\n","slug":"2.使用hexo搭建个人博客","published":1,"updated":"2024-01-06T00:20:54.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dh000v0cfv10ssg7s4","content":"<h1 id=\"使用hexo搭建个人博客\"><a href=\"#使用hexo搭建个人博客\" class=\"headerlink\" title=\"使用hexo搭建个人博客\"></a>使用hexo搭建个人博客</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> 目前使用hexo配合github来搭建个人博客十分常见，最近摸索了下相关技术，使用hexo➕GitHub搭建了个人博客，并且使用到了next主题，在此做个总结。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>1、安装Node.js环境。（Hexo基于Node.js，因此搭建过程需要使用到相关环境）</p>\n<p>2、安装Git。（用于与GitHub链接及日常推送）</p>\n<p>3、将本地环境的ssh公钥配置到GitHub。</p>\n<p>4、初始化本地git配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5、创建GitHub的仓库。（仓库名使用：用户名.github.io）</p>\n<h3 id=\"安装本地Hexo\"><a href=\"#安装本地Hexo\" class=\"headerlink\" title=\"安装本地Hexo\"></a>安装本地Hexo</h3><p>1、npm一键安装hexo.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Mac环境。</span><br><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>2、hexo初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd到准备的博客目录（如blog）</span><br><span class=\"line\">cd /blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化</span><br><span class=\"line\">hexo init</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装组件</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>3、测试安装结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成页面</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动预览</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>此时若在浏览器访问<code>http://localhost:4000</code>，如果出现 Hexo 默认页面，则本地博客安装成功。</p>\n<h3 id=\"将Hexo推送到GitHub\"><a href=\"#将Hexo推送到GitHub\" class=\"headerlink\" title=\"将Hexo推送到GitHub\"></a>将Hexo推送到GitHub</h3><p>1、安装推送插件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># workdir 博客目录（/blog下）</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>2、修改工作目录下的<code>_config.yml</code> 文件的deploy部分，修改成如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>3、将Hexo推送到GitHub。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>4、访问<code>https://用户名.github.io</code> 来确认下推送结果。</p>\n<h3 id=\"使用next主题\"><a href=\"#使用next主题\" class=\"headerlink\" title=\"使用next主题\"></a>使用next主题</h3><p>1、到博客目录下载next主题资源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd到博客目录</span><br><span class=\"line\">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>2、修改Hexo的 <code>_config.yml</code> 中的theme为新主题名称 next，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>3、推送到GitHub。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>4、访问<code>https://用户名.github.io</code> 来确认下推送结果。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p> 到此，一个简单的个人博客雏形就搭建完毕了。Next主体有许多美化配置，可以让我们的博客更好看。接下来就让我们来看看next的个性化配置。</p>\n","site":{"data":{}},"cover":"/img/cover10.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"使用hexo搭建个人博客\"><a href=\"#使用hexo搭建个人博客\" class=\"headerlink\" title=\"使用hexo搭建个人博客\"></a>使用hexo搭建个人博客</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> 目前使用hexo配合github来搭建个人博客十分常见，最近摸索了下相关技术，使用hexo➕GitHub搭建了个人博客，并且使用到了next主题，在此做个总结。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>1、安装Node.js环境。（Hexo基于Node.js，因此搭建过程需要使用到相关环境）</p>\n<p>2、安装Git。（用于与GitHub链接及日常推送）</p>\n<p>3、将本地环境的ssh公钥配置到GitHub。</p>\n<p>4、初始化本地git配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5、创建GitHub的仓库。（仓库名使用：用户名.github.io）</p>\n<h3 id=\"安装本地Hexo\"><a href=\"#安装本地Hexo\" class=\"headerlink\" title=\"安装本地Hexo\"></a>安装本地Hexo</h3><p>1、npm一键安装hexo.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Mac环境。</span><br><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>2、hexo初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd到准备的博客目录（如blog）</span><br><span class=\"line\">cd /blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化</span><br><span class=\"line\">hexo init</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装组件</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>3、测试安装结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成页面</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动预览</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>此时若在浏览器访问<code>http://localhost:4000</code>，如果出现 Hexo 默认页面，则本地博客安装成功。</p>\n<h3 id=\"将Hexo推送到GitHub\"><a href=\"#将Hexo推送到GitHub\" class=\"headerlink\" title=\"将Hexo推送到GitHub\"></a>将Hexo推送到GitHub</h3><p>1、安装推送插件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># workdir 博客目录（/blog下）</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>2、修改工作目录下的<code>_config.yml</code> 文件的deploy部分，修改成如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: main</span><br></pre></td></tr></table></figure>\n\n<p>3、将Hexo推送到GitHub。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>4、访问<code>https://用户名.github.io</code> 来确认下推送结果。</p>\n<h3 id=\"使用next主题\"><a href=\"#使用next主题\" class=\"headerlink\" title=\"使用next主题\"></a>使用next主题</h3><p>1、到博客目录下载next主题资源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd到博客目录</span><br><span class=\"line\">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>2、修改Hexo的 <code>_config.yml</code> 中的theme为新主题名称 next，如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>3、推送到GitHub。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>4、访问<code>https://用户名.github.io</code> 来确认下推送结果。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p> 到此，一个简单的个人博客雏形就搭建完毕了。Next主体有许多美化配置，可以让我们的博客更好看。接下来就让我们来看看next的个性化配置。</p>\n"},{"title":"go操作cookie和session","type":"tags","date":"2023-12-27T12:15:37.000Z","_content":"\n## go操作cookie和session\n\n### 1.cookie\n\ncookie是由浏览器维持的，存储在客户端的一小段文本信息，伴随着用户请求和页面在web服务器和浏览器之间传递。\n\ncookie是有时间限制的，根据生命周期的不同分成两种：会话cookie和持久cookie；如果不设置过期时间，则表示这个cookie生命周期为从创建到浏览器关闭为止，只有关闭浏览器窗口，cookie就消失了，这种生命周期为浏览会话期的cookie称为会话cookie；如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间，这类cookie被称为持久cookie。\n\n#### 1.1.go操作cookie\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handleCookie)\n    fmt.Println(\"server start!\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleCookie(w http.ResponseWriter, r *http.Request) {\n\n    // 读取cookies\n\tcks := r.Cookies()\n\tif len(cks) > 0 {\n\t\tfor _, v := range cks {\n\t\t\tfmt.Println(v.Name, v.Value)\n\t\t}\n\t\tfmt.Fprintf(w, \"already has cookie.\")\n\t} else {\n        // 设置cookies\n\t\tcookie := http.Cookie{\n\t\t\tName:    \"mebaron\",\n\t\t\tValue:   \"cookie\",\n\t\t\tExpires: time.Now().Add(time.Hour),\n\t\t}\n\t\thttp.SetCookie(w, &cookie)\n\t\tfmt.Fprintf(w, \"do not has cookie, set new cookie.\")\n\t}\n}\n\n```\n\n### 2.session\n\nsession在web开发环境下指一类用在客户端与服务端之间保持状态的解决方案。session机制是一种服务端的机制，服务器使用一种类似于散列表的结构来保存信息。\n\n#### 2.1.go操作session\n\n```go\n// go语言暂无操作session的库\n// TODO: 实现go操作session的代码\n```\n\n","source":"_posts/20.go操作cookie和session.md","raw":"---\ntitle: go操作cookie和session\ntype: tags\ndate: 2023-12-27 20:15:37\ntags:\n- go\n- web\ncategories:\n- 学习笔记\n---\n\n## go操作cookie和session\n\n### 1.cookie\n\ncookie是由浏览器维持的，存储在客户端的一小段文本信息，伴随着用户请求和页面在web服务器和浏览器之间传递。\n\ncookie是有时间限制的，根据生命周期的不同分成两种：会话cookie和持久cookie；如果不设置过期时间，则表示这个cookie生命周期为从创建到浏览器关闭为止，只有关闭浏览器窗口，cookie就消失了，这种生命周期为浏览会话期的cookie称为会话cookie；如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间，这类cookie被称为持久cookie。\n\n#### 1.1.go操作cookie\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handleCookie)\n    fmt.Println(\"server start!\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc handleCookie(w http.ResponseWriter, r *http.Request) {\n\n    // 读取cookies\n\tcks := r.Cookies()\n\tif len(cks) > 0 {\n\t\tfor _, v := range cks {\n\t\t\tfmt.Println(v.Name, v.Value)\n\t\t}\n\t\tfmt.Fprintf(w, \"already has cookie.\")\n\t} else {\n        // 设置cookies\n\t\tcookie := http.Cookie{\n\t\t\tName:    \"mebaron\",\n\t\t\tValue:   \"cookie\",\n\t\t\tExpires: time.Now().Add(time.Hour),\n\t\t}\n\t\thttp.SetCookie(w, &cookie)\n\t\tfmt.Fprintf(w, \"do not has cookie, set new cookie.\")\n\t}\n}\n\n```\n\n### 2.session\n\nsession在web开发环境下指一类用在客户端与服务端之间保持状态的解决方案。session机制是一种服务端的机制，服务器使用一种类似于散列表的结构来保存信息。\n\n#### 2.1.go操作session\n\n```go\n// go语言暂无操作session的库\n// TODO: 实现go操作session的代码\n```\n\n","slug":"20.go操作cookie和session","published":1,"updated":"2024-01-06T00:23:10.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1di000x0cfvh02gff3q","content":"<h2 id=\"go操作cookie和session\"><a href=\"#go操作cookie和session\" class=\"headerlink\" title=\"go操作cookie和session\"></a>go操作cookie和session</h2><h3 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1.cookie\"></a>1.cookie</h3><p>cookie是由浏览器维持的，存储在客户端的一小段文本信息，伴随着用户请求和页面在web服务器和浏览器之间传递。</p>\n<p>cookie是有时间限制的，根据生命周期的不同分成两种：会话cookie和持久cookie；如果不设置过期时间，则表示这个cookie生命周期为从创建到浏览器关闭为止，只有关闭浏览器窗口，cookie就消失了，这种生命周期为浏览会话期的cookie称为会话cookie；如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间，这类cookie被称为持久cookie。</p>\n<h4 id=\"1-1-go操作cookie\"><a href=\"#1-1-go操作cookie\" class=\"headerlink\" title=\"1.1.go操作cookie\"></a>1.1.go操作cookie</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, handleCookie)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;server start!&quot;</span>)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleCookie</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取cookies</span></span><br><span class=\"line\">\tcks := r.Cookies()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(cks) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> cks &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v.Name, v.Value)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;already has cookie.&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置cookies</span></span><br><span class=\"line\">\t\tcookie := http.Cookie&#123;</span><br><span class=\"line\">\t\t\tName:    <span class=\"string\">&quot;mebaron&quot;</span>,</span><br><span class=\"line\">\t\t\tValue:   <span class=\"string\">&quot;cookie&quot;</span>,</span><br><span class=\"line\">\t\t\tExpires: time.Now().Add(time.Hour),</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\thttp.SetCookie(w, &amp;cookie)</span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;do not has cookie, set new cookie.&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-session\"><a href=\"#2-session\" class=\"headerlink\" title=\"2.session\"></a>2.session</h3><p>session在web开发环境下指一类用在客户端与服务端之间保持状态的解决方案。session机制是一种服务端的机制，服务器使用一种类似于散列表的结构来保存信息。</p>\n<h4 id=\"2-1-go操作session\"><a href=\"#2-1-go操作session\" class=\"headerlink\" title=\"2.1.go操作session\"></a>2.1.go操作session</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go语言暂无操作session的库</span></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> 实现go操作session的代码</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover10.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go操作cookie和session\"><a href=\"#go操作cookie和session\" class=\"headerlink\" title=\"go操作cookie和session\"></a>go操作cookie和session</h2><h3 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1.cookie\"></a>1.cookie</h3><p>cookie是由浏览器维持的，存储在客户端的一小段文本信息，伴随着用户请求和页面在web服务器和浏览器之间传递。</p>\n<p>cookie是有时间限制的，根据生命周期的不同分成两种：会话cookie和持久cookie；如果不设置过期时间，则表示这个cookie生命周期为从创建到浏览器关闭为止，只有关闭浏览器窗口，cookie就消失了，这种生命周期为浏览会话期的cookie称为会话cookie；如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间，这类cookie被称为持久cookie。</p>\n<h4 id=\"1-1-go操作cookie\"><a href=\"#1-1-go操作cookie\" class=\"headerlink\" title=\"1.1.go操作cookie\"></a>1.1.go操作cookie</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, handleCookie)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;server start!&quot;</span>)</span><br><span class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleCookie</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取cookies</span></span><br><span class=\"line\">\tcks := r.Cookies()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(cks) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> cks &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(v.Name, v.Value)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;already has cookie.&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置cookies</span></span><br><span class=\"line\">\t\tcookie := http.Cookie&#123;</span><br><span class=\"line\">\t\t\tName:    <span class=\"string\">&quot;mebaron&quot;</span>,</span><br><span class=\"line\">\t\t\tValue:   <span class=\"string\">&quot;cookie&quot;</span>,</span><br><span class=\"line\">\t\t\tExpires: time.Now().Add(time.Hour),</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\thttp.SetCookie(w, &amp;cookie)</span><br><span class=\"line\">\t\tfmt.Fprintf(w, <span class=\"string\">&quot;do not has cookie, set new cookie.&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-session\"><a href=\"#2-session\" class=\"headerlink\" title=\"2.session\"></a>2.session</h3><p>session在web开发环境下指一类用在客户端与服务端之间保持状态的解决方案。session机制是一种服务端的机制，服务器使用一种类似于散列表的结构来保存信息。</p>\n<h4 id=\"2-1-go操作session\"><a href=\"#2-1-go操作session\" class=\"headerlink\" title=\"2.1.go操作session\"></a>2.1.go操作session</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go语言暂无操作session的库</span></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> 实现go操作session的代码</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"go文本处理","type":"tags","date":"2023-12-27T13:14:56.000Z","_content":"\n## go文本处理\n\n### 1.xml处理\n\n待解析的xml文件：\n\n```xml\n<bookstore>\n    <book category=\"COOKING\">\n        <title lang=\"en\">Everyday Italian</title>\n        <author>Giada De Laurentiis</author>\n        <year>2005</year>\n        <price>30.00</price>\n    </book>\n    <book category=\"CHILDREN\">\n        <title lang=\"en\">Harry Potter</title>\n        <author>J K. Rowling</author>\n        <year>2005</year>\n        <price>29.99</price>\n    </book>\n    <book category=\"WEB\">\n        <title lang=\"en\">Learning XML</title>\n        <author>Erik T. Ray</author>\n        <year>2003</year>\n        <price>39.95</price>\n    </book>\n</bookstore>\n```\n\ngo处理xml文件：\n\n```go\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, _ := os.Open(\"xml.xml\")\n\tdefer f.Close()\n\n\tdata, _ := io.ReadAll(f)\n\n\tbs := BookStore{}\n    // 将xml文件解析到对应结构体\n\txml.Unmarshal(data, &bs)\n\n\tfor _, v := range bs.Book {\n\t\tfmt.Println(v)\n\t}\n\n    // 输出配置信息到xml文件\n\tdata, _ = xml.MarshalIndent(bs, \" \", \"  \")\n\tf, _ = os.Create(\"new.xml\")\n\tdefer f.Close()\n\n\tf.Write(data)\n}\n\ntype TitleItem struct {\n\tLang     string `xml:\"lang,attr\"`\n\tXMLValue string `xml:\",innerxml\"`\n}\n\ntype BookItem struct {\n\tTitle    TitleItem `xml:\"title\"`\n\tCategory string    `xml:\"category,attr\"`\n\tAuthor   string    `xml:\"author\"`\n\tYear     string    `xml:\"year\"`\n\tPrice    string    `xml:\"price\"`\n}\n\ntype BookStore struct {\n\tXMLName xml.Name   `xml:\"bookstore`\n\tBook    []BookItem `xml:\"book\"`\n}\n\n```\n\n### 2.json处理\n\n待处理的json文件：\n\n```json\n{\n    \"squadName\": \"Super hero squad\",\n    \"homeTown\": \"Metro City\",\n    \"formed\": 2016,\n    \"secretBase\": \"Super tower\",\n    \"active\": true,\n    \"members\": [\n        {\n            \"name\": \"Molecule Man\",\n            \"age\": 29,\n            \"secretIdentity\": \"Dan Jukes\",\n            \"powers\": [\n                \"Radiation resistance\",\n                \"Turning tiny\",\n                \"Radiation blast\"\n            ]\n        },\n        {\n            \"name\": \"Madame Uppercut\",\n            \"age\": 39,\n            \"secretIdentity\": \"Jane Wilson\",\n            \"powers\": [\n                \"Million tonne punch\",\n                \"Damage resistance\",\n                \"Superhuman reflexes\"\n            ]\n        },\n        {\n            \"name\": \"Eternal Flame\",\n            \"age\": 1000000,\n            \"secretIdentity\": \"Unknown\",\n            \"powers\": [\n                \"Immortality\",\n                \"Heat Immunity\",\n                \"Inferno\",\n                \"Teleportation\",\n                \"Interdimensional travel\"\n            ]\n        }\n    ]\n}\n```\n\ngo处理json文件：\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\t// 读取json文件\n\tf, _ := os.Open(\"json.json\")\n\tdefer f.Close()\n\tdata, _ := io.ReadAll(f)\n\n\tsh := SuperHero{}\n\tjson.Unmarshal(data, &sh)\n\n\tfmt.Println(sh)\n\n\t// 输出json文件\n\tfile, _ := os.Create(\"new.json\")\n\tdefer file.Close()\n\tsh.SquadName = \"mebaron hero\"\n\tsh.HomeTown = \"shengzhen\"\n\n\tdata, _ = json.MarshalIndent(sh, \" \", \"  \")\n\t// data, _ = json.Marshal(sh)\n\tfile.Write(data)\n\n}\n\ntype SuperHero struct {\n\tSquadName    string   `json:\"squadName\"`\n\tHomeTown     string   `json:\"homeTown\"`\n\tFormed       string   `json:\"formed\"`\n\tSecretedBase string   `json:\"secretedBase\"`\n\tActive       string   `json:\"active\"`\n\tMembers      []Member `json:\"members\"`\n}\n\ntype Member struct {\n\tName           string   `json:\"name\"`\n\tAge            string   `json:\"age\"`\n\tSecretIdentity string   `json:\"secretIdentity\"`\n\tPowers         []string `json:\"powers\"`\n}\n```\n\n","source":"_posts/21.go文本处理.md","raw":"---\ntitle: go文本处理\ntype: tags\ndate: 2023-12-27 21:14:56\ntags:\n- go\n- xml\n- json\ncategories:\n- 学习笔记\n---\n\n## go文本处理\n\n### 1.xml处理\n\n待解析的xml文件：\n\n```xml\n<bookstore>\n    <book category=\"COOKING\">\n        <title lang=\"en\">Everyday Italian</title>\n        <author>Giada De Laurentiis</author>\n        <year>2005</year>\n        <price>30.00</price>\n    </book>\n    <book category=\"CHILDREN\">\n        <title lang=\"en\">Harry Potter</title>\n        <author>J K. Rowling</author>\n        <year>2005</year>\n        <price>29.99</price>\n    </book>\n    <book category=\"WEB\">\n        <title lang=\"en\">Learning XML</title>\n        <author>Erik T. Ray</author>\n        <year>2003</year>\n        <price>39.95</price>\n    </book>\n</bookstore>\n```\n\ngo处理xml文件：\n\n```go\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, _ := os.Open(\"xml.xml\")\n\tdefer f.Close()\n\n\tdata, _ := io.ReadAll(f)\n\n\tbs := BookStore{}\n    // 将xml文件解析到对应结构体\n\txml.Unmarshal(data, &bs)\n\n\tfor _, v := range bs.Book {\n\t\tfmt.Println(v)\n\t}\n\n    // 输出配置信息到xml文件\n\tdata, _ = xml.MarshalIndent(bs, \" \", \"  \")\n\tf, _ = os.Create(\"new.xml\")\n\tdefer f.Close()\n\n\tf.Write(data)\n}\n\ntype TitleItem struct {\n\tLang     string `xml:\"lang,attr\"`\n\tXMLValue string `xml:\",innerxml\"`\n}\n\ntype BookItem struct {\n\tTitle    TitleItem `xml:\"title\"`\n\tCategory string    `xml:\"category,attr\"`\n\tAuthor   string    `xml:\"author\"`\n\tYear     string    `xml:\"year\"`\n\tPrice    string    `xml:\"price\"`\n}\n\ntype BookStore struct {\n\tXMLName xml.Name   `xml:\"bookstore`\n\tBook    []BookItem `xml:\"book\"`\n}\n\n```\n\n### 2.json处理\n\n待处理的json文件：\n\n```json\n{\n    \"squadName\": \"Super hero squad\",\n    \"homeTown\": \"Metro City\",\n    \"formed\": 2016,\n    \"secretBase\": \"Super tower\",\n    \"active\": true,\n    \"members\": [\n        {\n            \"name\": \"Molecule Man\",\n            \"age\": 29,\n            \"secretIdentity\": \"Dan Jukes\",\n            \"powers\": [\n                \"Radiation resistance\",\n                \"Turning tiny\",\n                \"Radiation blast\"\n            ]\n        },\n        {\n            \"name\": \"Madame Uppercut\",\n            \"age\": 39,\n            \"secretIdentity\": \"Jane Wilson\",\n            \"powers\": [\n                \"Million tonne punch\",\n                \"Damage resistance\",\n                \"Superhuman reflexes\"\n            ]\n        },\n        {\n            \"name\": \"Eternal Flame\",\n            \"age\": 1000000,\n            \"secretIdentity\": \"Unknown\",\n            \"powers\": [\n                \"Immortality\",\n                \"Heat Immunity\",\n                \"Inferno\",\n                \"Teleportation\",\n                \"Interdimensional travel\"\n            ]\n        }\n    ]\n}\n```\n\ngo处理json文件：\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\t// 读取json文件\n\tf, _ := os.Open(\"json.json\")\n\tdefer f.Close()\n\tdata, _ := io.ReadAll(f)\n\n\tsh := SuperHero{}\n\tjson.Unmarshal(data, &sh)\n\n\tfmt.Println(sh)\n\n\t// 输出json文件\n\tfile, _ := os.Create(\"new.json\")\n\tdefer file.Close()\n\tsh.SquadName = \"mebaron hero\"\n\tsh.HomeTown = \"shengzhen\"\n\n\tdata, _ = json.MarshalIndent(sh, \" \", \"  \")\n\t// data, _ = json.Marshal(sh)\n\tfile.Write(data)\n\n}\n\ntype SuperHero struct {\n\tSquadName    string   `json:\"squadName\"`\n\tHomeTown     string   `json:\"homeTown\"`\n\tFormed       string   `json:\"formed\"`\n\tSecretedBase string   `json:\"secretedBase\"`\n\tActive       string   `json:\"active\"`\n\tMembers      []Member `json:\"members\"`\n}\n\ntype Member struct {\n\tName           string   `json:\"name\"`\n\tAge            string   `json:\"age\"`\n\tSecretIdentity string   `json:\"secretIdentity\"`\n\tPowers         []string `json:\"powers\"`\n}\n```\n\n","slug":"21.go文本处理","published":1,"updated":"2024-01-06T00:23:14.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dj000z0cfv7bn72x9j","content":"<h2 id=\"go文本处理\"><a href=\"#go文本处理\" class=\"headerlink\" title=\"go文本处理\"></a>go文本处理</h2><h3 id=\"1-xml处理\"><a href=\"#1-xml处理\" class=\"headerlink\" title=\"1.xml处理\"></a>1.xml处理</h3><p>待解析的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bookstore</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">category</span>=<span class=\"string\">&quot;COOKING&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>Giada De Laurentiis<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2005<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>30.00<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">category</span>=<span class=\"string\">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>Harry Potter<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>J K. Rowling<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2005<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>29.99<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">category</span>=<span class=\"string\">&quot;WEB&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>Learning XML<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>Erik T. Ray<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2003<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>39.95<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>go处理xml文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/xml&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf, _ := os.Open(<span class=\"string\">&quot;xml.xml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdata, _ := io.ReadAll(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\tbs := BookStore&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将xml文件解析到对应结构体</span></span><br><span class=\"line\">\txml.Unmarshal(data, &amp;bs)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> bs.Book &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出配置信息到xml文件</span></span><br><span class=\"line\">\tdata, _ = xml.MarshalIndent(bs, <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;  &quot;</span>)</span><br><span class=\"line\">\tf, _ = os.Create(<span class=\"string\">&quot;new.xml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.Write(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TitleItem <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLang     <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;lang,attr&quot;`</span></span><br><span class=\"line\">\tXMLValue <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;,innerxml&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BookItem <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTitle    TitleItem <span class=\"string\">`xml:&quot;title&quot;`</span></span><br><span class=\"line\">\tCategory <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;category,attr&quot;`</span></span><br><span class=\"line\">\tAuthor   <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;author&quot;`</span></span><br><span class=\"line\">\tYear     <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;year&quot;`</span></span><br><span class=\"line\">\tPrice    <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;price&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BookStore <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tXMLName xml.Name   <span class=\"string\">`xml:&quot;bookstore`</span></span><br><span class=\"line\">\tBook    []BookItem <span class=\"string\">`xml:&quot;book&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-json处理\"><a href=\"#2-json处理\" class=\"headerlink\" title=\"2.json处理\"></a>2.json处理</h3><p>待处理的json文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;squadName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Super hero squad&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;homeTown&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Metro City&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;formed&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2016</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;secretBase&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Super tower&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;active&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;members&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Molecule Man&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">29</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;secretIdentity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Dan Jukes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;powers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Radiation resistance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Turning tiny&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Radiation blast&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Madame Uppercut&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">39</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;secretIdentity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Jane Wilson&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;powers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Million tonne punch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Damage resistance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Superhuman reflexes&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Eternal Flame&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1000000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;secretIdentity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Unknown&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;powers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Immortality&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Heat Immunity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Inferno&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Teleportation&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Interdimensional travel&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>go处理json文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取json文件</span></span><br><span class=\"line\">\tf, _ := os.Open(<span class=\"string\">&quot;json.json&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">\tdata, _ := io.ReadAll(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\tsh := SuperHero&#123;&#125;</span><br><span class=\"line\">\tjson.Unmarshal(data, &amp;sh)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(sh)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 输出json文件</span></span><br><span class=\"line\">\tfile, _ := os.Create(<span class=\"string\">&quot;new.json&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\">\tsh.SquadName = <span class=\"string\">&quot;mebaron hero&quot;</span></span><br><span class=\"line\">\tsh.HomeTown = <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdata, _ = json.MarshalIndent(sh, <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;  &quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// data, _ = json.Marshal(sh)</span></span><br><span class=\"line\">\tfile.Write(data)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SuperHero <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tSquadName    <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;squadName&quot;`</span></span><br><span class=\"line\">\tHomeTown     <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;homeTown&quot;`</span></span><br><span class=\"line\">\tFormed       <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;formed&quot;`</span></span><br><span class=\"line\">\tSecretedBase <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;secretedBase&quot;`</span></span><br><span class=\"line\">\tActive       <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;active&quot;`</span></span><br><span class=\"line\">\tMembers      []Member <span class=\"string\">`json:&quot;members&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Member <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName           <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge            <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">\tSecretIdentity <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;secretIdentity&quot;`</span></span><br><span class=\"line\">\tPowers         []<span class=\"type\">string</span> <span class=\"string\">`json:&quot;powers&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover06.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go文本处理\"><a href=\"#go文本处理\" class=\"headerlink\" title=\"go文本处理\"></a>go文本处理</h2><h3 id=\"1-xml处理\"><a href=\"#1-xml处理\" class=\"headerlink\" title=\"1.xml处理\"></a>1.xml处理</h3><p>待解析的xml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bookstore</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">category</span>=<span class=\"string\">&quot;COOKING&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>Everyday Italian<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>Giada De Laurentiis<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2005<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>30.00<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">category</span>=<span class=\"string\">&quot;CHILDREN&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>Harry Potter<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>J K. Rowling<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2005<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>29.99<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">book</span> <span class=\"attr\">category</span>=<span class=\"string\">&quot;WEB&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span>Learning XML<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">author</span>&gt;</span>Erik T. Ray<span class=\"tag\">&lt;/<span class=\"name\">author</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">year</span>&gt;</span>2003<span class=\"tag\">&lt;/<span class=\"name\">year</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">price</span>&gt;</span>39.95<span class=\"tag\">&lt;/<span class=\"name\">price</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>go处理xml文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/xml&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf, _ := os.Open(<span class=\"string\">&quot;xml.xml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdata, _ := io.ReadAll(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\tbs := BookStore&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将xml文件解析到对应结构体</span></span><br><span class=\"line\">\txml.Unmarshal(data, &amp;bs)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> bs.Book &#123;</span><br><span class=\"line\">\t\tfmt.Println(v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出配置信息到xml文件</span></span><br><span class=\"line\">\tdata, _ = xml.MarshalIndent(bs, <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;  &quot;</span>)</span><br><span class=\"line\">\tf, _ = os.Create(<span class=\"string\">&quot;new.xml&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.Write(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TitleItem <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLang     <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;lang,attr&quot;`</span></span><br><span class=\"line\">\tXMLValue <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;,innerxml&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BookItem <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTitle    TitleItem <span class=\"string\">`xml:&quot;title&quot;`</span></span><br><span class=\"line\">\tCategory <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;category,attr&quot;`</span></span><br><span class=\"line\">\tAuthor   <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;author&quot;`</span></span><br><span class=\"line\">\tYear     <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;year&quot;`</span></span><br><span class=\"line\">\tPrice    <span class=\"type\">string</span>    <span class=\"string\">`xml:&quot;price&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BookStore <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tXMLName xml.Name   <span class=\"string\">`xml:&quot;bookstore`</span></span><br><span class=\"line\">\tBook    []BookItem <span class=\"string\">`xml:&quot;book&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-json处理\"><a href=\"#2-json处理\" class=\"headerlink\" title=\"2.json处理\"></a>2.json处理</h3><p>待处理的json文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;squadName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Super hero squad&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;homeTown&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Metro City&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;formed&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2016</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;secretBase&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Super tower&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;active&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;members&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Molecule Man&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">29</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;secretIdentity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Dan Jukes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;powers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Radiation resistance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Turning tiny&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Radiation blast&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Madame Uppercut&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">39</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;secretIdentity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Jane Wilson&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;powers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Million tonne punch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Damage resistance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Superhuman reflexes&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Eternal Flame&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1000000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;secretIdentity&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Unknown&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;powers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Immortality&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Heat Immunity&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Inferno&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Teleportation&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Interdimensional travel&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>go处理json文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取json文件</span></span><br><span class=\"line\">\tf, _ := os.Open(<span class=\"string\">&quot;json.json&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">\tdata, _ := io.ReadAll(f)</span><br><span class=\"line\"></span><br><span class=\"line\">\tsh := SuperHero&#123;&#125;</span><br><span class=\"line\">\tjson.Unmarshal(data, &amp;sh)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(sh)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 输出json文件</span></span><br><span class=\"line\">\tfile, _ := os.Create(<span class=\"string\">&quot;new.json&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\">\tsh.SquadName = <span class=\"string\">&quot;mebaron hero&quot;</span></span><br><span class=\"line\">\tsh.HomeTown = <span class=\"string\">&quot;shengzhen&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdata, _ = json.MarshalIndent(sh, <span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;  &quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// data, _ = json.Marshal(sh)</span></span><br><span class=\"line\">\tfile.Write(data)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SuperHero <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tSquadName    <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;squadName&quot;`</span></span><br><span class=\"line\">\tHomeTown     <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;homeTown&quot;`</span></span><br><span class=\"line\">\tFormed       <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;formed&quot;`</span></span><br><span class=\"line\">\tSecretedBase <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;secretedBase&quot;`</span></span><br><span class=\"line\">\tActive       <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;active&quot;`</span></span><br><span class=\"line\">\tMembers      []Member <span class=\"string\">`json:&quot;members&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Member <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName           <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge            <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">\tSecretIdentity <span class=\"type\">string</span>   <span class=\"string\">`json:&quot;secretIdentity&quot;`</span></span><br><span class=\"line\">\tPowers         []<span class=\"type\">string</span> <span class=\"string\">`json:&quot;powers&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go正则处理","type":"tags","date":"2023-12-28T09:34:51.000Z","_content":"\n## go正则处理\n\n### 1.正则表达式语法\n\ngo的regexp正则表达式库采用RE2语法，细节可参考[文档](https://github.com/google/re2/wiki/Syntax)，常见的用法如下：\n\n|  字符  |                             描述                             |\n| :----: | :----------------------------------------------------------: |\n| [ABC]  |                  匹配 [...] 中的所有字符。                   |\n| [^ABC] |              匹配除了 [...] 中字符的所有字符。               |\n| [A-Z]  | [A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。 |\n|   .    | 匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配 . ，请使用 \\\\. 。 |\n| [\\s\\S] | 匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。 |\n|   \\w   |        匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。         |\n|   \\d   |       匹配任意一个阿拉伯数字（0 到 9）。等价于 [0-9]。       |\n|   ^    | 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \\^。 |\n|   $    | 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\\n' 或 '\\r'。要匹配 $ 字符本身，请使用 \\\\$。 |\n|  ( )   | 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\\\( 和\\ \\)。 |\n|   *    |  匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\\\*。   |\n|   +    |  匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\\\+。   |\n|   ?    | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。 |\n|  {n}   |           n 是一个非负整数。匹配确定的 **n** 次。            |\n|  {n,}  |               n 是一个非负整数。至少匹配n 次。               |\n| {n,m}  | m 和 n 均为非负整数，其中 n <= m。最少匹配 n 次且最多匹配 m 次。 |\n|   \\|   |        指明两项之间的一个选择。要匹配 \\|，请使用 \\|。        |\n\n### 2.正则表达式处理函数\n\nRegexp类型提供了多达16个方法，用于匹配正则表达式并获取匹配的结果。它们的名字满足如下正则表达式：\n\n```\nFind(All)?(String)?(Submatch)?(Index)?\n```\n\n如果**'All'**出现了，该方法会返回输入中所有互不重叠的匹配结果。如果一个匹配结果的前后（没有间隔字符）存在长度为0的成功匹配，该空匹配会被忽略。包含All的方法会要求一个额外的整数参数n，如果n>=0，方法会返回最多前n个匹配结果。\n\n如果**'String'**出现了，匹配对象为字符串，否则应该是[]byte类型，返回值和匹配对象的类型是对应的。\n\n如果**'Submatch'**出现了，返回值是表示正则表达式中成功的组匹配（子匹配/次级匹配）的切片。组匹配是正则表达式内部的括号包围的次级表达式（也被称为“捕获分组”），从左到右按左括号的顺序编号。索引0的组匹配为完整表达式的匹配结果，1为第一个分组的匹配结果，依次类推。\n\n如果**'Index'**出现了，匹配/分组匹配会用输入流的字节索引对表示result[2*n:2*n+1]表示第n个分组匹配的的匹配结果。如果没有'Index'，匹配结果表示为匹配到的文本。如果索引为负数，表示分组匹配没有匹配到输入流中的文本。\n\n#### 2.1.通过正则判断是否匹配\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nvar (\n\ttel  string = \"13565248564\"\n\tdata []byte = []byte{'a', 'b', 'c'}\n)\n\nfunc main() {\n    // 判断字符串是否匹配\n\tmatched, _ := regexp.MatchString(\"^[0-9]{11}$\", tel)\n\tfmt.Printf(\"matched: %v\\n\", matched)\n\n    // 判断[]byte类型是否匹配\n\tmatched, _ = regexp.Match(\"^[a-z]+$\", data)\n\tfmt.Printf(\"matched: %v\\n\", matched)\n}\n```\n\n#### 2.2.通过正则获取内容\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nvar (\n\ttel string = \"123abc456bvf789bjs\"\n)\n\nfunc main() {\n\t// 校验正则表达式\n\treg, _ := regexp.Compile(\"[0-9]{3}\")\n\n\t// 匹配字符串内容\n\tres := reg.FindAllString(tel, -1)\n\tfor _, v := range res {\n\t\tfmt.Printf(\"v: %v\\n\", v)\n\t}\n\n\t// 组匹配\n\treg, _ = regexp.Compile(\"([0-9]{3})([a-z]{1})\")\n\tres = reg.FindStringSubmatch(tel)\n\tfor _, v := range res {\n\t\tfmt.Printf(\"v: %v\\n\", v)\n\t}\n\n\t// 获取匹配元素在原字符串的下标信息\n\tsum := reg.FindStringIndex(tel)\n\tfmt.Printf(\"tel[sum[0]:sum[1]]: %v\\n\", tel[sum[0]:sum[1]])\n}\n```\n\n","source":"_posts/22.go正则处理.md","raw":"---\ntitle: go正则处理\ntype: tags\ndate: 2023-12-28 17:34:51\ntags:\n- go\n- 正则表达式\ncategories:\n- 学习笔记\n---\n\n## go正则处理\n\n### 1.正则表达式语法\n\ngo的regexp正则表达式库采用RE2语法，细节可参考[文档](https://github.com/google/re2/wiki/Syntax)，常见的用法如下：\n\n|  字符  |                             描述                             |\n| :----: | :----------------------------------------------------------: |\n| [ABC]  |                  匹配 [...] 中的所有字符。                   |\n| [^ABC] |              匹配除了 [...] 中字符的所有字符。               |\n| [A-Z]  | [A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。 |\n|   .    | 匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配 . ，请使用 \\\\. 。 |\n| [\\s\\S] | 匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。 |\n|   \\w   |        匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。         |\n|   \\d   |       匹配任意一个阿拉伯数字（0 到 9）。等价于 [0-9]。       |\n|   ^    | 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \\^。 |\n|   $    | 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\\n' 或 '\\r'。要匹配 $ 字符本身，请使用 \\\\$。 |\n|  ( )   | 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\\\( 和\\ \\)。 |\n|   *    |  匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\\\*。   |\n|   +    |  匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\\\+。   |\n|   ?    | 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。 |\n|  {n}   |           n 是一个非负整数。匹配确定的 **n** 次。            |\n|  {n,}  |               n 是一个非负整数。至少匹配n 次。               |\n| {n,m}  | m 和 n 均为非负整数，其中 n <= m。最少匹配 n 次且最多匹配 m 次。 |\n|   \\|   |        指明两项之间的一个选择。要匹配 \\|，请使用 \\|。        |\n\n### 2.正则表达式处理函数\n\nRegexp类型提供了多达16个方法，用于匹配正则表达式并获取匹配的结果。它们的名字满足如下正则表达式：\n\n```\nFind(All)?(String)?(Submatch)?(Index)?\n```\n\n如果**'All'**出现了，该方法会返回输入中所有互不重叠的匹配结果。如果一个匹配结果的前后（没有间隔字符）存在长度为0的成功匹配，该空匹配会被忽略。包含All的方法会要求一个额外的整数参数n，如果n>=0，方法会返回最多前n个匹配结果。\n\n如果**'String'**出现了，匹配对象为字符串，否则应该是[]byte类型，返回值和匹配对象的类型是对应的。\n\n如果**'Submatch'**出现了，返回值是表示正则表达式中成功的组匹配（子匹配/次级匹配）的切片。组匹配是正则表达式内部的括号包围的次级表达式（也被称为“捕获分组”），从左到右按左括号的顺序编号。索引0的组匹配为完整表达式的匹配结果，1为第一个分组的匹配结果，依次类推。\n\n如果**'Index'**出现了，匹配/分组匹配会用输入流的字节索引对表示result[2*n:2*n+1]表示第n个分组匹配的的匹配结果。如果没有'Index'，匹配结果表示为匹配到的文本。如果索引为负数，表示分组匹配没有匹配到输入流中的文本。\n\n#### 2.1.通过正则判断是否匹配\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nvar (\n\ttel  string = \"13565248564\"\n\tdata []byte = []byte{'a', 'b', 'c'}\n)\n\nfunc main() {\n    // 判断字符串是否匹配\n\tmatched, _ := regexp.MatchString(\"^[0-9]{11}$\", tel)\n\tfmt.Printf(\"matched: %v\\n\", matched)\n\n    // 判断[]byte类型是否匹配\n\tmatched, _ = regexp.Match(\"^[a-z]+$\", data)\n\tfmt.Printf(\"matched: %v\\n\", matched)\n}\n```\n\n#### 2.2.通过正则获取内容\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nvar (\n\ttel string = \"123abc456bvf789bjs\"\n)\n\nfunc main() {\n\t// 校验正则表达式\n\treg, _ := regexp.Compile(\"[0-9]{3}\")\n\n\t// 匹配字符串内容\n\tres := reg.FindAllString(tel, -1)\n\tfor _, v := range res {\n\t\tfmt.Printf(\"v: %v\\n\", v)\n\t}\n\n\t// 组匹配\n\treg, _ = regexp.Compile(\"([0-9]{3})([a-z]{1})\")\n\tres = reg.FindStringSubmatch(tel)\n\tfor _, v := range res {\n\t\tfmt.Printf(\"v: %v\\n\", v)\n\t}\n\n\t// 获取匹配元素在原字符串的下标信息\n\tsum := reg.FindStringIndex(tel)\n\tfmt.Printf(\"tel[sum[0]:sum[1]]: %v\\n\", tel[sum[0]:sum[1]])\n}\n```\n\n","slug":"22.go正则处理","published":1,"updated":"2024-01-06T00:23:19.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dl00130cfvd1ml0tl4","content":"<h2 id=\"go正则处理\"><a href=\"#go正则处理\" class=\"headerlink\" title=\"go正则处理\"></a>go正则处理</h2><h3 id=\"1-正则表达式语法\"><a href=\"#1-正则表达式语法\" class=\"headerlink\" title=\"1.正则表达式语法\"></a>1.正则表达式语法</h3><p>go的regexp正则表达式库采用RE2语法，细节可参考<a href=\"https://github.com/google/re2/wiki/Syntax\">文档</a>，常见的用法如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[ABC]</td>\n<td align=\"center\">匹配 […] 中的所有字符。</td>\n</tr>\n<tr>\n<td align=\"center\">[^ABC]</td>\n<td align=\"center\">匹配除了 […] 中字符的所有字符。</td>\n</tr>\n<tr>\n<td align=\"center\">[A-Z]</td>\n<td align=\"center\">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td align=\"center\">匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配 . ，请使用 \\. 。</td>\n</tr>\n<tr>\n<td align=\"center\">[\\s\\S]</td>\n<td align=\"center\">匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"center\">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">匹配任意一个阿拉伯数字（0 到 9）。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 \\$。</td>\n</tr>\n<tr>\n<td align=\"center\">( )</td>\n<td align=\"center\">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和\\ )。</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+。</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>\n</tr>\n<tr>\n<td align=\"center\">{n}</td>\n<td align=\"center\">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。</td>\n</tr>\n<tr>\n<td align=\"center\">{n,}</td>\n<td align=\"center\">n 是一个非负整数。至少匹配n 次。</td>\n</tr>\n<tr>\n<td align=\"center\">{n,m}</td>\n<td align=\"center\">m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">指明两项之间的一个选择。要匹配 |，请使用 |。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-正则表达式处理函数\"><a href=\"#2-正则表达式处理函数\" class=\"headerlink\" title=\"2.正则表达式处理函数\"></a>2.正则表达式处理函数</h3><p>Regexp类型提供了多达16个方法，用于匹配正则表达式并获取匹配的结果。它们的名字满足如下正则表达式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Find(All)?(String)?(Submatch)?(Index)?</span><br></pre></td></tr></table></figure>\n\n<p>如果**’All’**出现了，该方法会返回输入中所有互不重叠的匹配结果。如果一个匹配结果的前后（没有间隔字符）存在长度为0的成功匹配，该空匹配会被忽略。包含All的方法会要求一个额外的整数参数n，如果n&gt;=0，方法会返回最多前n个匹配结果。</p>\n<p>如果**’String’**出现了，匹配对象为字符串，否则应该是[]byte类型，返回值和匹配对象的类型是对应的。</p>\n<p>如果**’Submatch’**出现了，返回值是表示正则表达式中成功的组匹配（子匹配/次级匹配）的切片。组匹配是正则表达式内部的括号包围的次级表达式（也被称为“捕获分组”），从左到右按左括号的顺序编号。索引0的组匹配为完整表达式的匹配结果，1为第一个分组的匹配结果，依次类推。</p>\n<p>如果**’Index’*<em>出现了，匹配/分组匹配会用输入流的字节索引对表示result[2</em>n:2*n+1]表示第n个分组匹配的的匹配结果。如果没有’Index’，匹配结果表示为匹配到的文本。如果索引为负数，表示分组匹配没有匹配到输入流中的文本。</p>\n<h4 id=\"2-1-通过正则判断是否匹配\"><a href=\"#2-1-通过正则判断是否匹配\" class=\"headerlink\" title=\"2.1.通过正则判断是否匹配\"></a>2.1.通过正则判断是否匹配</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;regexp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\ttel  <span class=\"type\">string</span> = <span class=\"string\">&quot;13565248564&quot;</span></span><br><span class=\"line\">\tdata []<span class=\"type\">byte</span> = []<span class=\"type\">byte</span>&#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断字符串是否匹配</span></span><br><span class=\"line\">\tmatched, _ := regexp.MatchString(<span class=\"string\">&quot;^[0-9]&#123;11&#125;$&quot;</span>, tel)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;matched: %v\\n&quot;</span>, matched)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断[]byte类型是否匹配</span></span><br><span class=\"line\">\tmatched, _ = regexp.Match(<span class=\"string\">&quot;^[a-z]+$&quot;</span>, data)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;matched: %v\\n&quot;</span>, matched)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-通过正则获取内容\"><a href=\"#2-2-通过正则获取内容\" class=\"headerlink\" title=\"2.2.通过正则获取内容\"></a>2.2.通过正则获取内容</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;regexp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\ttel <span class=\"type\">string</span> = <span class=\"string\">&quot;123abc456bvf789bjs&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验正则表达式</span></span><br><span class=\"line\">\treg, _ := regexp.Compile(<span class=\"string\">&quot;[0-9]&#123;3&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 匹配字符串内容</span></span><br><span class=\"line\">\tres := reg.FindAllString(tel, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;v: %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 组匹配</span></span><br><span class=\"line\">\treg, _ = regexp.Compile(<span class=\"string\">&quot;([0-9]&#123;3&#125;)([a-z]&#123;1&#125;)&quot;</span>)</span><br><span class=\"line\">\tres = reg.FindStringSubmatch(tel)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;v: %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取匹配元素在原字符串的下标信息</span></span><br><span class=\"line\">\tsum := reg.FindStringIndex(tel)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;tel[sum[0]:sum[1]]: %v\\n&quot;</span>, tel[sum[<span class=\"number\">0</span>]:sum[<span class=\"number\">1</span>]])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover11.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go正则处理\"><a href=\"#go正则处理\" class=\"headerlink\" title=\"go正则处理\"></a>go正则处理</h2><h3 id=\"1-正则表达式语法\"><a href=\"#1-正则表达式语法\" class=\"headerlink\" title=\"1.正则表达式语法\"></a>1.正则表达式语法</h3><p>go的regexp正则表达式库采用RE2语法，细节可参考<a href=\"https://github.com/google/re2/wiki/Syntax\">文档</a>，常见的用法如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[ABC]</td>\n<td align=\"center\">匹配 […] 中的所有字符。</td>\n</tr>\n<tr>\n<td align=\"center\">[^ABC]</td>\n<td align=\"center\">匹配除了 […] 中字符的所有字符。</td>\n</tr>\n<tr>\n<td align=\"center\">[A-Z]</td>\n<td align=\"center\">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td align=\"center\">匹配除换行符（\\n、\\r）之外的任何单个字符。要匹配 . ，请使用 \\. 。</td>\n</tr>\n<tr>\n<td align=\"center\">[\\s\\S]</td>\n<td align=\"center\">匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"center\">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">匹配任意一个阿拉伯数字（0 到 9）。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 \\$。</td>\n</tr>\n<tr>\n<td align=\"center\">( )</td>\n<td align=\"center\">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和\\ )。</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+。</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>\n</tr>\n<tr>\n<td align=\"center\">{n}</td>\n<td align=\"center\">n 是一个非负整数。匹配确定的 <strong>n</strong> 次。</td>\n</tr>\n<tr>\n<td align=\"center\">{n,}</td>\n<td align=\"center\">n 是一个非负整数。至少匹配n 次。</td>\n</tr>\n<tr>\n<td align=\"center\">{n,m}</td>\n<td align=\"center\">m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">指明两项之间的一个选择。要匹配 |，请使用 |。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-正则表达式处理函数\"><a href=\"#2-正则表达式处理函数\" class=\"headerlink\" title=\"2.正则表达式处理函数\"></a>2.正则表达式处理函数</h3><p>Regexp类型提供了多达16个方法，用于匹配正则表达式并获取匹配的结果。它们的名字满足如下正则表达式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Find(All)?(String)?(Submatch)?(Index)?</span><br></pre></td></tr></table></figure>\n\n<p>如果**’All’**出现了，该方法会返回输入中所有互不重叠的匹配结果。如果一个匹配结果的前后（没有间隔字符）存在长度为0的成功匹配，该空匹配会被忽略。包含All的方法会要求一个额外的整数参数n，如果n&gt;=0，方法会返回最多前n个匹配结果。</p>\n<p>如果**’String’**出现了，匹配对象为字符串，否则应该是[]byte类型，返回值和匹配对象的类型是对应的。</p>\n<p>如果**’Submatch’**出现了，返回值是表示正则表达式中成功的组匹配（子匹配/次级匹配）的切片。组匹配是正则表达式内部的括号包围的次级表达式（也被称为“捕获分组”），从左到右按左括号的顺序编号。索引0的组匹配为完整表达式的匹配结果，1为第一个分组的匹配结果，依次类推。</p>\n<p>如果**’Index’*<em>出现了，匹配/分组匹配会用输入流的字节索引对表示result[2</em>n:2*n+1]表示第n个分组匹配的的匹配结果。如果没有’Index’，匹配结果表示为匹配到的文本。如果索引为负数，表示分组匹配没有匹配到输入流中的文本。</p>\n<h4 id=\"2-1-通过正则判断是否匹配\"><a href=\"#2-1-通过正则判断是否匹配\" class=\"headerlink\" title=\"2.1.通过正则判断是否匹配\"></a>2.1.通过正则判断是否匹配</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;regexp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\ttel  <span class=\"type\">string</span> = <span class=\"string\">&quot;13565248564&quot;</span></span><br><span class=\"line\">\tdata []<span class=\"type\">byte</span> = []<span class=\"type\">byte</span>&#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断字符串是否匹配</span></span><br><span class=\"line\">\tmatched, _ := regexp.MatchString(<span class=\"string\">&quot;^[0-9]&#123;11&#125;$&quot;</span>, tel)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;matched: %v\\n&quot;</span>, matched)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断[]byte类型是否匹配</span></span><br><span class=\"line\">\tmatched, _ = regexp.Match(<span class=\"string\">&quot;^[a-z]+$&quot;</span>, data)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;matched: %v\\n&quot;</span>, matched)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-通过正则获取内容\"><a href=\"#2-2-通过正则获取内容\" class=\"headerlink\" title=\"2.2.通过正则获取内容\"></a>2.2.通过正则获取内容</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;regexp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\ttel <span class=\"type\">string</span> = <span class=\"string\">&quot;123abc456bvf789bjs&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验正则表达式</span></span><br><span class=\"line\">\treg, _ := regexp.Compile(<span class=\"string\">&quot;[0-9]&#123;3&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 匹配字符串内容</span></span><br><span class=\"line\">\tres := reg.FindAllString(tel, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;v: %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 组匹配</span></span><br><span class=\"line\">\treg, _ = regexp.Compile(<span class=\"string\">&quot;([0-9]&#123;3&#125;)([a-z]&#123;1&#125;)&quot;</span>)</span><br><span class=\"line\">\tres = reg.FindStringSubmatch(tel)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;v: %v\\n&quot;</span>, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取匹配元素在原字符串的下标信息</span></span><br><span class=\"line\">\tsum := reg.FindStringIndex(tel)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;tel[sum[0]:sum[1]]: %v\\n&quot;</span>, tel[sum[<span class=\"number\">0</span>]:sum[<span class=\"number\">1</span>]])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go文件操作","type":"tags","date":"2023-12-28T14:21:08.000Z","_content":"\n## go文件操作\n\n### 1.目录操作\n\n```go\npackage main\n\nimport \"os\"\n\nfunc main() {\n\n\t// 创建名称为name的目录，权限设置是perm。\n\tos.Mkdir(\"temp1\", 0666)\n\n\t// 创建多级子目录,权限设置是perm。\n\tos.MkdirAll(\"temp2/test/conf\", 0666)\n\n\t// 删除名称为name的目录，当目录下有文件或者其他目录会出错。\n\tos.Remove(\"temp1\")\n\n\t// 删除多级子目录。\n\t// path = \"temp2/test/conf\",则只删除conf目录\n\t// path = \"temp2\"，删除temp2及其子目录\n\tos.RemoveAll(\"temp2\")\n}\n\n```\n\n### 2.文件操作\n\n#### 2.1.新建与打开文件\n\n```go\npackage main\n\nimport (\n\t\"os\"\n\t\"syscall\"\n)\n\nfunc main() {\n\n\t// 新建文件,根据name创建新的文件，返回一个文件对象（默认权限为0666，且可读写）。\n\tf, _ := os.Create(\"test.conf\")\n\tdefer f.Close()\n\n\t// 根据文件描述符创建相应name的文件。\n\tf1 := os.NewFile(uintptr(syscall.Stdout), \"test1.conf\")\n\tdefer f1.Close()\n\n\t// 打开名称为name的文件（只读模式）\n\tf3, _ := os.Open(\"test.conf\")\n\tdefer f3.Close()\n\n\t// 以flag（读写、只读等），perm权限的方式，打开或者创建名称为name的文件。\n\tf4, _ := os.OpenFile(\"test.conf\", os.O_WRONLY, 0666)\n\tdefer f4.Close()\n}\n```\n\n#### 2.2.读写文件\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\n\tf, _ := os.OpenFile(\"test.conf\", os.O_RDWR|os.O_APPEND, 0666)\n\n\t// 写文件\n\tf.Write([]byte(\"hello world!\\r\\n\"))\n\tf.WriteString(\"hello mebaron!\\r\\n\")\n\tio.WriteString(f, \"hello io pakage!\\r\\n\")\n\tf.Close()\n\n\tf, _ = os.Open(\"test.conf\")\n\tdefer f.Close()\n\t// 读文件\n\tbuf := make([]byte, 1024)\n\tfor {\n\t\tn, _ := f.Read(buf)\n\t\tif n == 0 {\n\t\t\tbreak\n\t\t}\n\t\tos.Stdout.Write(buf[:n])\n\t}\n}\n```\n\n","source":"_posts/23.go文件操作.md","raw":"---\ntitle: go文件操作\ntype: tags\ndate: 2023-12-28 22:21:08\ntags:\n- go\n- linux\ncategories:\n- 学习笔记\n---\n\n## go文件操作\n\n### 1.目录操作\n\n```go\npackage main\n\nimport \"os\"\n\nfunc main() {\n\n\t// 创建名称为name的目录，权限设置是perm。\n\tos.Mkdir(\"temp1\", 0666)\n\n\t// 创建多级子目录,权限设置是perm。\n\tos.MkdirAll(\"temp2/test/conf\", 0666)\n\n\t// 删除名称为name的目录，当目录下有文件或者其他目录会出错。\n\tos.Remove(\"temp1\")\n\n\t// 删除多级子目录。\n\t// path = \"temp2/test/conf\",则只删除conf目录\n\t// path = \"temp2\"，删除temp2及其子目录\n\tos.RemoveAll(\"temp2\")\n}\n\n```\n\n### 2.文件操作\n\n#### 2.1.新建与打开文件\n\n```go\npackage main\n\nimport (\n\t\"os\"\n\t\"syscall\"\n)\n\nfunc main() {\n\n\t// 新建文件,根据name创建新的文件，返回一个文件对象（默认权限为0666，且可读写）。\n\tf, _ := os.Create(\"test.conf\")\n\tdefer f.Close()\n\n\t// 根据文件描述符创建相应name的文件。\n\tf1 := os.NewFile(uintptr(syscall.Stdout), \"test1.conf\")\n\tdefer f1.Close()\n\n\t// 打开名称为name的文件（只读模式）\n\tf3, _ := os.Open(\"test.conf\")\n\tdefer f3.Close()\n\n\t// 以flag（读写、只读等），perm权限的方式，打开或者创建名称为name的文件。\n\tf4, _ := os.OpenFile(\"test.conf\", os.O_WRONLY, 0666)\n\tdefer f4.Close()\n}\n```\n\n#### 2.2.读写文件\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\n\tf, _ := os.OpenFile(\"test.conf\", os.O_RDWR|os.O_APPEND, 0666)\n\n\t// 写文件\n\tf.Write([]byte(\"hello world!\\r\\n\"))\n\tf.WriteString(\"hello mebaron!\\r\\n\")\n\tio.WriteString(f, \"hello io pakage!\\r\\n\")\n\tf.Close()\n\n\tf, _ = os.Open(\"test.conf\")\n\tdefer f.Close()\n\t// 读文件\n\tbuf := make([]byte, 1024)\n\tfor {\n\t\tn, _ := f.Read(buf)\n\t\tif n == 0 {\n\t\t\tbreak\n\t\t}\n\t\tos.Stdout.Write(buf[:n])\n\t}\n}\n```\n\n","slug":"23.go文件操作","published":1,"updated":"2024-01-06T00:23:23.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dm00160cfv23fsdoes","content":"<h2 id=\"go文件操作\"><a href=\"#go文件操作\" class=\"headerlink\" title=\"go文件操作\"></a>go文件操作</h2><h3 id=\"1-目录操作\"><a href=\"#1-目录操作\" class=\"headerlink\" title=\"1.目录操作\"></a>1.目录操作</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建名称为name的目录，权限设置是perm。</span></span><br><span class=\"line\">\tos.Mkdir(<span class=\"string\">&quot;temp1&quot;</span>, <span class=\"number\">0666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建多级子目录,权限设置是perm。</span></span><br><span class=\"line\">\tos.MkdirAll(<span class=\"string\">&quot;temp2/test/conf&quot;</span>, <span class=\"number\">0666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除名称为name的目录，当目录下有文件或者其他目录会出错。</span></span><br><span class=\"line\">\tos.Remove(<span class=\"string\">&quot;temp1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除多级子目录。</span></span><br><span class=\"line\">\t<span class=\"comment\">// path = &quot;temp2/test/conf&quot;,则只删除conf目录</span></span><br><span class=\"line\">\t<span class=\"comment\">// path = &quot;temp2&quot;，删除temp2及其子目录</span></span><br><span class=\"line\">\tos.RemoveAll(<span class=\"string\">&quot;temp2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-文件操作\"><a href=\"#2-文件操作\" class=\"headerlink\" title=\"2.文件操作\"></a>2.文件操作</h3><h4 id=\"2-1-新建与打开文件\"><a href=\"#2-1-新建与打开文件\" class=\"headerlink\" title=\"2.1.新建与打开文件\"></a>2.1.新建与打开文件</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;syscall&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 新建文件,根据name创建新的文件，返回一个文件对象（默认权限为0666，且可读写）。</span></span><br><span class=\"line\">\tf, _ := os.Create(<span class=\"string\">&quot;test.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据文件描述符创建相应name的文件。</span></span><br><span class=\"line\">\tf1 := os.NewFile(<span class=\"type\">uintptr</span>(syscall.Stdout), <span class=\"string\">&quot;test1.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f1.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开名称为name的文件（只读模式）</span></span><br><span class=\"line\">\tf3, _ := os.Open(<span class=\"string\">&quot;test.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f3.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 以flag（读写、只读等），perm权限的方式，打开或者创建名称为name的文件。</span></span><br><span class=\"line\">\tf4, _ := os.OpenFile(<span class=\"string\">&quot;test.conf&quot;</span>, os.O_WRONLY, <span class=\"number\">0666</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f4.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-读写文件\"><a href=\"#2-2-读写文件\" class=\"headerlink\" title=\"2.2.读写文件\"></a>2.2.读写文件</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, _ := os.OpenFile(<span class=\"string\">&quot;test.conf&quot;</span>, os.O_RDWR|os.O_APPEND, <span class=\"number\">0666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 写文件</span></span><br><span class=\"line\">\tf.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;hello world!\\r\\n&quot;</span>))</span><br><span class=\"line\">\tf.WriteString(<span class=\"string\">&quot;hello mebaron!\\r\\n&quot;</span>)</span><br><span class=\"line\">\tio.WriteString(f, <span class=\"string\">&quot;hello io pakage!\\r\\n&quot;</span>)</span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, _ = os.Open(<span class=\"string\">&quot;test.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 读文件</span></span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tn, _ := f.Read(buf)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tos.Stdout.Write(buf[:n])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover05.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go文件操作\"><a href=\"#go文件操作\" class=\"headerlink\" title=\"go文件操作\"></a>go文件操作</h2><h3 id=\"1-目录操作\"><a href=\"#1-目录操作\" class=\"headerlink\" title=\"1.目录操作\"></a>1.目录操作</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建名称为name的目录，权限设置是perm。</span></span><br><span class=\"line\">\tos.Mkdir(<span class=\"string\">&quot;temp1&quot;</span>, <span class=\"number\">0666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建多级子目录,权限设置是perm。</span></span><br><span class=\"line\">\tos.MkdirAll(<span class=\"string\">&quot;temp2/test/conf&quot;</span>, <span class=\"number\">0666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除名称为name的目录，当目录下有文件或者其他目录会出错。</span></span><br><span class=\"line\">\tos.Remove(<span class=\"string\">&quot;temp1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除多级子目录。</span></span><br><span class=\"line\">\t<span class=\"comment\">// path = &quot;temp2/test/conf&quot;,则只删除conf目录</span></span><br><span class=\"line\">\t<span class=\"comment\">// path = &quot;temp2&quot;，删除temp2及其子目录</span></span><br><span class=\"line\">\tos.RemoveAll(<span class=\"string\">&quot;temp2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-文件操作\"><a href=\"#2-文件操作\" class=\"headerlink\" title=\"2.文件操作\"></a>2.文件操作</h3><h4 id=\"2-1-新建与打开文件\"><a href=\"#2-1-新建与打开文件\" class=\"headerlink\" title=\"2.1.新建与打开文件\"></a>2.1.新建与打开文件</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;syscall&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 新建文件,根据name创建新的文件，返回一个文件对象（默认权限为0666，且可读写）。</span></span><br><span class=\"line\">\tf, _ := os.Create(<span class=\"string\">&quot;test.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据文件描述符创建相应name的文件。</span></span><br><span class=\"line\">\tf1 := os.NewFile(<span class=\"type\">uintptr</span>(syscall.Stdout), <span class=\"string\">&quot;test1.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f1.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打开名称为name的文件（只读模式）</span></span><br><span class=\"line\">\tf3, _ := os.Open(<span class=\"string\">&quot;test.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f3.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 以flag（读写、只读等），perm权限的方式，打开或者创建名称为name的文件。</span></span><br><span class=\"line\">\tf4, _ := os.OpenFile(<span class=\"string\">&quot;test.conf&quot;</span>, os.O_WRONLY, <span class=\"number\">0666</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f4.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-读写文件\"><a href=\"#2-2-读写文件\" class=\"headerlink\" title=\"2.2.读写文件\"></a>2.2.读写文件</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, _ := os.OpenFile(<span class=\"string\">&quot;test.conf&quot;</span>, os.O_RDWR|os.O_APPEND, <span class=\"number\">0666</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 写文件</span></span><br><span class=\"line\">\tf.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;hello world!\\r\\n&quot;</span>))</span><br><span class=\"line\">\tf.WriteString(<span class=\"string\">&quot;hello mebaron!\\r\\n&quot;</span>)</span><br><span class=\"line\">\tio.WriteString(f, <span class=\"string\">&quot;hello io pakage!\\r\\n&quot;</span>)</span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, _ = os.Open(<span class=\"string\">&quot;test.conf&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">\t<span class=\"comment\">// 读文件</span></span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tn, _ := f.Read(buf)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> n == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tos.Stdout.Write(buf[:n])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go字符串处理","type":"tags","date":"2023-12-29T02:25:41.000Z","_content":"\n## go字符串处理\n\n### 1.字符串操作\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nvar (\n\tstrs []string = []string{\"hello\", \"world\", \"mebaron\", \"123654789963852741\"}\n\tstr  string   = \"akhuiabjka1563afadf74a3ssf55sfa44a\"\n\tsep  string   = \"a\"\n)\n\nfunc main() {\n\t// 判断s中是否包含substr。\n\tfmt.Printf(\"strings.Contains(str, sep): %v\\n\", strings.Contains(str, sep))\n\n\t// 字符串连接，把slice a通过sep连接起来。\n\tfmt.Printf(\"strings.Join(strs, \\\",\\\"): %v\\n\", strings.Join(strs, \",\"))\n\n\t// 在字符串s中查找sep所在的位置，返回位置值，找不到返回-1。\n\tfmt.Printf(\"strings.Index(str, sep): %v\\n\", strings.Index(str, sep))\n\n\t// 重复s字符串count次，最后返回重复的字符串。\n\tfmt.Printf(\"strings.Repeat(str, 2): %v\\n\", strings.Repeat(str, 2))\n\n\t// 在s字符串中，把old字符串替换为new字符串，n表示替换次数，n<0表示全部替换。\n\tfmt.Printf(\"strings.Replace(str, \\\"o\\\", \\\"O\\\", -1): %v\\n\", strings.Replace(str, \"o\", \"O\", -1))\n\n\t// 把s字符串按照sep分割，返回slice。\n\tfmt.Printf(\"strings.Split(str, sep): %v\\n\", strings.Split(str, sep))\n\n\t// 在s字符串中去除cutset指定的字符串。\n\tfmt.Printf(\"strings.Trim(str, sep): %v\\n\", strings.Trim(str, sep))\n\n\t// 去除s字符串的空格符，并且按照空格分割返回slice。\n\tfmt.Printf(\"strings.Fields(\\\"abc cdd pdd\\\"): %v\\n\", strings.Fields(\"abc cdd pdd\"))\n}\n```\n\n### 2.字符串转换\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\t// Append系列函数将其他类型转换成字符串后，添加到现有的字节数组中\n\tstr := make([]byte, 0, 100)\n\tfmt.Printf(\"strconv.AppendInt(str, 4567, 10): %v\\n\", strconv.AppendInt(str, 4567, 10))\n\tfmt.Printf(\"strconv.AppendBool(str, true): %v\\n\", strconv.AppendBool(str, true))\n\tfmt.Printf(\"strconv.AppendQuote(str, \\\"mebaron\\\"): %v\\n\", strconv.AppendQuote(str, \"mebaron\"))\n\tfmt.Printf(\"strconv.AppendQuoteRune(str, '龙'): %v\\n\", strconv.AppendQuoteRune(str, '龙'))\n\n\t// Format系列函数把其他类型转换成字符串\n\tfmt.Printf(\"strconv.FormatBool(false): %v\\n\", strconv.FormatBool(false))\n\tfmt.Printf(\"strconv.FormatFloat(100.23, 'g', 12, 64): %v\\n\", strconv.FormatFloat(100.23, 'g', 12, 64))\n\tfmt.Printf(\"strconv.FormatInt(1314, 10): %v\\n\", strconv.FormatInt(1314, 10))\n\tfmt.Printf(\"strconv.FormatUint(1523, 10): %v\\n\", strconv.FormatUint(1523, 10))\n\tfmt.Printf(\"strconv.Itoa(1024): %v\\n\", strconv.Itoa(1024))\n\n\t// Parse系列函数把字符串转换成其他类型\n\tfmt.Println(strconv.ParseBool(\"true\"))\n\tfmt.Println(strconv.ParseFloat(\"12.234\", 64))\n\tfmt.Println(strconv.ParseInt(\"123456\", 10, 64))\n\tfmt.Println(strconv.ParseUint(\"13520\", 10, 64))\n\tfmt.Println(strconv.Atoi(\"12345\"))\n}\n```\n\n","source":"_posts/24.go字符串处理.md","raw":"---\ntitle: go字符串处理\ntype: tags\ndate: 2023-12-29 10:25:41\ntags:\n- go\n- strings\ncategories:\n- 学习笔记\n---\n\n## go字符串处理\n\n### 1.字符串操作\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nvar (\n\tstrs []string = []string{\"hello\", \"world\", \"mebaron\", \"123654789963852741\"}\n\tstr  string   = \"akhuiabjka1563afadf74a3ssf55sfa44a\"\n\tsep  string   = \"a\"\n)\n\nfunc main() {\n\t// 判断s中是否包含substr。\n\tfmt.Printf(\"strings.Contains(str, sep): %v\\n\", strings.Contains(str, sep))\n\n\t// 字符串连接，把slice a通过sep连接起来。\n\tfmt.Printf(\"strings.Join(strs, \\\",\\\"): %v\\n\", strings.Join(strs, \",\"))\n\n\t// 在字符串s中查找sep所在的位置，返回位置值，找不到返回-1。\n\tfmt.Printf(\"strings.Index(str, sep): %v\\n\", strings.Index(str, sep))\n\n\t// 重复s字符串count次，最后返回重复的字符串。\n\tfmt.Printf(\"strings.Repeat(str, 2): %v\\n\", strings.Repeat(str, 2))\n\n\t// 在s字符串中，把old字符串替换为new字符串，n表示替换次数，n<0表示全部替换。\n\tfmt.Printf(\"strings.Replace(str, \\\"o\\\", \\\"O\\\", -1): %v\\n\", strings.Replace(str, \"o\", \"O\", -1))\n\n\t// 把s字符串按照sep分割，返回slice。\n\tfmt.Printf(\"strings.Split(str, sep): %v\\n\", strings.Split(str, sep))\n\n\t// 在s字符串中去除cutset指定的字符串。\n\tfmt.Printf(\"strings.Trim(str, sep): %v\\n\", strings.Trim(str, sep))\n\n\t// 去除s字符串的空格符，并且按照空格分割返回slice。\n\tfmt.Printf(\"strings.Fields(\\\"abc cdd pdd\\\"): %v\\n\", strings.Fields(\"abc cdd pdd\"))\n}\n```\n\n### 2.字符串转换\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\t// Append系列函数将其他类型转换成字符串后，添加到现有的字节数组中\n\tstr := make([]byte, 0, 100)\n\tfmt.Printf(\"strconv.AppendInt(str, 4567, 10): %v\\n\", strconv.AppendInt(str, 4567, 10))\n\tfmt.Printf(\"strconv.AppendBool(str, true): %v\\n\", strconv.AppendBool(str, true))\n\tfmt.Printf(\"strconv.AppendQuote(str, \\\"mebaron\\\"): %v\\n\", strconv.AppendQuote(str, \"mebaron\"))\n\tfmt.Printf(\"strconv.AppendQuoteRune(str, '龙'): %v\\n\", strconv.AppendQuoteRune(str, '龙'))\n\n\t// Format系列函数把其他类型转换成字符串\n\tfmt.Printf(\"strconv.FormatBool(false): %v\\n\", strconv.FormatBool(false))\n\tfmt.Printf(\"strconv.FormatFloat(100.23, 'g', 12, 64): %v\\n\", strconv.FormatFloat(100.23, 'g', 12, 64))\n\tfmt.Printf(\"strconv.FormatInt(1314, 10): %v\\n\", strconv.FormatInt(1314, 10))\n\tfmt.Printf(\"strconv.FormatUint(1523, 10): %v\\n\", strconv.FormatUint(1523, 10))\n\tfmt.Printf(\"strconv.Itoa(1024): %v\\n\", strconv.Itoa(1024))\n\n\t// Parse系列函数把字符串转换成其他类型\n\tfmt.Println(strconv.ParseBool(\"true\"))\n\tfmt.Println(strconv.ParseFloat(\"12.234\", 64))\n\tfmt.Println(strconv.ParseInt(\"123456\", 10, 64))\n\tfmt.Println(strconv.ParseUint(\"13520\", 10, 64))\n\tfmt.Println(strconv.Atoi(\"12345\"))\n}\n```\n\n","slug":"24.go字符串处理","published":1,"updated":"2024-01-06T00:23:27.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dn00190cfvak61hyzt","content":"<h2 id=\"go字符串处理\"><a href=\"#go字符串处理\" class=\"headerlink\" title=\"go字符串处理\"></a>go字符串处理</h2><h3 id=\"1-字符串操作\"><a href=\"#1-字符串操作\" class=\"headerlink\" title=\"1.字符串操作\"></a>1.字符串操作</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tstrs []<span class=\"type\">string</span> = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>, <span class=\"string\">&quot;mebaron&quot;</span>, <span class=\"string\">&quot;123654789963852741&quot;</span>&#125;</span><br><span class=\"line\">\tstr  <span class=\"type\">string</span>   = <span class=\"string\">&quot;akhuiabjka1563afadf74a3ssf55sfa44a&quot;</span></span><br><span class=\"line\">\tsep  <span class=\"type\">string</span>   = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断s中是否包含substr。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Contains(str, sep): %v\\n&quot;</span>, strings.Contains(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 字符串连接，把slice a通过sep连接起来。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Join(strs, \\&quot;,\\&quot;): %v\\n&quot;</span>, strings.Join(strs, <span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在字符串s中查找sep所在的位置，返回位置值，找不到返回-1。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Index(str, sep): %v\\n&quot;</span>, strings.Index(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重复s字符串count次，最后返回重复的字符串。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Repeat(str, 2): %v\\n&quot;</span>, strings.Repeat(str, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在s字符串中，把old字符串替换为new字符串，n表示替换次数，n&lt;0表示全部替换。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Replace(str, \\&quot;o\\&quot;, \\&quot;O\\&quot;, -1): %v\\n&quot;</span>, strings.Replace(str, <span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;O&quot;</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 把s字符串按照sep分割，返回slice。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Split(str, sep): %v\\n&quot;</span>, strings.Split(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在s字符串中去除cutset指定的字符串。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Trim(str, sep): %v\\n&quot;</span>, strings.Trim(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 去除s字符串的空格符，并且按照空格分割返回slice。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Fields(\\&quot;abc cdd pdd\\&quot;): %v\\n&quot;</span>, strings.Fields(<span class=\"string\">&quot;abc cdd pdd&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-字符串转换\"><a href=\"#2-字符串转换\" class=\"headerlink\" title=\"2.字符串转换\"></a>2.字符串转换</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Append系列函数将其他类型转换成字符串后，添加到现有的字节数组中</span></span><br><span class=\"line\">\tstr := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendInt(str, 4567, 10): %v\\n&quot;</span>, strconv.AppendInt(str, <span class=\"number\">4567</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendBool(str, true): %v\\n&quot;</span>, strconv.AppendBool(str, <span class=\"literal\">true</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendQuote(str, \\&quot;mebaron\\&quot;): %v\\n&quot;</span>, strconv.AppendQuote(str, <span class=\"string\">&quot;mebaron&quot;</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendQuoteRune(str, &#x27;龙&#x27;): %v\\n&quot;</span>, strconv.AppendQuoteRune(str, <span class=\"string\">&#x27;龙&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Format系列函数把其他类型转换成字符串</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatBool(false): %v\\n&quot;</span>, strconv.FormatBool(<span class=\"literal\">false</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatFloat(100.23, &#x27;g&#x27;, 12, 64): %v\\n&quot;</span>, strconv.FormatFloat(<span class=\"number\">100.23</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"number\">12</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatInt(1314, 10): %v\\n&quot;</span>, strconv.FormatInt(<span class=\"number\">1314</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatUint(1523, 10): %v\\n&quot;</span>, strconv.FormatUint(<span class=\"number\">1523</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.Itoa(1024): %v\\n&quot;</span>, strconv.Itoa(<span class=\"number\">1024</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Parse系列函数把字符串转换成其他类型</span></span><br><span class=\"line\">\tfmt.Println(strconv.ParseBool(<span class=\"string\">&quot;true&quot;</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.ParseFloat(<span class=\"string\">&quot;12.234&quot;</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.ParseInt(<span class=\"string\">&quot;123456&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.ParseUint(<span class=\"string\">&quot;13520&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.Atoi(<span class=\"string\">&quot;12345&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover04.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go字符串处理\"><a href=\"#go字符串处理\" class=\"headerlink\" title=\"go字符串处理\"></a>go字符串处理</h2><h3 id=\"1-字符串操作\"><a href=\"#1-字符串操作\" class=\"headerlink\" title=\"1.字符串操作\"></a>1.字符串操作</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tstrs []<span class=\"type\">string</span> = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>, <span class=\"string\">&quot;mebaron&quot;</span>, <span class=\"string\">&quot;123654789963852741&quot;</span>&#125;</span><br><span class=\"line\">\tstr  <span class=\"type\">string</span>   = <span class=\"string\">&quot;akhuiabjka1563afadf74a3ssf55sfa44a&quot;</span></span><br><span class=\"line\">\tsep  <span class=\"type\">string</span>   = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 判断s中是否包含substr。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Contains(str, sep): %v\\n&quot;</span>, strings.Contains(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 字符串连接，把slice a通过sep连接起来。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Join(strs, \\&quot;,\\&quot;): %v\\n&quot;</span>, strings.Join(strs, <span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在字符串s中查找sep所在的位置，返回位置值，找不到返回-1。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Index(str, sep): %v\\n&quot;</span>, strings.Index(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重复s字符串count次，最后返回重复的字符串。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Repeat(str, 2): %v\\n&quot;</span>, strings.Repeat(str, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在s字符串中，把old字符串替换为new字符串，n表示替换次数，n&lt;0表示全部替换。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Replace(str, \\&quot;o\\&quot;, \\&quot;O\\&quot;, -1): %v\\n&quot;</span>, strings.Replace(str, <span class=\"string\">&quot;o&quot;</span>, <span class=\"string\">&quot;O&quot;</span>, <span class=\"number\">-1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 把s字符串按照sep分割，返回slice。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Split(str, sep): %v\\n&quot;</span>, strings.Split(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 在s字符串中去除cutset指定的字符串。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Trim(str, sep): %v\\n&quot;</span>, strings.Trim(str, sep))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 去除s字符串的空格符，并且按照空格分割返回slice。</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strings.Fields(\\&quot;abc cdd pdd\\&quot;): %v\\n&quot;</span>, strings.Fields(<span class=\"string\">&quot;abc cdd pdd&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-字符串转换\"><a href=\"#2-字符串转换\" class=\"headerlink\" title=\"2.字符串转换\"></a>2.字符串转换</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Append系列函数将其他类型转换成字符串后，添加到现有的字节数组中</span></span><br><span class=\"line\">\tstr := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendInt(str, 4567, 10): %v\\n&quot;</span>, strconv.AppendInt(str, <span class=\"number\">4567</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendBool(str, true): %v\\n&quot;</span>, strconv.AppendBool(str, <span class=\"literal\">true</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendQuote(str, \\&quot;mebaron\\&quot;): %v\\n&quot;</span>, strconv.AppendQuote(str, <span class=\"string\">&quot;mebaron&quot;</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.AppendQuoteRune(str, &#x27;龙&#x27;): %v\\n&quot;</span>, strconv.AppendQuoteRune(str, <span class=\"string\">&#x27;龙&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Format系列函数把其他类型转换成字符串</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatBool(false): %v\\n&quot;</span>, strconv.FormatBool(<span class=\"literal\">false</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatFloat(100.23, &#x27;g&#x27;, 12, 64): %v\\n&quot;</span>, strconv.FormatFloat(<span class=\"number\">100.23</span>, <span class=\"string\">&#x27;g&#x27;</span>, <span class=\"number\">12</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatInt(1314, 10): %v\\n&quot;</span>, strconv.FormatInt(<span class=\"number\">1314</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.FormatUint(1523, 10): %v\\n&quot;</span>, strconv.FormatUint(<span class=\"number\">1523</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;strconv.Itoa(1024): %v\\n&quot;</span>, strconv.Itoa(<span class=\"number\">1024</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Parse系列函数把字符串转换成其他类型</span></span><br><span class=\"line\">\tfmt.Println(strconv.ParseBool(<span class=\"string\">&quot;true&quot;</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.ParseFloat(<span class=\"string\">&quot;12.234&quot;</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.ParseInt(<span class=\"string\">&quot;123456&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.ParseUint(<span class=\"string\">&quot;13520&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>))</span><br><span class=\"line\">\tfmt.Println(strconv.Atoi(<span class=\"string\">&quot;12345&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go-Socket编程","type":"tags","date":"2023-12-29T03:26:01.000Z","_content":"\n## go-Socket编程\n\n### 1.什么是Socket\n\nsocket起源于Unix，而Unix基本哲学之一就是“一切皆文件”，都是可以用“打开open -->读写write/read-->关闭close”模式来操作。socket就是该模式的一个实现，套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。\n\n常用的socket类型有两种：流式Socket（sock_stream）和数据报式Socket（sock_drgam）。流式是一种面向连接的socket，针对于面向连接的TCP服务；数据报式socket是一种无连接的socket，对应于无连接的UDP服务应用。\n\n### 2.TCP Socket\n\n#### 2.1.TCP Client\n\n```go\npackage client\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\t// 校验服务器地址\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp4\", \"127.0.0.1:8080\")\n\n\t// 连接服务器\n\tconn, _ := net.DialTCP(\"tcp\", nil, tcpAddr)\n\n\t// 向服务器写数据\n\tconn.Write([]byte(\"ping\"))\n\n\t// 接收服务器返回的数据\n\tres, _ := io.ReadAll(conn)\n\tfmt.Printf(\"res: %v\\n\", res)\n}\n```\n\n#### 2.2.TCP Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\t// 校验地址\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp4\", \"127.0.0.1:8080\")\n\n\t// 启动服务，监听对应端口\n\tlistener, _ := net.ListenTCP(\"tcp\", tcpAddr)\n\n\t// 接收并处理客户端发送的数据，并返回数据\n\tfor {\n\t\tconn, _ := listener.Accept()\n\t\tgo handleConn(conn)\n\t}\n}\n\nfunc handleConn(conn net.Conn) {\n\t// 读取客户端发送的数据\n\tdata := make([]byte, 1024)\n\tn, err := conn.Read(data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"data: %v\\n\", string(data[:n]))\n\n\t// 向客户端发送数据\n\tconn.Write([]byte(\"pong\"))\n\n\tconn.Close()\n}\n```\n\n### 3.UDP Socket\n\n#### 3.1.UDP Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nfunc main() {\n\t// 校验服务器地址\n\tudpAddr, _ := net.ResolveUDPAddr(\"udp4\", \"127.0.0.1:8080\")\n\n\t// 连接服务器\n\tconn, _ := net.DialUDP(\"udp\", nil, udpAddr)\n\tfor {\n\t\ttime.Sleep(time.Second * 2)\n\t\t// 向服务器写数据\n\t\tconn.Write([]byte(\"ping\"))\n\n\t\t// 接收服务器返回的数据\n\t\tdata := make([]byte, 1024)\n\t\tconn.Read(data)\n\t\tfmt.Printf(\"res: %v\\n\", string(data))\n\t}\n}\n```\n\n#### 3.2.UDP Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\t// 校验地址\n\tudpAddr, _ := net.ResolveUDPAddr(\"udp4\", \"127.0.0.1:8080\")\n\n\t// 启动服务，监听对应端口\n\tconn, _ := net.ListenUDP(\"udp\", udpAddr)\n\n\t// 接收并处理客户端发送的数据，并返回数据\n\tfor {\n\t\thandleUDPConn(conn)\n\t}\n}\n\nfunc handleUDPConn(conn *net.UDPConn) {\n\t// 读取客户端发送的数据\n\tdata := make([]byte, 1024)\n\tn, udpAddr, err := conn.ReadFromUDP(data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"data: %v\\n\", string(data[:n]))\n\n\t// 向客户端发送数据\n\tconn.WriteToUDP([]byte(\"pong\"), udpAddr)\n}\n```\n\n","source":"_posts/25.go-Socket编程.md","raw":"---\ntitle: go-Socket编程\ntype: tags\ndate: 2023-12-29 11:26:01\ntags:\n- go\n- socket\ncategories:\n- 学习笔记\n---\n\n## go-Socket编程\n\n### 1.什么是Socket\n\nsocket起源于Unix，而Unix基本哲学之一就是“一切皆文件”，都是可以用“打开open -->读写write/read-->关闭close”模式来操作。socket就是该模式的一个实现，套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。\n\n常用的socket类型有两种：流式Socket（sock_stream）和数据报式Socket（sock_drgam）。流式是一种面向连接的socket，针对于面向连接的TCP服务；数据报式socket是一种无连接的socket，对应于无连接的UDP服务应用。\n\n### 2.TCP Socket\n\n#### 2.1.TCP Client\n\n```go\npackage client\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\n\nfunc main() {\n\t// 校验服务器地址\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp4\", \"127.0.0.1:8080\")\n\n\t// 连接服务器\n\tconn, _ := net.DialTCP(\"tcp\", nil, tcpAddr)\n\n\t// 向服务器写数据\n\tconn.Write([]byte(\"ping\"))\n\n\t// 接收服务器返回的数据\n\tres, _ := io.ReadAll(conn)\n\tfmt.Printf(\"res: %v\\n\", res)\n}\n```\n\n#### 2.2.TCP Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\t// 校验地址\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp4\", \"127.0.0.1:8080\")\n\n\t// 启动服务，监听对应端口\n\tlistener, _ := net.ListenTCP(\"tcp\", tcpAddr)\n\n\t// 接收并处理客户端发送的数据，并返回数据\n\tfor {\n\t\tconn, _ := listener.Accept()\n\t\tgo handleConn(conn)\n\t}\n}\n\nfunc handleConn(conn net.Conn) {\n\t// 读取客户端发送的数据\n\tdata := make([]byte, 1024)\n\tn, err := conn.Read(data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"data: %v\\n\", string(data[:n]))\n\n\t// 向客户端发送数据\n\tconn.Write([]byte(\"pong\"))\n\n\tconn.Close()\n}\n```\n\n### 3.UDP Socket\n\n#### 3.1.UDP Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nfunc main() {\n\t// 校验服务器地址\n\tudpAddr, _ := net.ResolveUDPAddr(\"udp4\", \"127.0.0.1:8080\")\n\n\t// 连接服务器\n\tconn, _ := net.DialUDP(\"udp\", nil, udpAddr)\n\tfor {\n\t\ttime.Sleep(time.Second * 2)\n\t\t// 向服务器写数据\n\t\tconn.Write([]byte(\"ping\"))\n\n\t\t// 接收服务器返回的数据\n\t\tdata := make([]byte, 1024)\n\t\tconn.Read(data)\n\t\tfmt.Printf(\"res: %v\\n\", string(data))\n\t}\n}\n```\n\n#### 3.2.UDP Server\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n)\n\nfunc main() {\n\t// 校验地址\n\tudpAddr, _ := net.ResolveUDPAddr(\"udp4\", \"127.0.0.1:8080\")\n\n\t// 启动服务，监听对应端口\n\tconn, _ := net.ListenUDP(\"udp\", udpAddr)\n\n\t// 接收并处理客户端发送的数据，并返回数据\n\tfor {\n\t\thandleUDPConn(conn)\n\t}\n}\n\nfunc handleUDPConn(conn *net.UDPConn) {\n\t// 读取客户端发送的数据\n\tdata := make([]byte, 1024)\n\tn, udpAddr, err := conn.ReadFromUDP(data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"data: %v\\n\", string(data[:n]))\n\n\t// 向客户端发送数据\n\tconn.WriteToUDP([]byte(\"pong\"), udpAddr)\n}\n```\n\n","slug":"25.go-Socket编程","published":1,"updated":"2024-01-06T00:23:31.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1do001b0cfvgc9nd7nv","content":"<h2 id=\"go-Socket编程\"><a href=\"#go-Socket编程\" class=\"headerlink\" title=\"go-Socket编程\"></a>go-Socket编程</h2><h3 id=\"1-什么是Socket\"><a href=\"#1-什么是Socket\" class=\"headerlink\" title=\"1.什么是Socket\"></a>1.什么是Socket</h3><p>socket起源于Unix，而Unix基本哲学之一就是“一切皆文件”，都是可以用“打开open –&gt;读写write/read–&gt;关闭close”模式来操作。socket就是该模式的一个实现，套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。</p>\n<p>常用的socket类型有两种：流式Socket（sock_stream）和数据报式Socket（sock_drgam）。流式是一种面向连接的socket，针对于面向连接的TCP服务；数据报式socket是一种无连接的socket，对应于无连接的UDP服务应用。</p>\n<h3 id=\"2-TCP-Socket\"><a href=\"#2-TCP-Socket\" class=\"headerlink\" title=\"2.TCP Socket\"></a>2.TCP Socket</h3><h4 id=\"2-1-TCP-Client\"><a href=\"#2-1-TCP-Client\" class=\"headerlink\" title=\"2.1.TCP Client\"></a>2.1.TCP Client</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验服务器地址</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, _ := net.DialTCP(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"literal\">nil</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 向服务器写数据</span></span><br><span class=\"line\">\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;ping&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收服务器返回的数据</span></span><br><span class=\"line\">\tres, _ := io.ReadAll(conn)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;res: %v\\n&quot;</span>, res)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-TCP-Server\"><a href=\"#2-2-TCP-Server\" class=\"headerlink\" title=\"2.2.TCP Server\"></a>2.2.TCP Server</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验地址</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动服务，监听对应端口</span></span><br><span class=\"line\">\tlistener, _ := net.ListenTCP(<span class=\"string\">&quot;tcp&quot;</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收并处理客户端发送的数据，并返回数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, _ := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> handleConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleConn</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取客户端发送的数据</span></span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\tn, err := conn.Read(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;data: %v\\n&quot;</span>, <span class=\"type\">string</span>(data[:n]))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 向客户端发送数据</span></span><br><span class=\"line\">\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;pong&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-UDP-Socket\"><a href=\"#3-UDP-Socket\" class=\"headerlink\" title=\"3.UDP Socket\"></a>3.UDP Socket</h3><h4 id=\"3-1-UDP-Client\"><a href=\"#3-1-UDP-Client\" class=\"headerlink\" title=\"3.1.UDP Client\"></a>3.1.UDP Client</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验服务器地址</span></span><br><span class=\"line\">\tudpAddr, _ := net.ResolveUDPAddr(<span class=\"string\">&quot;udp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, _ := net.DialUDP(<span class=\"string\">&quot;udp&quot;</span>, <span class=\"literal\">nil</span>, udpAddr)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 向服务器写数据</span></span><br><span class=\"line\">\t\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;ping&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 接收服务器返回的数据</span></span><br><span class=\"line\">\t\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\tconn.Read(data)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;res: %v\\n&quot;</span>, <span class=\"type\">string</span>(data))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-UDP-Server\"><a href=\"#3-2-UDP-Server\" class=\"headerlink\" title=\"3.2.UDP Server\"></a>3.2.UDP Server</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验地址</span></span><br><span class=\"line\">\tudpAddr, _ := net.ResolveUDPAddr(<span class=\"string\">&quot;udp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动服务，监听对应端口</span></span><br><span class=\"line\">\tconn, _ := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, udpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收并处理客户端发送的数据，并返回数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\thandleUDPConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleUDPConn</span><span class=\"params\">(conn *net.UDPConn)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取客户端发送的数据</span></span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\tn, udpAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;data: %v\\n&quot;</span>, <span class=\"type\">string</span>(data[:n]))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 向客户端发送数据</span></span><br><span class=\"line\">\tconn.WriteToUDP([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;pong&quot;</span>), udpAddr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover06.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go-Socket编程\"><a href=\"#go-Socket编程\" class=\"headerlink\" title=\"go-Socket编程\"></a>go-Socket编程</h2><h3 id=\"1-什么是Socket\"><a href=\"#1-什么是Socket\" class=\"headerlink\" title=\"1.什么是Socket\"></a>1.什么是Socket</h3><p>socket起源于Unix，而Unix基本哲学之一就是“一切皆文件”，都是可以用“打开open –&gt;读写write/read–&gt;关闭close”模式来操作。socket就是该模式的一个实现，套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。</p>\n<p>常用的socket类型有两种：流式Socket（sock_stream）和数据报式Socket（sock_drgam）。流式是一种面向连接的socket，针对于面向连接的TCP服务；数据报式socket是一种无连接的socket，对应于无连接的UDP服务应用。</p>\n<h3 id=\"2-TCP-Socket\"><a href=\"#2-TCP-Socket\" class=\"headerlink\" title=\"2.TCP Socket\"></a>2.TCP Socket</h3><h4 id=\"2-1-TCP-Client\"><a href=\"#2-1-TCP-Client\" class=\"headerlink\" title=\"2.1.TCP Client\"></a>2.1.TCP Client</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验服务器地址</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, _ := net.DialTCP(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"literal\">nil</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 向服务器写数据</span></span><br><span class=\"line\">\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;ping&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收服务器返回的数据</span></span><br><span class=\"line\">\tres, _ := io.ReadAll(conn)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;res: %v\\n&quot;</span>, res)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-TCP-Server\"><a href=\"#2-2-TCP-Server\" class=\"headerlink\" title=\"2.2.TCP Server\"></a>2.2.TCP Server</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验地址</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动服务，监听对应端口</span></span><br><span class=\"line\">\tlistener, _ := net.ListenTCP(<span class=\"string\">&quot;tcp&quot;</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收并处理客户端发送的数据，并返回数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, _ := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> handleConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleConn</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取客户端发送的数据</span></span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\tn, err := conn.Read(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;data: %v\\n&quot;</span>, <span class=\"type\">string</span>(data[:n]))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 向客户端发送数据</span></span><br><span class=\"line\">\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;pong&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tconn.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-UDP-Socket\"><a href=\"#3-UDP-Socket\" class=\"headerlink\" title=\"3.UDP Socket\"></a>3.UDP Socket</h3><h4 id=\"3-1-UDP-Client\"><a href=\"#3-1-UDP-Client\" class=\"headerlink\" title=\"3.1.UDP Client\"></a>3.1.UDP Client</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验服务器地址</span></span><br><span class=\"line\">\tudpAddr, _ := net.ResolveUDPAddr(<span class=\"string\">&quot;udp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 连接服务器</span></span><br><span class=\"line\">\tconn, _ := net.DialUDP(<span class=\"string\">&quot;udp&quot;</span>, <span class=\"literal\">nil</span>, udpAddr)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 向服务器写数据</span></span><br><span class=\"line\">\t\tconn.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;ping&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 接收服务器返回的数据</span></span><br><span class=\"line\">\t\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\t\tconn.Read(data)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;res: %v\\n&quot;</span>, <span class=\"type\">string</span>(data))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-UDP-Server\"><a href=\"#3-2-UDP-Server\" class=\"headerlink\" title=\"3.2.UDP Server\"></a>3.2.UDP Server</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 校验地址</span></span><br><span class=\"line\">\tudpAddr, _ := net.ResolveUDPAddr(<span class=\"string\">&quot;udp4&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动服务，监听对应端口</span></span><br><span class=\"line\">\tconn, _ := net.ListenUDP(<span class=\"string\">&quot;udp&quot;</span>, udpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 接收并处理客户端发送的数据，并返回数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\thandleUDPConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleUDPConn</span><span class=\"params\">(conn *net.UDPConn)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 读取客户端发送的数据</span></span><br><span class=\"line\">\tdata := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">1024</span>)</span><br><span class=\"line\">\tn, udpAddr, err := conn.ReadFromUDP(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;data: %v\\n&quot;</span>, <span class=\"type\">string</span>(data[:n]))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 向客户端发送数据</span></span><br><span class=\"line\">\tconn.WriteToUDP([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;pong&quot;</span>), udpAddr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go-WebSocket编程","type":"tags","date":"2023-12-30T09:29:21.000Z","_content":"\n## go-WebSocket编程\n\nWebSocket是HTML5的重要特性，它实现了基于浏览器的远程socket，它使浏览器和服务器可以进行全双工通信。\n\n在WebSocket出发之前，为了实现及时通信，采用的技术都是“轮询”，即在特定的时间间隔内，由浏览器对服务器发出HTTP Request，服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询”使得浏览器需要对服务器不断发出请求，这样会占用大量的带宽。\n\nWebSocket采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态，可以使用JavaScript来向连接写入或从中接收数据。相比传统的HTTP有如下好处：\n\n- 一个Web客户端只建立一个TCP连接\n- WebSocket服务端可以推送数据到web客户端\n- 有更加轻量级的头，减少数据传输量\n\n### 1.WebSocket客户端\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <h1>Websocket Test</h1>\n    <form>\n        <p>\n            message: <input type=\"text\" id=\"message\" value=\"hello world!\">\n        </p>\n    </form>\n    <button onclick=\"send();\">Send Message</button>\n</body>\n<script type=\"text/javascript\">\n    var sock = null;\n    var wsuri = \"ws://127.0.0.1:8080\";\n\n    window.onload = function () {\n        console.log(\"onload\");\n        sock = new WebSocket(wsuri);\n\n        sock.onopen = function () {\n            console.log(\"connected to \" + wsuri)\n        };\n\n        sock.onclose = function (e) {\n            console.log(\"connection closed (\" + e.code + \")\")\n        };\n\n        sock.onmessage = function (e) {\n            console.log(\"message received: \" + e.data)\n        };\n    };\n\n    function send() {\n        var msg = document.getElementById('message').value;\n        sock.send(msg)\n    }\n</script>\n\n</html>\n```\n\n### 2.WebSocket服务端\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\t// 注册路由并启动服务\n\thttp.HandleFunc(\"/\", handleWS)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\t// 处理跨域问题，这里不做任何处理，直接返回true\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handleWS(w http.ResponseWriter, r *http.Request) {\n\t// 将http请求升级为WebSocket请求\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\t// 处理请求\n\tfor {\n\t\t// 从连接中读取数据\n\t\tmessageType, data, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\treturn\n\t\t}\n\n\t\t// 向连接中发送数据\n\t\tresp := []byte(\"recive data, and the data is \" + string(data))\n\t\terr = conn.WriteMessage(messageType, resp)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n","source":"_posts/26.go-WebSocket编程.md","raw":"---\ntitle: go-WebSocket编程\ntype: tags\ndate: 2023-12-30 17:29:21\ntags:\n- websocket\n- go\ncategories:\n- 学习笔记\n---\n\n## go-WebSocket编程\n\nWebSocket是HTML5的重要特性，它实现了基于浏览器的远程socket，它使浏览器和服务器可以进行全双工通信。\n\n在WebSocket出发之前，为了实现及时通信，采用的技术都是“轮询”，即在特定的时间间隔内，由浏览器对服务器发出HTTP Request，服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询”使得浏览器需要对服务器不断发出请求，这样会占用大量的带宽。\n\nWebSocket采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态，可以使用JavaScript来向连接写入或从中接收数据。相比传统的HTTP有如下好处：\n\n- 一个Web客户端只建立一个TCP连接\n- WebSocket服务端可以推送数据到web客户端\n- 有更加轻量级的头，减少数据传输量\n\n### 1.WebSocket客户端\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <h1>Websocket Test</h1>\n    <form>\n        <p>\n            message: <input type=\"text\" id=\"message\" value=\"hello world!\">\n        </p>\n    </form>\n    <button onclick=\"send();\">Send Message</button>\n</body>\n<script type=\"text/javascript\">\n    var sock = null;\n    var wsuri = \"ws://127.0.0.1:8080\";\n\n    window.onload = function () {\n        console.log(\"onload\");\n        sock = new WebSocket(wsuri);\n\n        sock.onopen = function () {\n            console.log(\"connected to \" + wsuri)\n        };\n\n        sock.onclose = function (e) {\n            console.log(\"connection closed (\" + e.code + \")\")\n        };\n\n        sock.onmessage = function (e) {\n            console.log(\"message received: \" + e.data)\n        };\n    };\n\n    function send() {\n        var msg = document.getElementById('message').value;\n        sock.send(msg)\n    }\n</script>\n\n</html>\n```\n\n### 2.WebSocket服务端\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\t// 注册路由并启动服务\n\thttp.HandleFunc(\"/\", handleWS)\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\t// 处理跨域问题，这里不做任何处理，直接返回true\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc handleWS(w http.ResponseWriter, r *http.Request) {\n\t// 将http请求升级为WebSocket请求\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n\n\t// 处理请求\n\tfor {\n\t\t// 从连接中读取数据\n\t\tmessageType, data, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\treturn\n\t\t}\n\n\t\t// 向连接中发送数据\n\t\tresp := []byte(\"recive data, and the data is \" + string(data))\n\t\terr = conn.WriteMessage(messageType, resp)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n","slug":"26.go-WebSocket编程","published":1,"updated":"2024-01-06T00:23:36.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dp001e0cfvfnch7umx","content":"<h2 id=\"go-WebSocket编程\"><a href=\"#go-WebSocket编程\" class=\"headerlink\" title=\"go-WebSocket编程\"></a>go-WebSocket编程</h2><p>WebSocket是HTML5的重要特性，它实现了基于浏览器的远程socket，它使浏览器和服务器可以进行全双工通信。</p>\n<p>在WebSocket出发之前，为了实现及时通信，采用的技术都是“轮询”，即在特定的时间间隔内，由浏览器对服务器发出HTTP Request，服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询”使得浏览器需要对服务器不断发出请求，这样会占用大量的带宽。</p>\n<p>WebSocket采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态，可以使用JavaScript来向连接写入或从中接收数据。相比传统的HTTP有如下好处：</p>\n<ul>\n<li>一个Web客户端只建立一个TCP连接</li>\n<li>WebSocket服务端可以推送数据到web客户端</li>\n<li>有更加轻量级的头，减少数据传输量</li>\n</ul>\n<h3 id=\"1-WebSocket客户端\"><a href=\"#1-WebSocket客户端\" class=\"headerlink\" title=\"1.WebSocket客户端\"></a>1.WebSocket客户端</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Websocket Test<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            message: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hello world!&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;send();&quot;</span>&gt;</span>Send Message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> sock = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> wsuri = <span class=\"string\">&quot;ws://127.0.0.1:8080&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;onload&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(wsuri);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;connected to &quot;</span> + wsuri)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;connection closed (&quot;</span> + e.<span class=\"property\">code</span> + <span class=\"string\">&quot;)&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;message received: &quot;</span> + e.<span class=\"property\">data</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">send</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> msg = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;message&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"title function_\">send</span>(msg)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-WebSocket服务端\"><a href=\"#2-WebSocket服务端\" class=\"headerlink\" title=\"2.WebSocket服务端\"></a>2.WebSocket服务端</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注册路由并启动服务</span></span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, handleWS)</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> upgrader = websocket.Upgrader&#123;</span><br><span class=\"line\">\tReadBufferSize:  <span class=\"number\">1024</span>,</span><br><span class=\"line\">\tWriteBufferSize: <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 处理跨域问题，这里不做任何处理，直接返回true</span></span><br><span class=\"line\">\tCheckOrigin: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r *http.Request)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleWS</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将http请求升级为WebSocket请求</span></span><br><span class=\"line\">\tconn, err := upgrader.Upgrade(w, r, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 从连接中读取数据</span></span><br><span class=\"line\">\t\tmessageType, data, err := conn.ReadMessage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 向连接中发送数据</span></span><br><span class=\"line\">\t\tresp := []<span class=\"type\">byte</span>(<span class=\"string\">&quot;recive data, and the data is &quot;</span> + <span class=\"type\">string</span>(data))</span><br><span class=\"line\">\t\terr = conn.WriteMessage(messageType, resp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover12.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go-WebSocket编程\"><a href=\"#go-WebSocket编程\" class=\"headerlink\" title=\"go-WebSocket编程\"></a>go-WebSocket编程</h2><p>WebSocket是HTML5的重要特性，它实现了基于浏览器的远程socket，它使浏览器和服务器可以进行全双工通信。</p>\n<p>在WebSocket出发之前，为了实现及时通信，采用的技术都是“轮询”，即在特定的时间间隔内，由浏览器对服务器发出HTTP Request，服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询”使得浏览器需要对服务器不断发出请求，这样会占用大量的带宽。</p>\n<p>WebSocket采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态，可以使用JavaScript来向连接写入或从中接收数据。相比传统的HTTP有如下好处：</p>\n<ul>\n<li>一个Web客户端只建立一个TCP连接</li>\n<li>WebSocket服务端可以推送数据到web客户端</li>\n<li>有更加轻量级的头，减少数据传输量</li>\n</ul>\n<h3 id=\"1-WebSocket客户端\"><a href=\"#1-WebSocket客户端\" class=\"headerlink\" title=\"1.WebSocket客户端\"></a>1.WebSocket客户端</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Websocket Test<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            message: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hello world!&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;send();&quot;</span>&gt;</span>Send Message<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> sock = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> wsuri = <span class=\"string\">&quot;ws://127.0.0.1:8080&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;onload&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(wsuri);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;connected to &quot;</span> + wsuri)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;connection closed (&quot;</span> + e.<span class=\"property\">code</span> + <span class=\"string\">&quot;)&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;message received: &quot;</span> + e.<span class=\"property\">data</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">send</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> msg = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;message&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        sock.<span class=\"title function_\">send</span>(msg)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-WebSocket服务端\"><a href=\"#2-WebSocket服务端\" class=\"headerlink\" title=\"2.WebSocket服务端\"></a>2.WebSocket服务端</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注册路由并启动服务</span></span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, handleWS)</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> upgrader = websocket.Upgrader&#123;</span><br><span class=\"line\">\tReadBufferSize:  <span class=\"number\">1024</span>,</span><br><span class=\"line\">\tWriteBufferSize: <span class=\"number\">1024</span>,</span><br><span class=\"line\">\t<span class=\"comment\">// 处理跨域问题，这里不做任何处理，直接返回true</span></span><br><span class=\"line\">\tCheckOrigin: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r *http.Request)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleWS</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 将http请求升级为WebSocket请求</span></span><br><span class=\"line\">\tconn, err := upgrader.Upgrade(w, r, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 处理请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 从连接中读取数据</span></span><br><span class=\"line\">\t\tmessageType, data, err := conn.ReadMessage()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 向连接中发送数据</span></span><br><span class=\"line\">\t\tresp := []<span class=\"type\">byte</span>(<span class=\"string\">&quot;recive data, and the data is &quot;</span> + <span class=\"type\">string</span>(data))</span><br><span class=\"line\">\t\terr = conn.WriteMessage(messageType, resp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go-rpc编程","type":"tags","date":"2023-12-30T12:26:53.000Z","_content":"\n## go-rpc编程\n\nRPC（remote procedure call protocol）-远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解低层网络技术的协议。它假定某些传输协议的存在，如TCP或UDP，以便为通信程序之间携带信息数据。通过它可以使得函数调用模式网络化。\n\n### 1.RPC工作原理\n\n运行时，一次客户机对服务器的RPC调用，其内部操作大致有如下十步：\n\n1. 调用客户端句柄，执行传送参数\n2. 调用本地系统内核发送网络消息\n3. 消息传送到远程主机\n4. 服务器句柄得到消息并取得参数\n5. 执行远程过程\n6. 执行的过程将结果返回服务器句柄\n7. 服务器句柄返回结果，调用远程系统内核\n8. 消息传回本地主机\n9. 客户句柄由内核接收消息\n10. 客户端接收句柄返回的数据\n\n### 2.go实现RPC调用\n\ngo标准库提供了对RPC的支持，并支持三个级别的RPC：TCP、HTTP、JSONRPC。但是go的rpc包只支持go开发的服务器与客户端之间的交互，因为在内部，他们采用了Gob来编码。\n\ngo rpc的函数只有符合下面的条件才能被远程访问：\n\n1. 函数必须是导出的（首字母大写）\n2. 必须有两个导出类型的参数，第一个参数是接收的参数，第二个参数是返回给客户端的参数，且第二个参数必须是指针类型的\n3. 函数还要有一个返回值error\n\n```go\nfunc (t *T) MethodName(arg1 Arg1Type, arg2 *Arg2Type) error\n```\n\n#### 2.1.HTTP RPC\n\n##### 2.1.1. HTTP RPC Server\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n\tmyMath := new(MyMath)\n    // 注册RPC函数并交给HTTP处理\n\trpc.Register(myMath)\n\trpc.HandleHTTP()\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\ntype MyMath int\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n\nfunc (m *MyMath) Add(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X + arg1.Y\n\targ2.Msg = \"hello world!\"\n\treturn nil\n}\n\nfunc (m *MyMath) Minus(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X - arg1.Y\n\targ2.Msg = \"hello mebaron!\"\n\treturn nil\n}\n```\n\n##### 2.1.2.HTTP RPC Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n    // 连接到rpc服务端\n\tclient, _ := rpc.DialHTTP(\"tcp\", \"127.0.0.1:8080\")\n\n\tquery := Arg1{\n\t\tX: 12,\n\t\tY: 6,\n\t}\n\tres := Arg2{}\n\n    // 远程调用rpc函数\n\tclient.Call(\"MyMath.Add\", query, &res)\n\tfmt.Println(res.Answer, res.Msg)\n\n\tres2 := Arg2{}\n\tclient.Call(\"MyMath.Minus\", query, &res2)\n\tfmt.Println(res2.Answer, res2.Msg)\n}\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n```\n\n### 2.2.TCP RPC\n\n##### 2.2.1.TCP RPC Server\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n\tmyMath := new(MyMath)\n\t// 注册rpc函数\n\trpc.Register(myMath)\n\n\t// 启动TCP RPC服务\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp\", \":8080\")\n\tlistener, _ := net.ListenTCP(\"tcp4\", tcpAddr)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t// 将请求交给rpc处理\n\t\tgo rpc.ServeConn(conn)\n\t}\n}\n\ntype MyMath int\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n\nfunc (m *MyMath) Add(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X + arg1.Y\n\targ2.Msg = \"hello world!\"\n\treturn nil\n}\n\nfunc (m *MyMath) Minus(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X - arg1.Y\n\targ2.Msg = \"hello mebaron!\"\n\treturn nil\n}\n```\n\n##### 2.2.2.TCP RPC Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n\t// 连接rpc服务端\n\tclient, _ := rpc.Dial(\"tcp\", \"127.0.0.1:8080\")\n\n\tquery := Arg1{\n\t\tX: 12,\n\t\tY: 6,\n\t}\n\tres := Arg2{}\n\n\t// 远程调用rpc函数\n\tclient.Call(\"MyMath.Add\", query, &res)\n\tfmt.Println(res.Answer, res.Msg)\n\n\tres2 := Arg2{}\n\tclient.Call(\"MyMath.Minus\", query, &res2)\n\tfmt.Println(res2.Answer, res2.Msg)\n}\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n```\n\n#### 2.3.JSON RPC\n\n##### 2.3.1.JSON RPC Server\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n)\n\nfunc main() {\n\tmyMath := new(MyMath)\n\t// 注册rpc函数\n\trpc.Register(myMath)\n\n\t// 启动TCP RPC服务\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp\", \":8080\")\n\tlistener, _ := net.ListenTCP(\"tcp4\", tcpAddr)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t// 将请求交给rpc处理\n\t\tgo jsonrpc.ServeConn(conn)\n\t}\n}\n\ntype MyMath int\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n\nfunc (m *MyMath) Add(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X + arg1.Y\n\targ2.Msg = \"hello world!\"\n\treturn nil\n}\n\nfunc (m *MyMath) Minus(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X - arg1.Y\n\targ2.Msg = \"hello mebaron!\"\n\treturn nil\n}\n```\n\n##### 2.3.2.JSON RPC Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc/jsonrpc\"\n)\n\nfunc main() {\n\t// 连接rpc服务端\n\tclient, err := jsonrpc.Dial(\"tcp\", \"127.0.0.1:8080\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tquery := Arg1{\n\t\tX: 12,\n\t\tY: 6,\n\t}\n\tres := Arg2{}\n\n\t// 远程调用rpc函数\n\terr = client.Call(\"MyMath.Add\", query, &res)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(res.Answer, res.Msg)\n\n\tres2 := Arg2{}\n\terr = client.Call(\"MyMath.Minus\", query, &res2)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(res2.Answer, res2.Msg)\n}\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n```\n\n","source":"_posts/27.go-rpc编程.md","raw":"---\ntitle: go-rpc编程\ntype: tags\ndate: 2023-12-30 20:26:53\ntags:\n- go\n- rpc\ncategories:\n- 学习笔记\n---\n\n## go-rpc编程\n\nRPC（remote procedure call protocol）-远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解低层网络技术的协议。它假定某些传输协议的存在，如TCP或UDP，以便为通信程序之间携带信息数据。通过它可以使得函数调用模式网络化。\n\n### 1.RPC工作原理\n\n运行时，一次客户机对服务器的RPC调用，其内部操作大致有如下十步：\n\n1. 调用客户端句柄，执行传送参数\n2. 调用本地系统内核发送网络消息\n3. 消息传送到远程主机\n4. 服务器句柄得到消息并取得参数\n5. 执行远程过程\n6. 执行的过程将结果返回服务器句柄\n7. 服务器句柄返回结果，调用远程系统内核\n8. 消息传回本地主机\n9. 客户句柄由内核接收消息\n10. 客户端接收句柄返回的数据\n\n### 2.go实现RPC调用\n\ngo标准库提供了对RPC的支持，并支持三个级别的RPC：TCP、HTTP、JSONRPC。但是go的rpc包只支持go开发的服务器与客户端之间的交互，因为在内部，他们采用了Gob来编码。\n\ngo rpc的函数只有符合下面的条件才能被远程访问：\n\n1. 函数必须是导出的（首字母大写）\n2. 必须有两个导出类型的参数，第一个参数是接收的参数，第二个参数是返回给客户端的参数，且第二个参数必须是指针类型的\n3. 函数还要有一个返回值error\n\n```go\nfunc (t *T) MethodName(arg1 Arg1Type, arg2 *Arg2Type) error\n```\n\n#### 2.1.HTTP RPC\n\n##### 2.1.1. HTTP RPC Server\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n\tmyMath := new(MyMath)\n    // 注册RPC函数并交给HTTP处理\n\trpc.Register(myMath)\n\trpc.HandleHTTP()\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\ntype MyMath int\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n\nfunc (m *MyMath) Add(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X + arg1.Y\n\targ2.Msg = \"hello world!\"\n\treturn nil\n}\n\nfunc (m *MyMath) Minus(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X - arg1.Y\n\targ2.Msg = \"hello mebaron!\"\n\treturn nil\n}\n```\n\n##### 2.1.2.HTTP RPC Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n    // 连接到rpc服务端\n\tclient, _ := rpc.DialHTTP(\"tcp\", \"127.0.0.1:8080\")\n\n\tquery := Arg1{\n\t\tX: 12,\n\t\tY: 6,\n\t}\n\tres := Arg2{}\n\n    // 远程调用rpc函数\n\tclient.Call(\"MyMath.Add\", query, &res)\n\tfmt.Println(res.Answer, res.Msg)\n\n\tres2 := Arg2{}\n\tclient.Call(\"MyMath.Minus\", query, &res2)\n\tfmt.Println(res2.Answer, res2.Msg)\n}\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n```\n\n### 2.2.TCP RPC\n\n##### 2.2.1.TCP RPC Server\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n\tmyMath := new(MyMath)\n\t// 注册rpc函数\n\trpc.Register(myMath)\n\n\t// 启动TCP RPC服务\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp\", \":8080\")\n\tlistener, _ := net.ListenTCP(\"tcp4\", tcpAddr)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t// 将请求交给rpc处理\n\t\tgo rpc.ServeConn(conn)\n\t}\n}\n\ntype MyMath int\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n\nfunc (m *MyMath) Add(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X + arg1.Y\n\targ2.Msg = \"hello world!\"\n\treturn nil\n}\n\nfunc (m *MyMath) Minus(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X - arg1.Y\n\targ2.Msg = \"hello mebaron!\"\n\treturn nil\n}\n```\n\n##### 2.2.2.TCP RPC Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc\"\n)\n\nfunc main() {\n\t// 连接rpc服务端\n\tclient, _ := rpc.Dial(\"tcp\", \"127.0.0.1:8080\")\n\n\tquery := Arg1{\n\t\tX: 12,\n\t\tY: 6,\n\t}\n\tres := Arg2{}\n\n\t// 远程调用rpc函数\n\tclient.Call(\"MyMath.Add\", query, &res)\n\tfmt.Println(res.Answer, res.Msg)\n\n\tres2 := Arg2{}\n\tclient.Call(\"MyMath.Minus\", query, &res2)\n\tfmt.Println(res2.Answer, res2.Msg)\n}\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n```\n\n#### 2.3.JSON RPC\n\n##### 2.3.1.JSON RPC Server\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n)\n\nfunc main() {\n\tmyMath := new(MyMath)\n\t// 注册rpc函数\n\trpc.Register(myMath)\n\n\t// 启动TCP RPC服务\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp\", \":8080\")\n\tlistener, _ := net.ListenTCP(\"tcp4\", tcpAddr)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\t// 将请求交给rpc处理\n\t\tgo jsonrpc.ServeConn(conn)\n\t}\n}\n\ntype MyMath int\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n\nfunc (m *MyMath) Add(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X + arg1.Y\n\targ2.Msg = \"hello world!\"\n\treturn nil\n}\n\nfunc (m *MyMath) Minus(arg1 Arg1, arg2 *Arg2) error {\n\targ2.Answer = arg1.X - arg1.Y\n\targ2.Msg = \"hello mebaron!\"\n\treturn nil\n}\n```\n\n##### 2.3.2.JSON RPC Client\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc/jsonrpc\"\n)\n\nfunc main() {\n\t// 连接rpc服务端\n\tclient, err := jsonrpc.Dial(\"tcp\", \"127.0.0.1:8080\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tquery := Arg1{\n\t\tX: 12,\n\t\tY: 6,\n\t}\n\tres := Arg2{}\n\n\t// 远程调用rpc函数\n\terr = client.Call(\"MyMath.Add\", query, &res)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(res.Answer, res.Msg)\n\n\tres2 := Arg2{}\n\terr = client.Call(\"MyMath.Minus\", query, &res2)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(res2.Answer, res2.Msg)\n}\n\ntype Arg1 struct {\n\tX, Y int\n}\n\ntype Arg2 struct {\n\tAnswer int\n\tMsg    string\n}\n```\n\n","slug":"27.go-rpc编程","published":1,"updated":"2024-01-06T00:23:42.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dq001h0cfv3f1vdvq4","content":"<h2 id=\"go-rpc编程\"><a href=\"#go-rpc编程\" class=\"headerlink\" title=\"go-rpc编程\"></a>go-rpc编程</h2><p>RPC（remote procedure call protocol）-远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解低层网络技术的协议。它假定某些传输协议的存在，如TCP或UDP，以便为通信程序之间携带信息数据。通过它可以使得函数调用模式网络化。</p>\n<h3 id=\"1-RPC工作原理\"><a href=\"#1-RPC工作原理\" class=\"headerlink\" title=\"1.RPC工作原理\"></a>1.RPC工作原理</h3><p>运行时，一次客户机对服务器的RPC调用，其内部操作大致有如下十步：</p>\n<ol>\n<li>调用客户端句柄，执行传送参数</li>\n<li>调用本地系统内核发送网络消息</li>\n<li>消息传送到远程主机</li>\n<li>服务器句柄得到消息并取得参数</li>\n<li>执行远程过程</li>\n<li>执行的过程将结果返回服务器句柄</li>\n<li>服务器句柄返回结果，调用远程系统内核</li>\n<li>消息传回本地主机</li>\n<li>客户句柄由内核接收消息</li>\n<li>客户端接收句柄返回的数据</li>\n</ol>\n<h3 id=\"2-go实现RPC调用\"><a href=\"#2-go实现RPC调用\" class=\"headerlink\" title=\"2.go实现RPC调用\"></a>2.go实现RPC调用</h3><p>go标准库提供了对RPC的支持，并支持三个级别的RPC：TCP、HTTP、JSONRPC。但是go的rpc包只支持go开发的服务器与客户端之间的交互，因为在内部，他们采用了Gob来编码。</p>\n<p>go rpc的函数只有符合下面的条件才能被远程访问：</p>\n<ol>\n<li>函数必须是导出的（首字母大写）</li>\n<li>必须有两个导出类型的参数，第一个参数是接收的参数，第二个参数是返回给客户端的参数，且第二个参数必须是指针类型的</li>\n<li>函数还要有一个返回值error</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *T)</span></span> MethodName(arg1 Arg1Type, arg2 *Arg2Type) <span class=\"type\">error</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-HTTP-RPC\"><a href=\"#2-1-HTTP-RPC\" class=\"headerlink\" title=\"2.1.HTTP RPC\"></a>2.1.HTTP RPC</h4><h5 id=\"2-1-1-HTTP-RPC-Server\"><a href=\"#2-1-1-HTTP-RPC-Server\" class=\"headerlink\" title=\"2.1.1. HTTP RPC Server\"></a>2.1.1. HTTP RPC Server</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmyMath := <span class=\"built_in\">new</span>(MyMath)</span><br><span class=\"line\">    <span class=\"comment\">// 注册RPC函数并交给HTTP处理</span></span><br><span class=\"line\">\trpc.Register(myMath)</span><br><span class=\"line\">\trpc.HandleHTTP()</span><br><span class=\"line\"></span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMath <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Add(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X + arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello world!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Minus(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X - arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello mebaron!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-2-HTTP-RPC-Client\"><a href=\"#2-1-2-HTTP-RPC-Client\" class=\"headerlink\" title=\"2.1.2.HTTP RPC Client\"></a>2.1.2.HTTP RPC Client</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 连接到rpc服务端</span></span><br><span class=\"line\">\tclient, _ := rpc.DialHTTP(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery := Arg1&#123;</span><br><span class=\"line\">\t\tX: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\tY: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := Arg2&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 远程调用rpc函数</span></span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Add&quot;</span>, query, &amp;res)</span><br><span class=\"line\">\tfmt.Println(res.Answer, res.Msg)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres2 := Arg2&#123;&#125;</span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Minus&quot;</span>, query, &amp;res2)</span><br><span class=\"line\">\tfmt.Println(res2.Answer, res2.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-TCP-RPC\"><a href=\"#2-2-TCP-RPC\" class=\"headerlink\" title=\"2.2.TCP RPC\"></a>2.2.TCP RPC</h3><h5 id=\"2-2-1-TCP-RPC-Server\"><a href=\"#2-2-1-TCP-RPC-Server\" class=\"headerlink\" title=\"2.2.1.TCP RPC Server\"></a>2.2.1.TCP RPC Server</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmyMath := <span class=\"built_in\">new</span>(MyMath)</span><br><span class=\"line\">\t<span class=\"comment\">// 注册rpc函数</span></span><br><span class=\"line\">\trpc.Register(myMath)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动TCP RPC服务</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\tlistener, _ := net.ListenTCP(<span class=\"string\">&quot;tcp4&quot;</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将请求交给rpc处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> rpc.ServeConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMath <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Add(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X + arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello world!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Minus(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X - arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello mebaron!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-2-TCP-RPC-Client\"><a href=\"#2-2-2-TCP-RPC-Client\" class=\"headerlink\" title=\"2.2.2.TCP RPC Client\"></a>2.2.2.TCP RPC Client</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接rpc服务端</span></span><br><span class=\"line\">\tclient, _ := rpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery := Arg1&#123;</span><br><span class=\"line\">\t\tX: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\tY: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := Arg2&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 远程调用rpc函数</span></span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Add&quot;</span>, query, &amp;res)</span><br><span class=\"line\">\tfmt.Println(res.Answer, res.Msg)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres2 := Arg2&#123;&#125;</span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Minus&quot;</span>, query, &amp;res2)</span><br><span class=\"line\">\tfmt.Println(res2.Answer, res2.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-JSON-RPC\"><a href=\"#2-3-JSON-RPC\" class=\"headerlink\" title=\"2.3.JSON RPC\"></a>2.3.JSON RPC</h4><h5 id=\"2-3-1-JSON-RPC-Server\"><a href=\"#2-3-1-JSON-RPC-Server\" class=\"headerlink\" title=\"2.3.1.JSON RPC Server\"></a>2.3.1.JSON RPC Server</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmyMath := <span class=\"built_in\">new</span>(MyMath)</span><br><span class=\"line\">\t<span class=\"comment\">// 注册rpc函数</span></span><br><span class=\"line\">\trpc.Register(myMath)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动TCP RPC服务</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\tlistener, _ := net.ListenTCP(<span class=\"string\">&quot;tcp4&quot;</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将请求交给rpc处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> jsonrpc.ServeConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMath <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Add(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X + arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello world!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Minus(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X - arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello mebaron!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-JSON-RPC-Client\"><a href=\"#2-3-2-JSON-RPC-Client\" class=\"headerlink\" title=\"2.3.2.JSON RPC Client\"></a>2.3.2.JSON RPC Client</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接rpc服务端</span></span><br><span class=\"line\">\tclient, err := jsonrpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery := Arg1&#123;</span><br><span class=\"line\">\t\tX: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\tY: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := Arg2&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 远程调用rpc函数</span></span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">&quot;MyMath.Add&quot;</span>, query, &amp;res)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res.Answer, res.Msg)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres2 := Arg2&#123;&#125;</span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">&quot;MyMath.Minus&quot;</span>, query, &amp;res2)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res2.Answer, res2.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"go-rpc编程\"><a href=\"#go-rpc编程\" class=\"headerlink\" title=\"go-rpc编程\"></a>go-rpc编程</h2><p>RPC（remote procedure call protocol）-远程过程调用协议，是一种通过网络从远程计算机程序上请求服务，而不需要了解低层网络技术的协议。它假定某些传输协议的存在，如TCP或UDP，以便为通信程序之间携带信息数据。通过它可以使得函数调用模式网络化。</p>\n<h3 id=\"1-RPC工作原理\"><a href=\"#1-RPC工作原理\" class=\"headerlink\" title=\"1.RPC工作原理\"></a>1.RPC工作原理</h3><p>运行时，一次客户机对服务器的RPC调用，其内部操作大致有如下十步：</p>\n<ol>\n<li>调用客户端句柄，执行传送参数</li>\n<li>调用本地系统内核发送网络消息</li>\n<li>消息传送到远程主机</li>\n<li>服务器句柄得到消息并取得参数</li>\n<li>执行远程过程</li>\n<li>执行的过程将结果返回服务器句柄</li>\n<li>服务器句柄返回结果，调用远程系统内核</li>\n<li>消息传回本地主机</li>\n<li>客户句柄由内核接收消息</li>\n<li>客户端接收句柄返回的数据</li>\n</ol>\n<h3 id=\"2-go实现RPC调用\"><a href=\"#2-go实现RPC调用\" class=\"headerlink\" title=\"2.go实现RPC调用\"></a>2.go实现RPC调用</h3><p>go标准库提供了对RPC的支持，并支持三个级别的RPC：TCP、HTTP、JSONRPC。但是go的rpc包只支持go开发的服务器与客户端之间的交互，因为在内部，他们采用了Gob来编码。</p>\n<p>go rpc的函数只有符合下面的条件才能被远程访问：</p>\n<ol>\n<li>函数必须是导出的（首字母大写）</li>\n<li>必须有两个导出类型的参数，第一个参数是接收的参数，第二个参数是返回给客户端的参数，且第二个参数必须是指针类型的</li>\n<li>函数还要有一个返回值error</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *T)</span></span> MethodName(arg1 Arg1Type, arg2 *Arg2Type) <span class=\"type\">error</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-HTTP-RPC\"><a href=\"#2-1-HTTP-RPC\" class=\"headerlink\" title=\"2.1.HTTP RPC\"></a>2.1.HTTP RPC</h4><h5 id=\"2-1-1-HTTP-RPC-Server\"><a href=\"#2-1-1-HTTP-RPC-Server\" class=\"headerlink\" title=\"2.1.1. HTTP RPC Server\"></a>2.1.1. HTTP RPC Server</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmyMath := <span class=\"built_in\">new</span>(MyMath)</span><br><span class=\"line\">    <span class=\"comment\">// 注册RPC函数并交给HTTP处理</span></span><br><span class=\"line\">\trpc.Register(myMath)</span><br><span class=\"line\">\trpc.HandleHTTP()</span><br><span class=\"line\"></span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">&quot;:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMath <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Add(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X + arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello world!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Minus(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X - arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello mebaron!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1-2-HTTP-RPC-Client\"><a href=\"#2-1-2-HTTP-RPC-Client\" class=\"headerlink\" title=\"2.1.2.HTTP RPC Client\"></a>2.1.2.HTTP RPC Client</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 连接到rpc服务端</span></span><br><span class=\"line\">\tclient, _ := rpc.DialHTTP(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery := Arg1&#123;</span><br><span class=\"line\">\t\tX: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\tY: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := Arg2&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 远程调用rpc函数</span></span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Add&quot;</span>, query, &amp;res)</span><br><span class=\"line\">\tfmt.Println(res.Answer, res.Msg)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres2 := Arg2&#123;&#125;</span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Minus&quot;</span>, query, &amp;res2)</span><br><span class=\"line\">\tfmt.Println(res2.Answer, res2.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-TCP-RPC\"><a href=\"#2-2-TCP-RPC\" class=\"headerlink\" title=\"2.2.TCP RPC\"></a>2.2.TCP RPC</h3><h5 id=\"2-2-1-TCP-RPC-Server\"><a href=\"#2-2-1-TCP-RPC-Server\" class=\"headerlink\" title=\"2.2.1.TCP RPC Server\"></a>2.2.1.TCP RPC Server</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmyMath := <span class=\"built_in\">new</span>(MyMath)</span><br><span class=\"line\">\t<span class=\"comment\">// 注册rpc函数</span></span><br><span class=\"line\">\trpc.Register(myMath)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动TCP RPC服务</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\tlistener, _ := net.ListenTCP(<span class=\"string\">&quot;tcp4&quot;</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将请求交给rpc处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> rpc.ServeConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMath <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Add(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X + arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello world!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Minus(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X - arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello mebaron!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-2-TCP-RPC-Client\"><a href=\"#2-2-2-TCP-RPC-Client\" class=\"headerlink\" title=\"2.2.2.TCP RPC Client\"></a>2.2.2.TCP RPC Client</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接rpc服务端</span></span><br><span class=\"line\">\tclient, _ := rpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery := Arg1&#123;</span><br><span class=\"line\">\t\tX: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\tY: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := Arg2&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 远程调用rpc函数</span></span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Add&quot;</span>, query, &amp;res)</span><br><span class=\"line\">\tfmt.Println(res.Answer, res.Msg)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres2 := Arg2&#123;&#125;</span><br><span class=\"line\">\tclient.Call(<span class=\"string\">&quot;MyMath.Minus&quot;</span>, query, &amp;res2)</span><br><span class=\"line\">\tfmt.Println(res2.Answer, res2.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-JSON-RPC\"><a href=\"#2-3-JSON-RPC\" class=\"headerlink\" title=\"2.3.JSON RPC\"></a>2.3.JSON RPC</h4><h5 id=\"2-3-1-JSON-RPC-Server\"><a href=\"#2-3-1-JSON-RPC-Server\" class=\"headerlink\" title=\"2.3.1.JSON RPC Server\"></a>2.3.1.JSON RPC Server</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmyMath := <span class=\"built_in\">new</span>(MyMath)</span><br><span class=\"line\">\t<span class=\"comment\">// 注册rpc函数</span></span><br><span class=\"line\">\trpc.Register(myMath)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 启动TCP RPC服务</span></span><br><span class=\"line\">\ttcpAddr, _ := net.ResolveTCPAddr(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">\tlistener, _ := net.ListenTCP(<span class=\"string\">&quot;tcp4&quot;</span>, tcpAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将请求交给rpc处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> jsonrpc.ServeConn(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMath <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Add(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X + arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello world!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MyMath)</span></span> Minus(arg1 Arg1, arg2 *Arg2) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">\targ2.Answer = arg1.X - arg1.Y</span><br><span class=\"line\">\targ2.Msg = <span class=\"string\">&quot;hello mebaron!&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-2-JSON-RPC-Client\"><a href=\"#2-3-2-JSON-RPC-Client\" class=\"headerlink\" title=\"2.3.2.JSON RPC Client\"></a>2.3.2.JSON RPC Client</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接rpc服务端</span></span><br><span class=\"line\">\tclient, err := jsonrpc.Dial(<span class=\"string\">&quot;tcp&quot;</span>, <span class=\"string\">&quot;127.0.0.1:8080&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery := Arg1&#123;</span><br><span class=\"line\">\t\tX: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\tY: <span class=\"number\">6</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := Arg2&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 远程调用rpc函数</span></span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">&quot;MyMath.Add&quot;</span>, query, &amp;res)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res.Answer, res.Msg)</span><br><span class=\"line\"></span><br><span class=\"line\">\tres2 := Arg2&#123;&#125;</span><br><span class=\"line\">\terr = client.Call(<span class=\"string\">&quot;MyMath.Minus&quot;</span>, query, &amp;res2)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(res2.Answer, res2.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Arg2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tAnswer <span class=\"type\">int</span></span><br><span class=\"line\">\tMsg    <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"next主题美化配置","date":"2021-12-11T08:14:58.000Z","type":"tags","_content":"\n# next主题美化配置\n\n### 前言\n\n 网上关于Hexo的主题美化博客较多，本文用以记录搭建本博客网站过程中使用到的next主题美化配置。给大家做个参考，与大家一起学习进步。\n\n### 常规配置\n\n1、打开**站点**配置文件(hexo的配置文件)`_config.yml`,修改配置。\n\n```\n# Site\ntitle: baronの博客\nsubtitle: '指点江山，激扬文字，粪土当年万户侯。'\ndescription: '生活、工作、游戏、读书，偶有所得，以此为记。'\nkeywords: baron\nauthor: baron\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n<!--more-->\n\n2、将我们的头像放置在/themes/next/sources/images目录下，打开主题配置文件`_config.yml`，修改配置。\n\n```\n# Sidebar Avatar\navatar:\n  # Replace the default image and set the url here.\n  url: /images/baron.jpg\n  # If true, the avatar will be dispalyed in circle.\n  rounded: false\n  # If true, the avatar will be rotated with the cursor.\n  rotated: false\n```\n\n### 自定义博客图标\n\n next博客的默认图标是`H`，不过Next支持修改图标。\n\n我们需要将我们的图标放置在/themes/next/sources/images目录下，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以（不同尺寸的图标可以到网上制作）。\n\n```\nfavicon:\n  small: /images/baron_16px.ico\n  medium: /images/baron_32px.ico\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n\n### 添加点击效果\n\n1、在/themes/next/source/js目录下，新建clicklove.js文件：\n\n```\ncd /themes/next/source/js\ntouch clicklove.js\n```\n\n2、将下面的代码粘贴进clicklove.js文件中：\n\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n```\n\n3、在`\\themes\\next\\layout\\_layout.swig`文件末尾添加：\n\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/clicklove.js\"></script>\n```\n\n### 添加社交信息\n\n1、打开主题配置`_config.yml`，进行相关参数修改：\n\n```\n# 修改对应的社交信息。\nsocial:\n  GitHub: https://github.com/mebaron || fab fa-github\n  E-Mail: mailto:ecustbaron@gmail.com || fa fa-envelope\n  #Weibo: https://weibo.com/yourname || fab fa-weibo\n  #Google: https://plus.google.com/yourname || fab fa-google\n  #Twitter: https://twitter.com/yourname || fab fa-twitter\n  #FB Page: https://www.facebook.com/yourname || fab fa-facebook\n  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow\n  #YouTube: https://youtube.com/yourname || fab fa-youtube\n  #Instagram: https://instagram.com/yourname || fab fa-instagram\n  #Skype: skype:yourname?call|chat || fab fa-skype\n```\n\n### 添加背景\n\n1、下载相应的资源包：\n\n```\n# 在工作目录执行\ngit clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest\n```\n\n2、在主题配置`themes/next/_config.yml`中做相关参数修改：\n\n```\n# Canvas-nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas-nest\ncanvas_nest: # 网络背景\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,0' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 150 # the number of lines\n```\n\n### 增加文章结束标志\n\n1、在路径/themes/next/layout/_macro文件夹中新建passage-end-tag.swig文件：\n\n```\n# 切换到路径_macro\ncd [_macro路径]\n# 创建passage-end-tag.swig文件\ntouch passage-end-tag.swig\n```\n\n2、打开passage-end-tag.swig文件，添加以下内容：\n\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n\n3、打开/themes/next/layout/_macro/post.swig，在post-body之后，post-footer之前，添加以下代码：\n\n```\n<div>\n  {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n\n4、然后打开主题配置文件`_config.yml`,在末尾添加：\n\n```\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\n  enabled: true\n```\n\n### 添加文章版权信息\n\n1、打开主题配置_config.yml，进行相关参数设置：\n\n```\ncreative_commons:\n  license: by-nc-sa\n  sidebar: true\n  post: true\n```\n\n### 添加搜索功能\n\n1、安装hexo-generator-searchdb插件.\n\n```\ncd 文件目录\nnpm install hexo-generator-searchdb --save\n```\n\n2、打开**站点**配置文件(hexo的配置文件)`_config.yml`,添加配置:\n\n```\n# 搜索\nsearch:\n  path: ./public/search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n","source":"_posts/3.next主题美化配置.md","raw":"---\ntitle: next主题美化配置\ndate: 2021-12-11 16:14:58\ntags:\n- hexo\n- next\n- 博客\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n# next主题美化配置\n\n### 前言\n\n 网上关于Hexo的主题美化博客较多，本文用以记录搭建本博客网站过程中使用到的next主题美化配置。给大家做个参考，与大家一起学习进步。\n\n### 常规配置\n\n1、打开**站点**配置文件(hexo的配置文件)`_config.yml`,修改配置。\n\n```\n# Site\ntitle: baronの博客\nsubtitle: '指点江山，激扬文字，粪土当年万户侯。'\ndescription: '生活、工作、游戏、读书，偶有所得，以此为记。'\nkeywords: baron\nauthor: baron\nlanguage: zh-CN\ntimezone: Asia/Shanghai\n```\n\n<!--more-->\n\n2、将我们的头像放置在/themes/next/sources/images目录下，打开主题配置文件`_config.yml`，修改配置。\n\n```\n# Sidebar Avatar\navatar:\n  # Replace the default image and set the url here.\n  url: /images/baron.jpg\n  # If true, the avatar will be dispalyed in circle.\n  rounded: false\n  # If true, the avatar will be rotated with the cursor.\n  rotated: false\n```\n\n### 自定义博客图标\n\n next博客的默认图标是`H`，不过Next支持修改图标。\n\n我们需要将我们的图标放置在/themes/next/sources/images目录下，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以（不同尺寸的图标可以到网上制作）。\n\n```\nfavicon:\n  small: /images/baron_16px.ico\n  medium: /images/baron_32px.ico\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n```\n\n### 添加点击效果\n\n1、在/themes/next/source/js目录下，新建clicklove.js文件：\n\n```\ncd /themes/next/source/js\ntouch clicklove.js\n```\n\n2、将下面的代码粘贴进clicklove.js文件中：\n\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n```\n\n3、在`\\themes\\next\\layout\\_layout.swig`文件末尾添加：\n\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/clicklove.js\"></script>\n```\n\n### 添加社交信息\n\n1、打开主题配置`_config.yml`，进行相关参数修改：\n\n```\n# 修改对应的社交信息。\nsocial:\n  GitHub: https://github.com/mebaron || fab fa-github\n  E-Mail: mailto:ecustbaron@gmail.com || fa fa-envelope\n  #Weibo: https://weibo.com/yourname || fab fa-weibo\n  #Google: https://plus.google.com/yourname || fab fa-google\n  #Twitter: https://twitter.com/yourname || fab fa-twitter\n  #FB Page: https://www.facebook.com/yourname || fab fa-facebook\n  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow\n  #YouTube: https://youtube.com/yourname || fab fa-youtube\n  #Instagram: https://instagram.com/yourname || fab fa-instagram\n  #Skype: skype:yourname?call|chat || fab fa-skype\n```\n\n### 添加背景\n\n1、下载相应的资源包：\n\n```\n# 在工作目录执行\ngit clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest\n```\n\n2、在主题配置`themes/next/_config.yml`中做相关参数修改：\n\n```\n# Canvas-nest\n# Dependencies: https://github.com/theme-next/theme-next-canvas-nest\ncanvas_nest: # 网络背景\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,0' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 150 # the number of lines\n```\n\n### 增加文章结束标志\n\n1、在路径/themes/next/layout/_macro文件夹中新建passage-end-tag.swig文件：\n\n```\n# 切换到路径_macro\ncd [_macro路径]\n# 创建passage-end-tag.swig文件\ntouch passage-end-tag.swig\n```\n\n2、打开passage-end-tag.swig文件，添加以下内容：\n\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n\n3、打开/themes/next/layout/_macro/post.swig，在post-body之后，post-footer之前，添加以下代码：\n\n```\n<div>\n  {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n\n4、然后打开主题配置文件`_config.yml`,在末尾添加：\n\n```\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\n  enabled: true\n```\n\n### 添加文章版权信息\n\n1、打开主题配置_config.yml，进行相关参数设置：\n\n```\ncreative_commons:\n  license: by-nc-sa\n  sidebar: true\n  post: true\n```\n\n### 添加搜索功能\n\n1、安装hexo-generator-searchdb插件.\n\n```\ncd 文件目录\nnpm install hexo-generator-searchdb --save\n```\n\n2、打开**站点**配置文件(hexo的配置文件)`_config.yml`,添加配置:\n\n```\n# 搜索\nsearch:\n  path: ./public/search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n","slug":"3.next主题美化配置","published":1,"updated":"2024-01-06T00:21:02.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dr001l0cfv0fzi0ds5","content":"<h1 id=\"next主题美化配置\"><a href=\"#next主题美化配置\" class=\"headerlink\" title=\"next主题美化配置\"></a>next主题美化配置</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> 网上关于Hexo的主题美化博客较多，本文用以记录搭建本博客网站过程中使用到的next主题美化配置。给大家做个参考，与大家一起学习进步。</p>\n<h3 id=\"常规配置\"><a href=\"#常规配置\" class=\"headerlink\" title=\"常规配置\"></a>常规配置</h3><p>1、打开<strong>站点</strong>配置文件(hexo的配置文件)<code>_config.yml</code>,修改配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: baronの博客</span><br><span class=\"line\">subtitle: &#x27;指点江山，激扬文字，粪土当年万户侯。&#x27;</span><br><span class=\"line\">description: &#x27;生活、工作、游戏、读书，偶有所得，以此为记。&#x27;</span><br><span class=\"line\">keywords: baron</span><br><span class=\"line\">author: baron</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>2、将我们的头像放置在/themes/next/sources/images目录下，打开主题配置文件<code>_config.yml</code>，修改配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\">avatar:</span><br><span class=\"line\">  # Replace the default image and set the url here.</span><br><span class=\"line\">  url: /images/baron.jpg</span><br><span class=\"line\">  # If true, the avatar will be dispalyed in circle.</span><br><span class=\"line\">  rounded: false</span><br><span class=\"line\">  # If true, the avatar will be rotated with the cursor.</span><br><span class=\"line\">  rotated: false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义博客图标\"><a href=\"#自定义博客图标\" class=\"headerlink\" title=\"自定义博客图标\"></a>自定义博客图标</h3><p> next博客的默认图标是<code>H</code>，不过Next支持修改图标。</p>\n<p>我们需要将我们的图标放置在/themes/next/sources/images目录下，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以（不同尺寸的图标可以到网上制作）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/baron_16px.ico</span><br><span class=\"line\">  medium: /images/baron_32px.ico</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加点击效果\"><a href=\"#添加点击效果\" class=\"headerlink\" title=\"添加点击效果\"></a>添加点击效果</h3><p>1、在/themes/next/source/js目录下，新建clicklove.js文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /themes/next/source/js</span><br><span class=\"line\">touch clicklove.js</span><br></pre></td></tr></table></figure>\n\n<p>2、将下面的代码粘贴进clicklove.js文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>\n\n<p>3、在<code>\\themes\\next\\layout\\_layout.swig</code>文件末尾添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加社交信息\"><a href=\"#添加社交信息\" class=\"headerlink\" title=\"添加社交信息\"></a>添加社交信息</h3><p>1、打开主题配置<code>_config.yml</code>，进行相关参数修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改对应的社交信息。</span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/mebaron || fab fa-github</span><br><span class=\"line\">  E-Mail: mailto:ecustbaron@gmail.com || fa fa-envelope</span><br><span class=\"line\">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class=\"line\">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class=\"line\">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class=\"line\">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class=\"line\">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class=\"line\">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class=\"line\">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class=\"line\">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加背景\"><a href=\"#添加背景\" class=\"headerlink\" title=\"添加背景\"></a>添加背景</h3><p>1、下载相应的资源包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在工作目录执行</span><br><span class=\"line\">git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure>\n\n<p>2、在主题配置<code>themes/next/_config.yml</code>中做相关参数修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Canvas-nest</span><br><span class=\"line\"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class=\"line\">canvas_nest: # 网络背景</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  onmobile: true # display on mobile or not</span><br><span class=\"line\">  color: &#x27;0,0,0&#x27; # RGB values, use &#x27;,&#x27; to separate</span><br><span class=\"line\">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class=\"line\">  zIndex: -1 # z-index property of the background</span><br><span class=\"line\">  count: 150 # the number of lines</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加文章结束标志\"><a href=\"#增加文章结束标志\" class=\"headerlink\" title=\"增加文章结束标志\"></a>增加文章结束标志</h3><p>1、在路径/themes/next/layout/_macro文件夹中新建passage-end-tag.swig文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 切换到路径_macro</span><br><span class=\"line\">cd [_macro路径]</span><br><span class=\"line\"># 创建passage-end-tag.swig文件</span><br><span class=\"line\">touch passage-end-tag.swig</span><br></pre></td></tr></table></figure>\n\n<p>2、打开passage-end-tag.swig文件，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3、打开/themes/next/layout/_macro/post.swig，在post-body之后，post-footer之前，添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4、然后打开主题配置文件<code>_config.yml</code>,在末尾添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加文章版权信息\"><a href=\"#添加文章版权信息\" class=\"headerlink\" title=\"添加文章版权信息\"></a>添加文章版权信息</h3><p>1、打开主题配置_config.yml，进行相关参数设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creative_commons:</span><br><span class=\"line\">  license: by-nc-sa</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  post: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h3><p>1、安装hexo-generator-searchdb插件.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 文件目录</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>2、打开<strong>站点</strong>配置文件(hexo的配置文件)<code>_config.yml</code>,添加配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 搜索</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: ./public/search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"/img/cover02.jpg","cover_type":"img","excerpt":"<h1 id=\"next主题美化配置\"><a href=\"#next主题美化配置\" class=\"headerlink\" title=\"next主题美化配置\"></a>next主题美化配置</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> 网上关于Hexo的主题美化博客较多，本文用以记录搭建本博客网站过程中使用到的next主题美化配置。给大家做个参考，与大家一起学习进步。</p>\n<h3 id=\"常规配置\"><a href=\"#常规配置\" class=\"headerlink\" title=\"常规配置\"></a>常规配置</h3><p>1、打开<strong>站点</strong>配置文件(hexo的配置文件)<code>_config.yml</code>,修改配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: baronの博客</span><br><span class=\"line\">subtitle: &#x27;指点江山，激扬文字，粪土当年万户侯。&#x27;</span><br><span class=\"line\">description: &#x27;生活、工作、游戏、读书，偶有所得，以此为记。&#x27;</span><br><span class=\"line\">keywords: baron</span><br><span class=\"line\">author: baron</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>","more":"<p>2、将我们的头像放置在/themes/next/sources/images目录下，打开主题配置文件<code>_config.yml</code>，修改配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\">avatar:</span><br><span class=\"line\">  # Replace the default image and set the url here.</span><br><span class=\"line\">  url: /images/baron.jpg</span><br><span class=\"line\">  # If true, the avatar will be dispalyed in circle.</span><br><span class=\"line\">  rounded: false</span><br><span class=\"line\">  # If true, the avatar will be rotated with the cursor.</span><br><span class=\"line\">  rotated: false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义博客图标\"><a href=\"#自定义博客图标\" class=\"headerlink\" title=\"自定义博客图标\"></a>自定义博客图标</h3><p> next博客的默认图标是<code>H</code>，不过Next支持修改图标。</p>\n<p>我们需要将我们的图标放置在/themes/next/sources/images目录下，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以（不同尺寸的图标可以到网上制作）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon:</span><br><span class=\"line\">  small: /images/baron_16px.ico</span><br><span class=\"line\">  medium: /images/baron_32px.ico</span><br><span class=\"line\">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class=\"line\">  safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加点击效果\"><a href=\"#添加点击效果\" class=\"headerlink\" title=\"添加点击效果\"></a>添加点击效果</h3><p>1、在/themes/next/source/js目录下，新建clicklove.js文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /themes/next/source/js</span><br><span class=\"line\">touch clicklove.js</span><br></pre></td></tr></table></figure>\n\n<p>2、将下面的代码粘贴进clicklove.js文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>\n\n<p>3、在<code>\\themes\\next\\layout\\_layout.swig</code>文件末尾添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加社交信息\"><a href=\"#添加社交信息\" class=\"headerlink\" title=\"添加社交信息\"></a>添加社交信息</h3><p>1、打开主题配置<code>_config.yml</code>，进行相关参数修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改对应的社交信息。</span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/mebaron || fab fa-github</span><br><span class=\"line\">  E-Mail: mailto:ecustbaron@gmail.com || fa fa-envelope</span><br><span class=\"line\">  #Weibo: https://weibo.com/yourname || fab fa-weibo</span><br><span class=\"line\">  #Google: https://plus.google.com/yourname || fab fa-google</span><br><span class=\"line\">  #Twitter: https://twitter.com/yourname || fab fa-twitter</span><br><span class=\"line\">  #FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br><span class=\"line\">  #StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br><span class=\"line\">  #YouTube: https://youtube.com/yourname || fab fa-youtube</span><br><span class=\"line\">  #Instagram: https://instagram.com/yourname || fab fa-instagram</span><br><span class=\"line\">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加背景\"><a href=\"#添加背景\" class=\"headerlink\" title=\"添加背景\"></a>添加背景</h3><p>1、下载相应的资源包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在工作目录执行</span><br><span class=\"line\">git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure>\n\n<p>2、在主题配置<code>themes/next/_config.yml</code>中做相关参数修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Canvas-nest</span><br><span class=\"line\"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class=\"line\">canvas_nest: # 网络背景</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  onmobile: true # display on mobile or not</span><br><span class=\"line\">  color: &#x27;0,0,0&#x27; # RGB values, use &#x27;,&#x27; to separate</span><br><span class=\"line\">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class=\"line\">  zIndex: -1 # z-index property of the background</span><br><span class=\"line\">  count: 150 # the number of lines</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加文章结束标志\"><a href=\"#增加文章结束标志\" class=\"headerlink\" title=\"增加文章结束标志\"></a>增加文章结束标志</h3><p>1、在路径/themes/next/layout/_macro文件夹中新建passage-end-tag.swig文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 切换到路径_macro</span><br><span class=\"line\">cd [_macro路径]</span><br><span class=\"line\"># 创建passage-end-tag.swig文件</span><br><span class=\"line\">touch passage-end-tag.swig</span><br></pre></td></tr></table></figure>\n\n<p>2、打开passage-end-tag.swig文件，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>3、打开/themes/next/layout/_macro/post.swig，在post-body之后，post-footer之前，添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>4、然后打开主题配置文件<code>_config.yml</code>,在末尾添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加文章版权信息\"><a href=\"#添加文章版权信息\" class=\"headerlink\" title=\"添加文章版权信息\"></a>添加文章版权信息</h3><p>1、打开主题配置_config.yml，进行相关参数设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creative_commons:</span><br><span class=\"line\">  license: by-nc-sa</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  post: true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h3><p>1、安装hexo-generator-searchdb插件.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 文件目录</span><br><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>2、打开<strong>站点</strong>配置文件(hexo的配置文件)<code>_config.yml</code>,添加配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 搜索</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: ./public/search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>"},{"title":"基础算法模板","type":"tags","date":"2024-01-07T02:58:19.000Z","_content":"\n## 基础算法模板\n\n### 1.快速排序\n\n```go\npackage basic\n\nfunc QuickSort(q []int, l, r int) {\n\tif l >= r {\n\t\treturn\n\t}\n\n\ti, j, x := l-1, r+1, q[l+r>>1]\n\tfor i < j {\n\t\tfor q[i] < x {\n\t\t\ti++\n\t\t}\n\n\t\tfor q[j] > x {\n\t\t\tj--\n\t\t}\n\n\t\tif i < j {\n\t\t\tq[i], q[j] = q[j], q[i]\n\t\t}\n\t}\n\n\tQuickSort(q, l, i)\n\tQuickSort(q, i+1, r)\n}\n\n```\n\n### 2.归并排序\n\n```go\npackage basic\n\nfunc MergeSort(q []int, l, r int) {\n\tif l >= r {\n\t\treturn\n\t}\n\n\tmid := l + r>>1\n\tMergeSort(q, l, mid)\n\tMergeSort(q, mid+1, r)\n\n\ti, j, k := l, mid+1, 0\n\ttmp := make([]int, r-l+1)\n\tfor i <= mid && j <= r {\n\t\tif q[i] < q[j] {\n\t\t\ttmp[k] = q[i]\n\t\t\tk++\n\t\t\ti++\n\t\t} else {\n\t\t\ttmp[k] = q[j]\n\t\t\tk++\n\t\t\tj++\n\t\t}\n\t}\n\tfor i <= mid {\n\t\ttmp[k] = q[i]\n\t\tk++\n\t\ti++\n\t}\n\tfor j <= r {\n\t\ttmp[k] = q[j]\n\t\tk++\n\t\tj++\n\t}\n\tfor k, v := range tmp {\n\t\tq[l+k] = v\n\t}\n}\n\n```\n\n### 3.二分查找\n\n```go\npackage basic\n\n// 检查x是否满足某种性质\nfunc check(x int) bool {\n\treturn x > 10\n}\n\nfunc checkFloat(x float32) bool {\n\treturn x > 10\n}\n\n// 区间[l,r]被划分成[l,mid]和[mid+1,r]时使用\nfunc Bsearch_1(l, r int) int {\n\tfor l < r {\n\t\tmid := l + r>>1\n\t\tif check(mid) {\n\t\t\tr = mid\n\t\t} else {\n\t\t\tl = mid + 1\n\t\t}\n\t}\n\treturn l\n}\n\n// 区间[l,r]被划分成[l,mid-1]和[mid,r]时使用\nfunc Bsearch_2(l, r int) int {\n\tfor l < r {\n\t\tmid := l + r + 1>>1\n\t\tif check(mid) {\n\t\t\tl = mid\n\t\t} else {\n\t\t\tr = mid - 1\n\t\t}\n\t}\n\treturn l\n}\n\n// 浮点数的二分查找模板\nfunc Bsearch_3(l, r float32) float32 {\n\tconst eps = 1e-6\n\tfor r-l > eps {\n\t\tmid := (l + r) / 2\n\t\tif checkFloat(mid) {\n\t\t\tr = mid\n\t\t} else {\n\t\t\tl = mid\n\t\t}\n\t}\n\treturn l\n}\n\n```\n\n### 4.高精度计算\n\n```go\npackage basic\n\n/*\n处理超大数的加减乘除.\n加减乘这里输入的数字字符串需要按照从小到大的顺序写入切片，例如：\n输入： 123456\n处理后：[6,5,4,3,2,1]\n除法这里输入的数字字符串需要按照从大到小的顺序写入切片，例如：\n输入： 123456\n处理后：[1,2,3,4,5,6]\n*/\n\n// 高精度加法\nfunc Add(a, b []int) []int {\n\tc := make([]int, 0)\n\tt := 0\n\tfor i := 0; i < len(a) || i < len(b); i++ {\n\t\tif i < len(a) {\n\t\t\tt += a[i]\n\t\t}\n\t\tif i < len(b) {\n\t\t\tt += b[i]\n\t\t}\n\n\t\tc = append(c, t%10)\n\t\tt /= 10\n\t}\n\tif t != 0 {\n\t\tc = append(c, t)\n\t}\n\treturn c\n}\n\n// 高精度减法；计算a-b。\nfunc Sub(a, b []int) []int {\n\tc := make([]int, 0)\n\tt := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tt += a[i]\n\t\tif i < len(b) {\n\t\t\tt -= b[i]\n\t\t}\n\t\tc = append(c, (t+10)%10)\n\t\tif t < 0 {\n\t\t\tt = -1\n\t\t} else {\n\t\t\tt = 0\n\t\t}\n\t}\n\t// 处理前导0\n\tfor len(c) > 1 && c[len(c)-1] == 0 {\n\t\tc = c[:len(c)-1]\n\t}\n\treturn c\n}\n\n// 高精度乘法：a*b,其中b是正常的数。\nfunc Mul(a []int, b int) []int {\n\tc := make([]int, 0)\n\tt := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tt = a[i]*b + t\n\t\tc = append(c, t%10)\n\t\tt /= 10\n\t}\n\tif t > 0 {\n\t\tc = append(c, t)\n\t}\n\t// 处理前导0\n\tfor len(c) > 1 && c[len(c)-1] == 0 {\n\t\tc = c[:len(c)-1]\n\t}\n\treturn c\n}\n\n// 高精度除法: a/b，其中b是正常的数。\nfunc Div(a []int, b int) (c []int, t int) {\n\tt = 0\n\tfor i := 0; i < len(a); i++ {\n\t\tt = t*10 + a[i]\n\t\tc = append(c, t/b)\n\t\tt %= b\n\t}\n\t// 处理前导0\n\tfor len(c) > 1 && c[0] == 0 {\n\t\tc = c[1:]\n\t}\n\treturn\n}\n\n```\n\n### 5.前缀和\n\n```go\npackage basic\n\n/*\n前缀和常用来便捷处理区间和，例如：\n输入的a为：[1,2,3,4]\n则前缀和s为：[1,3,6,10]\n则区间和s[l, r]= s[r] - s[l-1]\n*/\nfunc PrifixSum_1(a []int) []int {\n\ts := make([]int, len(a))\n\tif len(a) > 0 {\n\t\ts[0] = a[0]\n\t}\n\tfor i := 1; i < len(a); i++ {\n\t\ts[i] = a[i-1] + a[i]\n\t}\n\treturn s\n}\n\n```\n\n### 6.差分\n\n```go\npackage basic\n\n/*\n差分数组用于快速处理给区间[l,r]内的元素均加上或者减去一个值。例如：\n输入a为：[1,4,6,2]\n则差分数组b为：[1,3,2,-4]\n如果要给a数组的区间[l,r]都加上一个c，则b[l]+c,b[r+1]-c\n然后对b数组求一遍前缀和，即可得出调整后的a数组。\n*/\nfunc Difference(a []int) []int {\n\tb := make([]int, len(a)+1)\n\tfor i := 0; i < len(a); i++ {\n\t\tb[i] += a[i]\n\t\tb[i+1] -= a[i]\n\t}\n\treturn b\n}\n\n```\n\n### 7.位运算\n\n```go\npackage basic\n\n// 求n的二进制表示的第k位数字\nfunc TheK(n, k int) int {\n\treturn n >> k & 1\n}\n\n// 求n的二进制表示的最后一位1\nfunc Lowbit(n int) int {\n\treturn n & -n\n}\n\n```\n\n### 8.离散化\n\n```go\npackage basic\n\nimport \"sort\"\n\n// 存储所有待离散化的值\nvar alls []int\n\n// 将所有值排序\nfunc Sort(alls []int) []int {\n\tsort.Ints(alls)\n\treturn alls\n}\n\n// 去掉重复元素\nfunc Unique(alls []int) []int {\n\tres := make([]int, 0)\n\tfor i, j := 0, 0; i < len(alls); i = j {\n\t\tfor j < len(alls) && alls[i] == alls[j] {\n\t\t\tj++\n\t\t}\n\t\tres = append(res, alls[i])\n\t}\n\treturn res\n}\n\n// 二分求出x对应的离散化的值\nfunc Find(x int) int {\n\tl, r := 0, len(alls)-1\n\tfor l < r {\n\t\tmid := l + r>>1\n\t\tif alls[mid] >= x {\n\t\t\tr = mid\n\t\t} else {\n\t\t\tl = mid + 1\n\t\t}\n\t}\n\treturn r + 1\n}\n\n```\n\n### 9.区间合并\n\n```go\npackage basic\n\nimport \"sort\"\n\ntype edge struct {\n\tl, r int\n}\n\n/*\n给定 n个区间 [li,ri]，要求合并所有有交集的区间。例如：\n[1,3]和[2,6]可以合并为一个区间[1,6]。\n*/\nfunc MergeEdge(edges []edge) []edge {\n\t// 按照区间的左端点从小到大排序，左端点一致的，按照右端点从大到小排序\n\tsort.Slice(edges, func(i, j int) bool {\n\t\tif edges[i].l == edges[j].l {\n\t\t\treturn edges[i].r > edges[j].r\n\t\t}\n\t\treturn edges[i].l < edges[j].l\n\t})\n\tres := make([]edge, 0)\n\tfor i, j := 0, 0; i < len(edges); i = j {\n\t\tfor j < len(edges) && edges[i].l < edges[j].r {\n\t\t\tedges[i].r = max(edges[i].r, edges[j].r)\n\t\t}\n\t\tres = append(res, edges[i])\n\t}\n\treturn res\n}\n\n```\n\n","source":"_posts/28.算法基础-基础算法模板.md","raw":"---\ntitle: 基础算法模板\ntype: tags\ncategories:\n  - 学习笔记\ndate: 2024-01-07 10:58:19\ntags:\n- 算法\n- go\n---\n\n## 基础算法模板\n\n### 1.快速排序\n\n```go\npackage basic\n\nfunc QuickSort(q []int, l, r int) {\n\tif l >= r {\n\t\treturn\n\t}\n\n\ti, j, x := l-1, r+1, q[l+r>>1]\n\tfor i < j {\n\t\tfor q[i] < x {\n\t\t\ti++\n\t\t}\n\n\t\tfor q[j] > x {\n\t\t\tj--\n\t\t}\n\n\t\tif i < j {\n\t\t\tq[i], q[j] = q[j], q[i]\n\t\t}\n\t}\n\n\tQuickSort(q, l, i)\n\tQuickSort(q, i+1, r)\n}\n\n```\n\n### 2.归并排序\n\n```go\npackage basic\n\nfunc MergeSort(q []int, l, r int) {\n\tif l >= r {\n\t\treturn\n\t}\n\n\tmid := l + r>>1\n\tMergeSort(q, l, mid)\n\tMergeSort(q, mid+1, r)\n\n\ti, j, k := l, mid+1, 0\n\ttmp := make([]int, r-l+1)\n\tfor i <= mid && j <= r {\n\t\tif q[i] < q[j] {\n\t\t\ttmp[k] = q[i]\n\t\t\tk++\n\t\t\ti++\n\t\t} else {\n\t\t\ttmp[k] = q[j]\n\t\t\tk++\n\t\t\tj++\n\t\t}\n\t}\n\tfor i <= mid {\n\t\ttmp[k] = q[i]\n\t\tk++\n\t\ti++\n\t}\n\tfor j <= r {\n\t\ttmp[k] = q[j]\n\t\tk++\n\t\tj++\n\t}\n\tfor k, v := range tmp {\n\t\tq[l+k] = v\n\t}\n}\n\n```\n\n### 3.二分查找\n\n```go\npackage basic\n\n// 检查x是否满足某种性质\nfunc check(x int) bool {\n\treturn x > 10\n}\n\nfunc checkFloat(x float32) bool {\n\treturn x > 10\n}\n\n// 区间[l,r]被划分成[l,mid]和[mid+1,r]时使用\nfunc Bsearch_1(l, r int) int {\n\tfor l < r {\n\t\tmid := l + r>>1\n\t\tif check(mid) {\n\t\t\tr = mid\n\t\t} else {\n\t\t\tl = mid + 1\n\t\t}\n\t}\n\treturn l\n}\n\n// 区间[l,r]被划分成[l,mid-1]和[mid,r]时使用\nfunc Bsearch_2(l, r int) int {\n\tfor l < r {\n\t\tmid := l + r + 1>>1\n\t\tif check(mid) {\n\t\t\tl = mid\n\t\t} else {\n\t\t\tr = mid - 1\n\t\t}\n\t}\n\treturn l\n}\n\n// 浮点数的二分查找模板\nfunc Bsearch_3(l, r float32) float32 {\n\tconst eps = 1e-6\n\tfor r-l > eps {\n\t\tmid := (l + r) / 2\n\t\tif checkFloat(mid) {\n\t\t\tr = mid\n\t\t} else {\n\t\t\tl = mid\n\t\t}\n\t}\n\treturn l\n}\n\n```\n\n### 4.高精度计算\n\n```go\npackage basic\n\n/*\n处理超大数的加减乘除.\n加减乘这里输入的数字字符串需要按照从小到大的顺序写入切片，例如：\n输入： 123456\n处理后：[6,5,4,3,2,1]\n除法这里输入的数字字符串需要按照从大到小的顺序写入切片，例如：\n输入： 123456\n处理后：[1,2,3,4,5,6]\n*/\n\n// 高精度加法\nfunc Add(a, b []int) []int {\n\tc := make([]int, 0)\n\tt := 0\n\tfor i := 0; i < len(a) || i < len(b); i++ {\n\t\tif i < len(a) {\n\t\t\tt += a[i]\n\t\t}\n\t\tif i < len(b) {\n\t\t\tt += b[i]\n\t\t}\n\n\t\tc = append(c, t%10)\n\t\tt /= 10\n\t}\n\tif t != 0 {\n\t\tc = append(c, t)\n\t}\n\treturn c\n}\n\n// 高精度减法；计算a-b。\nfunc Sub(a, b []int) []int {\n\tc := make([]int, 0)\n\tt := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tt += a[i]\n\t\tif i < len(b) {\n\t\t\tt -= b[i]\n\t\t}\n\t\tc = append(c, (t+10)%10)\n\t\tif t < 0 {\n\t\t\tt = -1\n\t\t} else {\n\t\t\tt = 0\n\t\t}\n\t}\n\t// 处理前导0\n\tfor len(c) > 1 && c[len(c)-1] == 0 {\n\t\tc = c[:len(c)-1]\n\t}\n\treturn c\n}\n\n// 高精度乘法：a*b,其中b是正常的数。\nfunc Mul(a []int, b int) []int {\n\tc := make([]int, 0)\n\tt := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tt = a[i]*b + t\n\t\tc = append(c, t%10)\n\t\tt /= 10\n\t}\n\tif t > 0 {\n\t\tc = append(c, t)\n\t}\n\t// 处理前导0\n\tfor len(c) > 1 && c[len(c)-1] == 0 {\n\t\tc = c[:len(c)-1]\n\t}\n\treturn c\n}\n\n// 高精度除法: a/b，其中b是正常的数。\nfunc Div(a []int, b int) (c []int, t int) {\n\tt = 0\n\tfor i := 0; i < len(a); i++ {\n\t\tt = t*10 + a[i]\n\t\tc = append(c, t/b)\n\t\tt %= b\n\t}\n\t// 处理前导0\n\tfor len(c) > 1 && c[0] == 0 {\n\t\tc = c[1:]\n\t}\n\treturn\n}\n\n```\n\n### 5.前缀和\n\n```go\npackage basic\n\n/*\n前缀和常用来便捷处理区间和，例如：\n输入的a为：[1,2,3,4]\n则前缀和s为：[1,3,6,10]\n则区间和s[l, r]= s[r] - s[l-1]\n*/\nfunc PrifixSum_1(a []int) []int {\n\ts := make([]int, len(a))\n\tif len(a) > 0 {\n\t\ts[0] = a[0]\n\t}\n\tfor i := 1; i < len(a); i++ {\n\t\ts[i] = a[i-1] + a[i]\n\t}\n\treturn s\n}\n\n```\n\n### 6.差分\n\n```go\npackage basic\n\n/*\n差分数组用于快速处理给区间[l,r]内的元素均加上或者减去一个值。例如：\n输入a为：[1,4,6,2]\n则差分数组b为：[1,3,2,-4]\n如果要给a数组的区间[l,r]都加上一个c，则b[l]+c,b[r+1]-c\n然后对b数组求一遍前缀和，即可得出调整后的a数组。\n*/\nfunc Difference(a []int) []int {\n\tb := make([]int, len(a)+1)\n\tfor i := 0; i < len(a); i++ {\n\t\tb[i] += a[i]\n\t\tb[i+1] -= a[i]\n\t}\n\treturn b\n}\n\n```\n\n### 7.位运算\n\n```go\npackage basic\n\n// 求n的二进制表示的第k位数字\nfunc TheK(n, k int) int {\n\treturn n >> k & 1\n}\n\n// 求n的二进制表示的最后一位1\nfunc Lowbit(n int) int {\n\treturn n & -n\n}\n\n```\n\n### 8.离散化\n\n```go\npackage basic\n\nimport \"sort\"\n\n// 存储所有待离散化的值\nvar alls []int\n\n// 将所有值排序\nfunc Sort(alls []int) []int {\n\tsort.Ints(alls)\n\treturn alls\n}\n\n// 去掉重复元素\nfunc Unique(alls []int) []int {\n\tres := make([]int, 0)\n\tfor i, j := 0, 0; i < len(alls); i = j {\n\t\tfor j < len(alls) && alls[i] == alls[j] {\n\t\t\tj++\n\t\t}\n\t\tres = append(res, alls[i])\n\t}\n\treturn res\n}\n\n// 二分求出x对应的离散化的值\nfunc Find(x int) int {\n\tl, r := 0, len(alls)-1\n\tfor l < r {\n\t\tmid := l + r>>1\n\t\tif alls[mid] >= x {\n\t\t\tr = mid\n\t\t} else {\n\t\t\tl = mid + 1\n\t\t}\n\t}\n\treturn r + 1\n}\n\n```\n\n### 9.区间合并\n\n```go\npackage basic\n\nimport \"sort\"\n\ntype edge struct {\n\tl, r int\n}\n\n/*\n给定 n个区间 [li,ri]，要求合并所有有交集的区间。例如：\n[1,3]和[2,6]可以合并为一个区间[1,6]。\n*/\nfunc MergeEdge(edges []edge) []edge {\n\t// 按照区间的左端点从小到大排序，左端点一致的，按照右端点从大到小排序\n\tsort.Slice(edges, func(i, j int) bool {\n\t\tif edges[i].l == edges[j].l {\n\t\t\treturn edges[i].r > edges[j].r\n\t\t}\n\t\treturn edges[i].l < edges[j].l\n\t})\n\tres := make([]edge, 0)\n\tfor i, j := 0, 0; i < len(edges); i = j {\n\t\tfor j < len(edges) && edges[i].l < edges[j].r {\n\t\t\tedges[i].r = max(edges[i].r, edges[j].r)\n\t\t}\n\t\tres = append(res, edges[i])\n\t}\n\treturn res\n}\n\n```\n\n","slug":"28.算法基础-基础算法模板","published":1,"updated":"2024-01-07T06:59:12.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1ds001n0cfvb5lj7vi8","content":"<h2 id=\"基础算法模板\"><a href=\"#基础算法模板\" class=\"headerlink\" title=\"基础算法模板\"></a>基础算法模板</h2><h3 id=\"1-快速排序\"><a href=\"#1-快速排序\" class=\"headerlink\" title=\"1.快速排序\"></a>1.快速排序</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSort</span><span class=\"params\">(q []<span class=\"type\">int</span>, l, r <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l &gt;= r &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ti, j, x := l<span class=\"number\">-1</span>, r+<span class=\"number\">1</span>, q[l+r&gt;&gt;<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt; j &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> q[i] &lt; x &#123;</span><br><span class=\"line\">\t\t\ti++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> q[j] &gt; x &#123;</span><br><span class=\"line\">\t\t\tj--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; j &#123;</span><br><span class=\"line\">\t\t\tq[i], q[j] = q[j], q[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQuickSort(q, l, i)</span><br><span class=\"line\">\tQuickSort(q, i+<span class=\"number\">1</span>, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MergeSort</span><span class=\"params\">(q []<span class=\"type\">int</span>, l, r <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l &gt;= r &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmid := l + r&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\tMergeSort(q, l, mid)</span><br><span class=\"line\">\tMergeSort(q, mid+<span class=\"number\">1</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\ti, j, k := l, mid+<span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\ttmp := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, r-l+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt;= mid &amp;&amp; j &lt;= r &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> q[i] &lt; q[j] &#123;</span><br><span class=\"line\">\t\t\ttmp[k] = q[i]</span><br><span class=\"line\">\t\t\tk++</span><br><span class=\"line\">\t\t\ti++</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttmp[k] = q[j]</span><br><span class=\"line\">\t\t\tk++</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt;= mid &#123;</span><br><span class=\"line\">\t\ttmp[k] = q[i]</span><br><span class=\"line\">\t\tk++</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j &lt;= r &#123;</span><br><span class=\"line\">\t\ttmp[k] = q[j]</span><br><span class=\"line\">\t\tk++</span><br><span class=\"line\">\t\tj++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> tmp &#123;</span><br><span class=\"line\">\t\tq[l+k] = v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-二分查找\"><a href=\"#3-二分查找\" class=\"headerlink\" title=\"3.二分查找\"></a>3.二分查找</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查x是否满足某种性质</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkFloat</span><span class=\"params\">(x <span class=\"type\">float32</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 区间[l,r]被划分成[l,mid]和[mid+1,r]时使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bsearch_1</span><span class=\"params\">(l, r <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> l &lt; r &#123;</span><br><span class=\"line\">\t\tmid := l + r&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check(mid) &#123;</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tl = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 区间[l,r]被划分成[l,mid-1]和[mid,r]时使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bsearch_2</span><span class=\"params\">(l, r <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> l &lt; r &#123;</span><br><span class=\"line\">\t\tmid := l + r + <span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check(mid) &#123;</span><br><span class=\"line\">\t\t\tl = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tr = mid - <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数的二分查找模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bsearch_3</span><span class=\"params\">(l, r <span class=\"type\">float32</span>)</span></span> <span class=\"type\">float32</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> eps = <span class=\"number\">1e-6</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> r-l &gt; eps &#123;</span><br><span class=\"line\">\t\tmid := (l + r) / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> checkFloat(mid) &#123;</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tl = mid</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-高精度计算\"><a href=\"#4-高精度计算\" class=\"headerlink\" title=\"4.高精度计算\"></a>4.高精度计算</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">处理超大数的加减乘除.</span></span><br><span class=\"line\"><span class=\"comment\">加减乘这里输入的数字字符串需要按照从小到大的顺序写入切片，例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入： 123456</span></span><br><span class=\"line\"><span class=\"comment\">处理后：[6,5,4,3,2,1]</span></span><br><span class=\"line\"><span class=\"comment\">除法这里输入的数字字符串需要按照从大到小的顺序写入切片，例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入： 123456</span></span><br><span class=\"line\"><span class=\"comment\">处理后：[1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度加法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tt := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a) || i &lt; <span class=\"built_in\">len</span>(b); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(a) &#123;</span><br><span class=\"line\">\t\t\tt += a[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(b) &#123;</span><br><span class=\"line\">\t\t\tt += b[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t%<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tt /= <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度减法；计算a-b。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sub</span><span class=\"params\">(a, b []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tt := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tt += a[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(b) &#123;</span><br><span class=\"line\">\t\t\tt -= b[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, (t+<span class=\"number\">10</span>)%<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tt = <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tt = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(c) &gt; <span class=\"number\">1</span> &amp;&amp; c[<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = c[:<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度乘法：a*b,其中b是正常的数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mul</span><span class=\"params\">(a []<span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tt := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tt = a[i]*b + t</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t%<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tt /= <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(c) &gt; <span class=\"number\">1</span> &amp;&amp; c[<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = c[:<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度除法: a/b，其中b是正常的数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Div</span><span class=\"params\">(a []<span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> (c []<span class=\"type\">int</span>, t <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tt = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tt = t*<span class=\"number\">10</span> + a[i]</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t/b)</span><br><span class=\"line\">\t\tt %= b</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(c) &gt; <span class=\"number\">1</span> &amp;&amp; c[<span class=\"number\">0</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = c[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-前缀和\"><a href=\"#5-前缀和\" class=\"headerlink\" title=\"5.前缀和\"></a>5.前缀和</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">前缀和常用来便捷处理区间和，例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入的a为：[1,2,3,4]</span></span><br><span class=\"line\"><span class=\"comment\">则前缀和s为：[1,3,6,10]</span></span><br><span class=\"line\"><span class=\"comment\">则区间和s[l, r]= s[r] - s[l-1]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PrifixSum_1</span><span class=\"params\">(a []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\ts := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ts[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\ts[i] = a[i<span class=\"number\">-1</span>] + a[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-差分\"><a href=\"#6-差分\" class=\"headerlink\" title=\"6.差分\"></a>6.差分</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">差分数组用于快速处理给区间[l,r]内的元素均加上或者减去一个值。例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入a为：[1,4,6,2]</span></span><br><span class=\"line\"><span class=\"comment\">则差分数组b为：[1,3,2,-4]</span></span><br><span class=\"line\"><span class=\"comment\">如果要给a数组的区间[l,r]都加上一个c，则b[l]+c,b[r+1]-c</span></span><br><span class=\"line\"><span class=\"comment\">然后对b数组求一遍前缀和，即可得出调整后的a数组。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Difference</span><span class=\"params\">(a []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(a)+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tb[i] += a[i]</span><br><span class=\"line\">\t\tb[i+<span class=\"number\">1</span>] -= a[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-位运算\"><a href=\"#7-位运算\" class=\"headerlink\" title=\"7.位运算\"></a>7.位运算</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求n的二进制表示的第k位数字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TheK</span><span class=\"params\">(n, k <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n &gt;&gt; k &amp; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求n的二进制表示的最后一位1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Lowbit</span><span class=\"params\">(n <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n &amp; -n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-离散化\"><a href=\"#8-离散化\" class=\"headerlink\" title=\"8.离散化\"></a>8.离散化</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储所有待离散化的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> alls []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将所有值排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sort</span><span class=\"params\">(alls []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tsort.Ints(alls)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> alls</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉重复元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Unique</span><span class=\"params\">(alls []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(alls); i = j &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &lt; <span class=\"built_in\">len</span>(alls) &amp;&amp; alls[i] == alls[j] &#123;</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, alls[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二分求出x对应的离散化的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Find</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tl, r := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(alls)<span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> l &lt; r &#123;</span><br><span class=\"line\">\t\tmid := l + r&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> alls[mid] &gt;= x &#123;</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tl = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-区间合并\"><a href=\"#9-区间合并\" class=\"headerlink\" title=\"9.区间合并\"></a>9.区间合并</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> edge <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tl, r <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">给定 n个区间 [li,ri]，要求合并所有有交集的区间。例如：</span></span><br><span class=\"line\"><span class=\"comment\">[1,3]和[2,6]可以合并为一个区间[1,6]。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MergeEdge</span><span class=\"params\">(edges []edge)</span></span> []edge &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 按照区间的左端点从小到大排序，左端点一致的，按照右端点从大到小排序</span></span><br><span class=\"line\">\tsort.Slice(edges, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> edges[i].l == edges[j].l &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> edges[i].r &gt; edges[j].r</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges[i].l &lt; edges[j].l</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tres := <span class=\"built_in\">make</span>([]edge, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(edges); i = j &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &lt; <span class=\"built_in\">len</span>(edges) &amp;&amp; edges[i].l &lt; edges[j].r &#123;</span><br><span class=\"line\">\t\t\tedges[i].r = max(edges[i].r, edges[j].r)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, edges[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover10.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"基础算法模板\"><a href=\"#基础算法模板\" class=\"headerlink\" title=\"基础算法模板\"></a>基础算法模板</h2><h3 id=\"1-快速排序\"><a href=\"#1-快速排序\" class=\"headerlink\" title=\"1.快速排序\"></a>1.快速排序</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSort</span><span class=\"params\">(q []<span class=\"type\">int</span>, l, r <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l &gt;= r &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ti, j, x := l<span class=\"number\">-1</span>, r+<span class=\"number\">1</span>, q[l+r&gt;&gt;<span class=\"number\">1</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt; j &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> q[i] &lt; x &#123;</span><br><span class=\"line\">\t\t\ti++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> q[j] &gt; x &#123;</span><br><span class=\"line\">\t\t\tj--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; j &#123;</span><br><span class=\"line\">\t\t\tq[i], q[j] = q[j], q[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQuickSort(q, l, i)</span><br><span class=\"line\">\tQuickSort(q, i+<span class=\"number\">1</span>, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MergeSort</span><span class=\"params\">(q []<span class=\"type\">int</span>, l, r <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l &gt;= r &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmid := l + r&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\tMergeSort(q, l, mid)</span><br><span class=\"line\">\tMergeSort(q, mid+<span class=\"number\">1</span>, r)</span><br><span class=\"line\"></span><br><span class=\"line\">\ti, j, k := l, mid+<span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\ttmp := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, r-l+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt;= mid &amp;&amp; j &lt;= r &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> q[i] &lt; q[j] &#123;</span><br><span class=\"line\">\t\t\ttmp[k] = q[i]</span><br><span class=\"line\">\t\t\tk++</span><br><span class=\"line\">\t\t\ti++</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\ttmp[k] = q[j]</span><br><span class=\"line\">\t\t\tk++</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt;= mid &#123;</span><br><span class=\"line\">\t\ttmp[k] = q[i]</span><br><span class=\"line\">\t\tk++</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j &lt;= r &#123;</span><br><span class=\"line\">\t\ttmp[k] = q[j]</span><br><span class=\"line\">\t\tk++</span><br><span class=\"line\">\t\tj++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> tmp &#123;</span><br><span class=\"line\">\t\tq[l+k] = v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-二分查找\"><a href=\"#3-二分查找\" class=\"headerlink\" title=\"3.二分查找\"></a>3.二分查找</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查x是否满足某种性质</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">checkFloat</span><span class=\"params\">(x <span class=\"type\">float32</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 区间[l,r]被划分成[l,mid]和[mid+1,r]时使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bsearch_1</span><span class=\"params\">(l, r <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> l &lt; r &#123;</span><br><span class=\"line\">\t\tmid := l + r&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check(mid) &#123;</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tl = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 区间[l,r]被划分成[l,mid-1]和[mid,r]时使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bsearch_2</span><span class=\"params\">(l, r <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> l &lt; r &#123;</span><br><span class=\"line\">\t\tmid := l + r + <span class=\"number\">1</span>&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check(mid) &#123;</span><br><span class=\"line\">\t\t\tl = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tr = mid - <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数的二分查找模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bsearch_3</span><span class=\"params\">(l, r <span class=\"type\">float32</span>)</span></span> <span class=\"type\">float32</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> eps = <span class=\"number\">1e-6</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> r-l &gt; eps &#123;</span><br><span class=\"line\">\t\tmid := (l + r) / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> checkFloat(mid) &#123;</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tl = mid</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-高精度计算\"><a href=\"#4-高精度计算\" class=\"headerlink\" title=\"4.高精度计算\"></a>4.高精度计算</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">处理超大数的加减乘除.</span></span><br><span class=\"line\"><span class=\"comment\">加减乘这里输入的数字字符串需要按照从小到大的顺序写入切片，例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入： 123456</span></span><br><span class=\"line\"><span class=\"comment\">处理后：[6,5,4,3,2,1]</span></span><br><span class=\"line\"><span class=\"comment\">除法这里输入的数字字符串需要按照从大到小的顺序写入切片，例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入： 123456</span></span><br><span class=\"line\"><span class=\"comment\">处理后：[1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度加法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tt := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a) || i &lt; <span class=\"built_in\">len</span>(b); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(a) &#123;</span><br><span class=\"line\">\t\t\tt += a[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(b) &#123;</span><br><span class=\"line\">\t\t\tt += b[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t%<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tt /= <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度减法；计算a-b。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sub</span><span class=\"params\">(a, b []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tt := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tt += a[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(b) &#123;</span><br><span class=\"line\">\t\t\tt -= b[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, (t+<span class=\"number\">10</span>)%<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tt = <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tt = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(c) &gt; <span class=\"number\">1</span> &amp;&amp; c[<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = c[:<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度乘法：a*b,其中b是正常的数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mul</span><span class=\"params\">(a []<span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tt := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tt = a[i]*b + t</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t%<span class=\"number\">10</span>)</span><br><span class=\"line\">\t\tt /= <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(c) &gt; <span class=\"number\">1</span> &amp;&amp; c[<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = c[:<span class=\"built_in\">len</span>(c)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高精度除法: a/b，其中b是正常的数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Div</span><span class=\"params\">(a []<span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> (c []<span class=\"type\">int</span>, t <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tt = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tt = t*<span class=\"number\">10</span> + a[i]</span><br><span class=\"line\">\t\tc = <span class=\"built_in\">append</span>(c, t/b)</span><br><span class=\"line\">\t\tt %= b</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 处理前导0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(c) &gt; <span class=\"number\">1</span> &amp;&amp; c[<span class=\"number\">0</span>] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tc = c[<span class=\"number\">1</span>:]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-前缀和\"><a href=\"#5-前缀和\" class=\"headerlink\" title=\"5.前缀和\"></a>5.前缀和</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">前缀和常用来便捷处理区间和，例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入的a为：[1,2,3,4]</span></span><br><span class=\"line\"><span class=\"comment\">则前缀和s为：[1,3,6,10]</span></span><br><span class=\"line\"><span class=\"comment\">则区间和s[l, r]= s[r] - s[l-1]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PrifixSum_1</span><span class=\"params\">(a []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\ts := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(a))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\ts[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\ts[i] = a[i<span class=\"number\">-1</span>] + a[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-差分\"><a href=\"#6-差分\" class=\"headerlink\" title=\"6.差分\"></a>6.差分</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">差分数组用于快速处理给区间[l,r]内的元素均加上或者减去一个值。例如：</span></span><br><span class=\"line\"><span class=\"comment\">输入a为：[1,4,6,2]</span></span><br><span class=\"line\"><span class=\"comment\">则差分数组b为：[1,3,2,-4]</span></span><br><span class=\"line\"><span class=\"comment\">如果要给a数组的区间[l,r]都加上一个c，则b[l]+c,b[r+1]-c</span></span><br><span class=\"line\"><span class=\"comment\">然后对b数组求一遍前缀和，即可得出调整后的a数组。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Difference</span><span class=\"params\">(a []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(a)+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">\t\tb[i] += a[i]</span><br><span class=\"line\">\t\tb[i+<span class=\"number\">1</span>] -= a[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-位运算\"><a href=\"#7-位运算\" class=\"headerlink\" title=\"7.位运算\"></a>7.位运算</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求n的二进制表示的第k位数字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TheK</span><span class=\"params\">(n, k <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n &gt;&gt; k &amp; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求n的二进制表示的最后一位1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Lowbit</span><span class=\"params\">(n <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n &amp; -n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-离散化\"><a href=\"#8-离散化\" class=\"headerlink\" title=\"8.离散化\"></a>8.离散化</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储所有待离散化的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> alls []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将所有值排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sort</span><span class=\"params\">(alls []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tsort.Ints(alls)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> alls</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去掉重复元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Unique</span><span class=\"params\">(alls []<span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(alls); i = j &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &lt; <span class=\"built_in\">len</span>(alls) &amp;&amp; alls[i] == alls[j] &#123;</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, alls[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二分求出x对应的离散化的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Find</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tl, r := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(alls)<span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> l &lt; r &#123;</span><br><span class=\"line\">\t\tmid := l + r&gt;&gt;<span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> alls[mid] &gt;= x &#123;</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tl = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-区间合并\"><a href=\"#9-区间合并\" class=\"headerlink\" title=\"9.区间合并\"></a>9.区间合并</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> edge <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tl, r <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">给定 n个区间 [li,ri]，要求合并所有有交集的区间。例如：</span></span><br><span class=\"line\"><span class=\"comment\">[1,3]和[2,6]可以合并为一个区间[1,6]。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MergeEdge</span><span class=\"params\">(edges []edge)</span></span> []edge &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 按照区间的左端点从小到大排序，左端点一致的，按照右端点从大到小排序</span></span><br><span class=\"line\">\tsort.Slice(edges, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> edges[i].l == edges[j].l &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> edges[i].r &gt; edges[j].r</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges[i].l &lt; edges[j].l</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tres := <span class=\"built_in\">make</span>([]edge, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(edges); i = j &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &lt; <span class=\"built_in\">len</span>(edges) &amp;&amp; edges[i].l &lt; edges[j].r &#123;</span><br><span class=\"line\">\t\t\tedges[i].r = max(edges[i].r, edges[j].r)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, edges[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"test","type":"tags","date":"2024-01-07T13:53:42.000Z","_content":"\n## 数据结构模板\n\n### 1.单链表\n\n```go\npackage datastructure\n\n// 静态链表\n// head存储链表头，e存储节点的值，ne存储节点的next指针，idx表示当前用到了哪个节点\nvar (\n\thead int\n\te    []int\n\tne   []int\n\tidx  int\n)\n\n// 初始化\nfunc init() {\n\thead = -1\n\tidx = 0\n}\n\n// 在链表头插入一个数a\nfunc Inserthead(a int) {\n\te[idx] = a\n\tne[idx] = head\n\thead = idx\n\tidx++\n}\n\n// 将头节点删除\nfunc Removehead() {\n\tif head != -1 {\n\t\thead = ne[head]\n\t}\n}\n\n```\n\n### 2.双链表\n\n```go\npackage datastructure\n\nvar (\n\t// e   []int\n\tl []int\n\tr []int\n\t// idx int\n)\n\nfunc init() {\n\t// 0是左端点，1是右端点\n\tr[0] = 1\n\tl[1] = 0\n\tidx = 2\n}\n\n// 在节点a的右边插入一个数x\nfunc InsertR(a, x int) {\n\te[idx] = x\n\tl[idx] = a\n\tr[idx] = r[a]\n\tl[r[a]] = idx\n\tr[a] = idx\n\tidx++\n}\n\n// 删除节点a\nfunc Remove(a int) {\n\tl[r[a]] = l[a]\n\tr[l[a]] = r[a]\n}\n\n```\n\n### 3.栈\n\n```go\npackage datastructure\n\n// stk表示栈，tt表示栈顶\nvar (\n\tstk []int\n\ttt  int\n)\n\n// 向栈顶插入一个数\nfunc InsertTop(x int) {\n\ttt++\n\tstk[tt] = x\n}\n\n// 从栈顶弹出一个数\nfunc RemoveTop() {\n\ttt--\n}\n\n// 获取栈顶的值\nfunc Query() int {\n\treturn stk[tt]\n}\n\n// 判断栈是否为空\nfunc EmptyStk() bool {\n\treturn tt <= 0\n}\n\n/*\n单调栈\n常见模型：找出每个数左边离它最近的比它大/小的数\n*/\n\nvar n int\n\nfunc MonotonicStack() {\n\tfor i := 1; i <= n; i++ {\n\t\tfor !EmptyStk() && check(stk[tt], i) {\n\t\t\ttt--\n\t\t}\n\n\t\tInsertTop(i)\n\t}\n}\n\n// 判断a，b的某种性质\nfunc check(a, b int) bool {\n\treturn a < b\n}\n\n```\n\n### 4.队列\n\n```go\npackage datastructure\n\n// q模拟队列，hh表示队头，tt表示队尾\nvar (\n\tq  []int\n\thh int = 0\n\t// tt int = -1\n)\n\n// 向队尾插入一个数\nfunc InsertTail(x int) {\n\ttt++\n\tq[tt] = x\n}\n\n// 从队头弹出一个数\nfunc RemoveT() {\n\thh++\n}\n\n// 取出队头的值\nfunc QueryQ() int {\n\treturn q[hh]\n}\n\n// 判断队列是否为空\nfunc EmptyQ() bool {\n\treturn hh > tt\n}\n\n/*\n单调队列\n常见模型：找出滑动窗口中的最大值/最小值\n*/\nfunc MonotonicQueue() {\n\tfor i := 0; i < n; i++ {\n\t\tfor !EmptyQ() && check_out(q[hh]) {\n\t\t\thh++\n\t\t}\n\n\t\tfor !EmptyQ() && check(q[tt], i) {\n\t\t\ttt--\n\t\t}\n\t\tInsertTail(i)\n\t}\n}\n\n// 判断队头是否符合性质，是否需要移除滑动窗口\nfunc check_out(x int) bool {\n\treturn true\n}\n\n```\n\n### 5.KMP\n\n```go\npackage datastructure\n\n/*\ns是长文本\np是模式串\n需要预处理，例如：\ns = \"bschueoan\"\n处理后：s = \" bschueoan\"\n*/\nvar (\n\ts, p string\n\tnext []int\n)\n\n// 求模式串的next数组\nfunc CalNext() {\n\tfor i, j := 2, 0; i <= len(p)-1; i++ {\n\t\tfor j > 0 && p[i] != p[j+1] {\n\t\t\tj = next[j]\n\t\t}\n\t\tif p[i] == p[j+1] {\n\t\t\tj++\n\t\t}\n\t\tnext[i] = j\n\t}\n}\n\n// KMP匹配\nfunc Matching() {\n\tfor i, j := 1, 0; i < len(s)-1; i++ {\n\t\tfor j > 0 && s[i] != p[j+1] {\n\t\t\tj = next[j]\n\t\t}\n\t\tif s[i] == p[j+1] {\n\t\t\tj++\n\t\t}\n\t\tif j == len(p)-1 {\n\t\t\tj = next[j]\n\t\t\t// 匹配成功后的逻辑\n\t\t}\n\t}\n}\n\n```\n\n### 6.trie树\n\n```go\npackage datastructure\n\n/*\n0号节点既是根节点，又是空节点\nson存储树中每个节点的子节点\ncnt存储以每个节点结尾的单词数量\n*/\nvar (\n\tson [][26]int\n\tcnt []int\n\t// idx int\n)\n\n// 插入一个字符串\nfunc InsertStr(str string) {\n\tp := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tu := int(str[i] - 'a')\n\t\tif son[p][u] == 0 {\n\t\t\tidx++\n\t\t\tson[p][u] = idx\n\t\t}\n\t\tp = son[p][u]\n\t}\n\tcnt[p]++\n}\n\n// 查询字符串出现的次数\nfunc QueryTrie(str string) int {\n\tp := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tu := int(str[i] - 'a')\n\t\tif son[p][u] == 0 {\n\t\t\treturn 0\n\t\t}\n\t\tp = son[p][u]\n\t}\n\treturn cnt[p]\n}\n\n```\n\n### 7.并查集\n\n```go\npackage datastructure\n\n/*\n朴素并查集\npa 存储每个点的祖宗节点\nsize 表示祖宗节点所在集合的点的数量。size只有祖宗节点的才有意义\n*/\n\nvar pa, size []int\n\n// 返回x的祖宗节点\nfunc Find(x int) int {\n\tif pa[x] != x {\n\t\tpa[x] = Find(pa[x])\n\t}\n\treturn pa[x]\n}\n\n// 初始化，假定节点编号是1~n\nfunc init() {\n\tfor i := 1; i <= n; i++ {\n\t\tpa[i] = i\n\t\t// size初始化\n\t\tsize[i] = 1\n\t}\n}\n\n// 合并a和b所在的两个集合\nfunc MergeSet(a, b int) {\n\tpa[Find(a)] = Find(b)\n\t// 处理size\n\tsize[Find(b)] += size[Find(a)]\n}\n\n```\n\n### 8.堆\n\n```go\npackage datastructure\n\n/*\nheap 存储堆中的值，和h[1]是对顶，x的左儿子是2x，x的右儿子是2x+1\nsizeH 表示堆的大小\n*/\n\nvar (\n\theap  []int\n\tsizeH int\n)\n\n// 向下排序\nfunc Down(u int) {\n\tt := u\n\tif u*2 <= sizeH && heap[u*2] < heap[t] {\n\t\tt = u * 2\n\t}\n\n\tif u*2+1 <= sizeH && heap[u*2+1] < heap[t] {\n\t\tt = u*2 + 1\n\t}\n\tif t != u {\n\t\theap[t], heap[u] = heap[u], heap[t]\n\t}\n}\n\n// 向上排序\nfunc Up(u int) {\n\tfor u/2 > 0 && heap[u] < heap[u/2] {\n\t\theap[u], heap[u/2] = heap[u/2], heap[u]\n\t\tu /= 2\n\t}\n}\n\n// O(n)建堆\nfunc Build() {\n\tfor i := n / 2; i > 0; i-- {\n\t\tDown(i)\n\t}\n}\n\n```\n\n### 9.一般哈希\n\n```go\npackage datastructure\n\n/*\n1.拉链法\nmod 为模数\n*/\nvar h []int\n\nconst mod = 1e6\n\n//向哈希表中插入一个数\nfunc InsertHash(x int) {\n\tk := (x%mod + mod) % mod\n\te[idx] = x\n\tne[idx] = h[k]\n\th[k] = idx\n\tidx++\n}\n\n// 在hash表中查询某个数是否存在\nfunc FindHash_1(x int) bool {\n\tk := (x%mod + mod) % mod\n\tfor i := h[k]; i != -1; i = ne[i] {\n\t\tif e[i] == x {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n/*\n2.开放寻址法\nN 为h的最大长度\n*/\nvar N int\n\n// 如果x在哈希表中，返回x的下标，如果不在哈希表中，返回x应该插入的位置\nfunc FindHash_2(x int) int {\n\tk := (x%mod + mod) % mod\n\tfor h[k] != 0 && h[k] != x {\n\t\tk++\n\t\tif k == N {\n\t\t\tk = 0\n\t\t}\n\t}\n\treturn k\n}\n\n```\n\n### 10.字符串哈希\n\n```go\npackage datastructure\n\n/*\n核心思想：将字符串看成是P进制数，P的经验值是131或者13331\nhash[k] 存储字符串前k个字母的哈希值\npe[k]存储P的k次方\n*/\nconst P = 131\n\nvar (\n\thash, pe []uint64\n\tstr      string\n)\n\n// 初始化\nfunc init() {\n\tfor i := 1; i <= n; i++ {\n\t\thash[i] = hash[i-1]*P + uint64(str[i])\n\t\tpe[i] = pe[i-1] * P\n\t}\n}\n\n// 计算子串str[l:r]的哈希值\nfunc GetHash(l, r int) uint64 {\n\treturn hash[r] - hash[l-1]*pe[r-l+1]\n}\n```\n\n","source":"_posts/29.算法基础-数据结构模板.md","raw":"---\ntitle: test\ntype: tags\ncategories:\n  - 学习笔记\ndate: 2024-01-07 21:53:42\ntags:\n- go\n- 算法\n---\n\n## 数据结构模板\n\n### 1.单链表\n\n```go\npackage datastructure\n\n// 静态链表\n// head存储链表头，e存储节点的值，ne存储节点的next指针，idx表示当前用到了哪个节点\nvar (\n\thead int\n\te    []int\n\tne   []int\n\tidx  int\n)\n\n// 初始化\nfunc init() {\n\thead = -1\n\tidx = 0\n}\n\n// 在链表头插入一个数a\nfunc Inserthead(a int) {\n\te[idx] = a\n\tne[idx] = head\n\thead = idx\n\tidx++\n}\n\n// 将头节点删除\nfunc Removehead() {\n\tif head != -1 {\n\t\thead = ne[head]\n\t}\n}\n\n```\n\n### 2.双链表\n\n```go\npackage datastructure\n\nvar (\n\t// e   []int\n\tl []int\n\tr []int\n\t// idx int\n)\n\nfunc init() {\n\t// 0是左端点，1是右端点\n\tr[0] = 1\n\tl[1] = 0\n\tidx = 2\n}\n\n// 在节点a的右边插入一个数x\nfunc InsertR(a, x int) {\n\te[idx] = x\n\tl[idx] = a\n\tr[idx] = r[a]\n\tl[r[a]] = idx\n\tr[a] = idx\n\tidx++\n}\n\n// 删除节点a\nfunc Remove(a int) {\n\tl[r[a]] = l[a]\n\tr[l[a]] = r[a]\n}\n\n```\n\n### 3.栈\n\n```go\npackage datastructure\n\n// stk表示栈，tt表示栈顶\nvar (\n\tstk []int\n\ttt  int\n)\n\n// 向栈顶插入一个数\nfunc InsertTop(x int) {\n\ttt++\n\tstk[tt] = x\n}\n\n// 从栈顶弹出一个数\nfunc RemoveTop() {\n\ttt--\n}\n\n// 获取栈顶的值\nfunc Query() int {\n\treturn stk[tt]\n}\n\n// 判断栈是否为空\nfunc EmptyStk() bool {\n\treturn tt <= 0\n}\n\n/*\n单调栈\n常见模型：找出每个数左边离它最近的比它大/小的数\n*/\n\nvar n int\n\nfunc MonotonicStack() {\n\tfor i := 1; i <= n; i++ {\n\t\tfor !EmptyStk() && check(stk[tt], i) {\n\t\t\ttt--\n\t\t}\n\n\t\tInsertTop(i)\n\t}\n}\n\n// 判断a，b的某种性质\nfunc check(a, b int) bool {\n\treturn a < b\n}\n\n```\n\n### 4.队列\n\n```go\npackage datastructure\n\n// q模拟队列，hh表示队头，tt表示队尾\nvar (\n\tq  []int\n\thh int = 0\n\t// tt int = -1\n)\n\n// 向队尾插入一个数\nfunc InsertTail(x int) {\n\ttt++\n\tq[tt] = x\n}\n\n// 从队头弹出一个数\nfunc RemoveT() {\n\thh++\n}\n\n// 取出队头的值\nfunc QueryQ() int {\n\treturn q[hh]\n}\n\n// 判断队列是否为空\nfunc EmptyQ() bool {\n\treturn hh > tt\n}\n\n/*\n单调队列\n常见模型：找出滑动窗口中的最大值/最小值\n*/\nfunc MonotonicQueue() {\n\tfor i := 0; i < n; i++ {\n\t\tfor !EmptyQ() && check_out(q[hh]) {\n\t\t\thh++\n\t\t}\n\n\t\tfor !EmptyQ() && check(q[tt], i) {\n\t\t\ttt--\n\t\t}\n\t\tInsertTail(i)\n\t}\n}\n\n// 判断队头是否符合性质，是否需要移除滑动窗口\nfunc check_out(x int) bool {\n\treturn true\n}\n\n```\n\n### 5.KMP\n\n```go\npackage datastructure\n\n/*\ns是长文本\np是模式串\n需要预处理，例如：\ns = \"bschueoan\"\n处理后：s = \" bschueoan\"\n*/\nvar (\n\ts, p string\n\tnext []int\n)\n\n// 求模式串的next数组\nfunc CalNext() {\n\tfor i, j := 2, 0; i <= len(p)-1; i++ {\n\t\tfor j > 0 && p[i] != p[j+1] {\n\t\t\tj = next[j]\n\t\t}\n\t\tif p[i] == p[j+1] {\n\t\t\tj++\n\t\t}\n\t\tnext[i] = j\n\t}\n}\n\n// KMP匹配\nfunc Matching() {\n\tfor i, j := 1, 0; i < len(s)-1; i++ {\n\t\tfor j > 0 && s[i] != p[j+1] {\n\t\t\tj = next[j]\n\t\t}\n\t\tif s[i] == p[j+1] {\n\t\t\tj++\n\t\t}\n\t\tif j == len(p)-1 {\n\t\t\tj = next[j]\n\t\t\t// 匹配成功后的逻辑\n\t\t}\n\t}\n}\n\n```\n\n### 6.trie树\n\n```go\npackage datastructure\n\n/*\n0号节点既是根节点，又是空节点\nson存储树中每个节点的子节点\ncnt存储以每个节点结尾的单词数量\n*/\nvar (\n\tson [][26]int\n\tcnt []int\n\t// idx int\n)\n\n// 插入一个字符串\nfunc InsertStr(str string) {\n\tp := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tu := int(str[i] - 'a')\n\t\tif son[p][u] == 0 {\n\t\t\tidx++\n\t\t\tson[p][u] = idx\n\t\t}\n\t\tp = son[p][u]\n\t}\n\tcnt[p]++\n}\n\n// 查询字符串出现的次数\nfunc QueryTrie(str string) int {\n\tp := 0\n\tfor i := 0; i < len(str); i++ {\n\t\tu := int(str[i] - 'a')\n\t\tif son[p][u] == 0 {\n\t\t\treturn 0\n\t\t}\n\t\tp = son[p][u]\n\t}\n\treturn cnt[p]\n}\n\n```\n\n### 7.并查集\n\n```go\npackage datastructure\n\n/*\n朴素并查集\npa 存储每个点的祖宗节点\nsize 表示祖宗节点所在集合的点的数量。size只有祖宗节点的才有意义\n*/\n\nvar pa, size []int\n\n// 返回x的祖宗节点\nfunc Find(x int) int {\n\tif pa[x] != x {\n\t\tpa[x] = Find(pa[x])\n\t}\n\treturn pa[x]\n}\n\n// 初始化，假定节点编号是1~n\nfunc init() {\n\tfor i := 1; i <= n; i++ {\n\t\tpa[i] = i\n\t\t// size初始化\n\t\tsize[i] = 1\n\t}\n}\n\n// 合并a和b所在的两个集合\nfunc MergeSet(a, b int) {\n\tpa[Find(a)] = Find(b)\n\t// 处理size\n\tsize[Find(b)] += size[Find(a)]\n}\n\n```\n\n### 8.堆\n\n```go\npackage datastructure\n\n/*\nheap 存储堆中的值，和h[1]是对顶，x的左儿子是2x，x的右儿子是2x+1\nsizeH 表示堆的大小\n*/\n\nvar (\n\theap  []int\n\tsizeH int\n)\n\n// 向下排序\nfunc Down(u int) {\n\tt := u\n\tif u*2 <= sizeH && heap[u*2] < heap[t] {\n\t\tt = u * 2\n\t}\n\n\tif u*2+1 <= sizeH && heap[u*2+1] < heap[t] {\n\t\tt = u*2 + 1\n\t}\n\tif t != u {\n\t\theap[t], heap[u] = heap[u], heap[t]\n\t}\n}\n\n// 向上排序\nfunc Up(u int) {\n\tfor u/2 > 0 && heap[u] < heap[u/2] {\n\t\theap[u], heap[u/2] = heap[u/2], heap[u]\n\t\tu /= 2\n\t}\n}\n\n// O(n)建堆\nfunc Build() {\n\tfor i := n / 2; i > 0; i-- {\n\t\tDown(i)\n\t}\n}\n\n```\n\n### 9.一般哈希\n\n```go\npackage datastructure\n\n/*\n1.拉链法\nmod 为模数\n*/\nvar h []int\n\nconst mod = 1e6\n\n//向哈希表中插入一个数\nfunc InsertHash(x int) {\n\tk := (x%mod + mod) % mod\n\te[idx] = x\n\tne[idx] = h[k]\n\th[k] = idx\n\tidx++\n}\n\n// 在hash表中查询某个数是否存在\nfunc FindHash_1(x int) bool {\n\tk := (x%mod + mod) % mod\n\tfor i := h[k]; i != -1; i = ne[i] {\n\t\tif e[i] == x {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n/*\n2.开放寻址法\nN 为h的最大长度\n*/\nvar N int\n\n// 如果x在哈希表中，返回x的下标，如果不在哈希表中，返回x应该插入的位置\nfunc FindHash_2(x int) int {\n\tk := (x%mod + mod) % mod\n\tfor h[k] != 0 && h[k] != x {\n\t\tk++\n\t\tif k == N {\n\t\t\tk = 0\n\t\t}\n\t}\n\treturn k\n}\n\n```\n\n### 10.字符串哈希\n\n```go\npackage datastructure\n\n/*\n核心思想：将字符串看成是P进制数，P的经验值是131或者13331\nhash[k] 存储字符串前k个字母的哈希值\npe[k]存储P的k次方\n*/\nconst P = 131\n\nvar (\n\thash, pe []uint64\n\tstr      string\n)\n\n// 初始化\nfunc init() {\n\tfor i := 1; i <= n; i++ {\n\t\thash[i] = hash[i-1]*P + uint64(str[i])\n\t\tpe[i] = pe[i-1] * P\n\t}\n}\n\n// 计算子串str[l:r]的哈希值\nfunc GetHash(l, r int) uint64 {\n\treturn hash[r] - hash[l-1]*pe[r-l+1]\n}\n```\n\n","slug":"29.算法基础-数据结构模板","published":1,"updated":"2024-01-07T13:59:10.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dv001q0cfv5a6aasog","content":"<h2 id=\"数据结构模板\"><a href=\"#数据结构模板\" class=\"headerlink\" title=\"数据结构模板\"></a>数据结构模板</h2><h3 id=\"1-单链表\"><a href=\"#1-单链表\" class=\"headerlink\" title=\"1.单链表\"></a>1.单链表</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态链表</span></span><br><span class=\"line\"><span class=\"comment\">// head存储链表头，e存储节点的值，ne存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thead <span class=\"type\">int</span></span><br><span class=\"line\">\te    []<span class=\"type\">int</span></span><br><span class=\"line\">\tne   []<span class=\"type\">int</span></span><br><span class=\"line\">\tidx  <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thead = <span class=\"number\">-1</span></span><br><span class=\"line\">\tidx = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在链表头插入一个数a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Inserthead</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = a</span><br><span class=\"line\">\tne[idx] = head</span><br><span class=\"line\">\thead = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将头节点删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Removehead</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> head != <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\thead = ne[head]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-双链表\"><a href=\"#2-双链表\" class=\"headerlink\" title=\"2.双链表\"></a>2.双链表</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// e   []int</span></span><br><span class=\"line\">\tl []<span class=\"type\">int</span></span><br><span class=\"line\">\tr []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// idx int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 0是左端点，1是右端点</span></span><br><span class=\"line\">\tr[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tl[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tidx = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在节点a的右边插入一个数x</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertR</span><span class=\"params\">(a, x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = x</span><br><span class=\"line\">\tl[idx] = a</span><br><span class=\"line\">\tr[idx] = r[a]</span><br><span class=\"line\">\tl[r[a]] = idx</span><br><span class=\"line\">\tr[a] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除节点a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Remove</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tl[r[a]] = l[a]</span><br><span class=\"line\">\tr[l[a]] = r[a]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-栈\"><a href=\"#3-栈\" class=\"headerlink\" title=\"3.栈\"></a>3.栈</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stk表示栈，tt表示栈顶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tstk []<span class=\"type\">int</span></span><br><span class=\"line\">\ttt  <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向栈顶插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertTop</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttt++</span><br><span class=\"line\">\tstk[tt] = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从栈顶弹出一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RemoveTop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttt--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取栈顶的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Query</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stk[tt]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">EmptyStk</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tt &lt;= <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">单调栈</span></span><br><span class=\"line\"><span class=\"comment\">常见模型：找出每个数左边离它最近的比它大/小的数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> n <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MonotonicStack</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> !EmptyStk() &amp;&amp; check(stk[tt], i) &#123;</span><br><span class=\"line\">\t\t\ttt--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInsertTop(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断a，b的某种性质</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-队列\"><a href=\"#4-队列\" class=\"headerlink\" title=\"4.队列\"></a>4.队列</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// q模拟队列，hh表示队头，tt表示队尾</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tq  []<span class=\"type\">int</span></span><br><span class=\"line\">\thh <span class=\"type\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// tt int = -1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向队尾插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertTail</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttt++</span><br><span class=\"line\">\tq[tt] = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从队头弹出一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RemoveT</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thh++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取出队头的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QueryQ</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> q[hh]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">EmptyQ</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hh &gt; tt</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">单调队列</span></span><br><span class=\"line\"><span class=\"comment\">常见模型：找出滑动窗口中的最大值/最小值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MonotonicQueue</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> !EmptyQ() &amp;&amp; check_out(q[hh]) &#123;</span><br><span class=\"line\">\t\t\thh++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> !EmptyQ() &amp;&amp; check(q[tt], i) &#123;</span><br><span class=\"line\">\t\t\ttt--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tInsertTail(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队头是否符合性质，是否需要移除滑动窗口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check_out</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-KMP\"><a href=\"#5-KMP\" class=\"headerlink\" title=\"5.KMP\"></a>5.KMP</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">s是长文本</span></span><br><span class=\"line\"><span class=\"comment\">p是模式串</span></span><br><span class=\"line\"><span class=\"comment\">需要预处理，例如：</span></span><br><span class=\"line\"><span class=\"comment\">s = &quot;bschueoan&quot;</span></span><br><span class=\"line\"><span class=\"comment\">处理后：s = &quot; bschueoan&quot;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\ts, p <span class=\"type\">string</span></span><br><span class=\"line\">\tnext []<span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求模式串的next数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CalNext</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">2</span>, <span class=\"number\">0</span>; i &lt;= <span class=\"built_in\">len</span>(p)<span class=\"number\">-1</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &gt; <span class=\"number\">0</span> &amp;&amp; p[i] != p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj = next[j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p[i] == p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnext[i] = j</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// KMP匹配</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Matching</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">1</span>, <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s)<span class=\"number\">-1</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &gt; <span class=\"number\">0</span> &amp;&amp; s[i] != p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj = next[j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[i] == p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j == <span class=\"built_in\">len</span>(p)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\tj = next[j]</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 匹配成功后的逻辑</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-trie树\"><a href=\"#6-trie树\" class=\"headerlink\" title=\"6.trie树\"></a>6.trie树</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0号节点既是根节点，又是空节点</span></span><br><span class=\"line\"><span class=\"comment\">son存储树中每个节点的子节点</span></span><br><span class=\"line\"><span class=\"comment\">cnt存储以每个节点结尾的单词数量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tson [][<span class=\"number\">26</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tcnt []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// idx int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertStr</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tp := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(str); i++ &#123;</span><br><span class=\"line\">\t\tu := <span class=\"type\">int</span>(str[i] - <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> son[p][u] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tidx++</span><br><span class=\"line\">\t\t\tson[p][u] = idx</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = son[p][u]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcnt[p]++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询字符串出现的次数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QueryTrie</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tp := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(str); i++ &#123;</span><br><span class=\"line\">\t\tu := <span class=\"type\">int</span>(str[i] - <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> son[p][u] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = son[p][u]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt[p]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-并查集\"><a href=\"#7-并查集\" class=\"headerlink\" title=\"7.并查集\"></a>7.并查集</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">朴素并查集</span></span><br><span class=\"line\"><span class=\"comment\">pa 存储每个点的祖宗节点</span></span><br><span class=\"line\"><span class=\"comment\">size 表示祖宗节点所在集合的点的数量。size只有祖宗节点的才有意义</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pa, size []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回x的祖宗节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Find</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pa[x] != x &#123;</span><br><span class=\"line\">\t\tpa[x] = Find(pa[x])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pa[x]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化，假定节点编号是1~n</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tpa[i] = i</span><br><span class=\"line\">\t\t<span class=\"comment\">// size初始化</span></span><br><span class=\"line\">\t\tsize[i] = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并a和b所在的两个集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MergeSet</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tpa[Find(a)] = Find(b)</span><br><span class=\"line\">\t<span class=\"comment\">// 处理size</span></span><br><span class=\"line\">\tsize[Find(b)] += size[Find(a)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-堆\"><a href=\"#8-堆\" class=\"headerlink\" title=\"8.堆\"></a>8.堆</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">heap 存储堆中的值，和h[1]是对顶，x的左儿子是2x，x的右儿子是2x+1</span></span><br><span class=\"line\"><span class=\"comment\">sizeH 表示堆的大小</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\theap  []<span class=\"type\">int</span></span><br><span class=\"line\">\tsizeH <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向下排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Down</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tt := u</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> u*<span class=\"number\">2</span> &lt;= sizeH &amp;&amp; heap[u*<span class=\"number\">2</span>] &lt; heap[t] &#123;</span><br><span class=\"line\">\t\tt = u * <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> u*<span class=\"number\">2</span>+<span class=\"number\">1</span> &lt;= sizeH &amp;&amp; heap[u*<span class=\"number\">2</span>+<span class=\"number\">1</span>] &lt; heap[t] &#123;</span><br><span class=\"line\">\t\tt = u*<span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t != u &#123;</span><br><span class=\"line\">\t\theap[t], heap[u] = heap[u], heap[t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向上排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Up</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> u/<span class=\"number\">2</span> &gt; <span class=\"number\">0</span> &amp;&amp; heap[u] &lt; heap[u/<span class=\"number\">2</span>] &#123;</span><br><span class=\"line\">\t\theap[u], heap[u/<span class=\"number\">2</span>] = heap[u/<span class=\"number\">2</span>], heap[u]</span><br><span class=\"line\">\t\tu /= <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// O(n)建堆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Build</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := n / <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i-- &#123;</span><br><span class=\"line\">\t\tDown(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-一般哈希\"><a href=\"#9-一般哈希\" class=\"headerlink\" title=\"9.一般哈希\"></a>9.一般哈希</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.拉链法</span></span><br><span class=\"line\"><span class=\"comment\">mod 为模数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> h []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mod = <span class=\"number\">1e6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向哈希表中插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertHash</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tk := (x%mod + mod) % mod</span><br><span class=\"line\">\te[idx] = x</span><br><span class=\"line\">\tne[idx] = h[k]</span><br><span class=\"line\">\th[k] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在hash表中查询某个数是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindHash_1</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\tk := (x%mod + mod) % mod</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[k]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> e[i] == x &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">2.开放寻址法</span></span><br><span class=\"line\"><span class=\"comment\">N 为h的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> N <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果x在哈希表中，返回x的下标，如果不在哈希表中，返回x应该插入的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindHash_2</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tk := (x%mod + mod) % mod</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> h[k] != <span class=\"number\">0</span> &amp;&amp; h[k] != x &#123;</span><br><span class=\"line\">\t\tk++</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> k == N &#123;</span><br><span class=\"line\">\t\t\tk = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> k</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-字符串哈希\"><a href=\"#10-字符串哈希\" class=\"headerlink\" title=\"10.字符串哈希\"></a>10.字符串哈希</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">核心思想：将字符串看成是P进制数，P的经验值是131或者13331</span></span><br><span class=\"line\"><span class=\"comment\">hash[k] 存储字符串前k个字母的哈希值</span></span><br><span class=\"line\"><span class=\"comment\">pe[k]存储P的k次方</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> P = <span class=\"number\">131</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thash, pe []<span class=\"type\">uint64</span></span><br><span class=\"line\">\tstr      <span class=\"type\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\thash[i] = hash[i<span class=\"number\">-1</span>]*P + <span class=\"type\">uint64</span>(str[i])</span><br><span class=\"line\">\t\tpe[i] = pe[i<span class=\"number\">-1</span>] * P</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算子串str[l:r]的哈希值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetHash</span><span class=\"params\">(l, r <span class=\"type\">int</span>)</span></span> <span class=\"type\">uint64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hash[r] - hash[l<span class=\"number\">-1</span>]*pe[r-l+<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover10.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"数据结构模板\"><a href=\"#数据结构模板\" class=\"headerlink\" title=\"数据结构模板\"></a>数据结构模板</h2><h3 id=\"1-单链表\"><a href=\"#1-单链表\" class=\"headerlink\" title=\"1.单链表\"></a>1.单链表</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态链表</span></span><br><span class=\"line\"><span class=\"comment\">// head存储链表头，e存储节点的值，ne存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thead <span class=\"type\">int</span></span><br><span class=\"line\">\te    []<span class=\"type\">int</span></span><br><span class=\"line\">\tne   []<span class=\"type\">int</span></span><br><span class=\"line\">\tidx  <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thead = <span class=\"number\">-1</span></span><br><span class=\"line\">\tidx = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在链表头插入一个数a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Inserthead</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = a</span><br><span class=\"line\">\tne[idx] = head</span><br><span class=\"line\">\thead = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将头节点删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Removehead</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> head != <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\thead = ne[head]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-双链表\"><a href=\"#2-双链表\" class=\"headerlink\" title=\"2.双链表\"></a>2.双链表</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// e   []int</span></span><br><span class=\"line\">\tl []<span class=\"type\">int</span></span><br><span class=\"line\">\tr []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// idx int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 0是左端点，1是右端点</span></span><br><span class=\"line\">\tr[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tl[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tidx = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在节点a的右边插入一个数x</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertR</span><span class=\"params\">(a, x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = x</span><br><span class=\"line\">\tl[idx] = a</span><br><span class=\"line\">\tr[idx] = r[a]</span><br><span class=\"line\">\tl[r[a]] = idx</span><br><span class=\"line\">\tr[a] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除节点a</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Remove</span><span class=\"params\">(a <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tl[r[a]] = l[a]</span><br><span class=\"line\">\tr[l[a]] = r[a]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-栈\"><a href=\"#3-栈\" class=\"headerlink\" title=\"3.栈\"></a>3.栈</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stk表示栈，tt表示栈顶</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tstk []<span class=\"type\">int</span></span><br><span class=\"line\">\ttt  <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向栈顶插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertTop</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttt++</span><br><span class=\"line\">\tstk[tt] = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从栈顶弹出一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RemoveTop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttt--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取栈顶的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Query</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stk[tt]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">EmptyStk</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tt &lt;= <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">单调栈</span></span><br><span class=\"line\"><span class=\"comment\">常见模型：找出每个数左边离它最近的比它大/小的数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> n <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MonotonicStack</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> !EmptyStk() &amp;&amp; check(stk[tt], i) &#123;</span><br><span class=\"line\">\t\t\ttt--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tInsertTop(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断a，b的某种性质</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-队列\"><a href=\"#4-队列\" class=\"headerlink\" title=\"4.队列\"></a>4.队列</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// q模拟队列，hh表示队头，tt表示队尾</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tq  []<span class=\"type\">int</span></span><br><span class=\"line\">\thh <span class=\"type\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// tt int = -1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向队尾插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertTail</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttt++</span><br><span class=\"line\">\tq[tt] = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从队头弹出一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RemoveT</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thh++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取出队头的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QueryQ</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> q[hh]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">EmptyQ</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hh &gt; tt</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">单调队列</span></span><br><span class=\"line\"><span class=\"comment\">常见模型：找出滑动窗口中的最大值/最小值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MonotonicQueue</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> !EmptyQ() &amp;&amp; check_out(q[hh]) &#123;</span><br><span class=\"line\">\t\t\thh++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> !EmptyQ() &amp;&amp; check(q[tt], i) &#123;</span><br><span class=\"line\">\t\t\ttt--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tInsertTail(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队头是否符合性质，是否需要移除滑动窗口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">check_out</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-KMP\"><a href=\"#5-KMP\" class=\"headerlink\" title=\"5.KMP\"></a>5.KMP</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">s是长文本</span></span><br><span class=\"line\"><span class=\"comment\">p是模式串</span></span><br><span class=\"line\"><span class=\"comment\">需要预处理，例如：</span></span><br><span class=\"line\"><span class=\"comment\">s = &quot;bschueoan&quot;</span></span><br><span class=\"line\"><span class=\"comment\">处理后：s = &quot; bschueoan&quot;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\ts, p <span class=\"type\">string</span></span><br><span class=\"line\">\tnext []<span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求模式串的next数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CalNext</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">2</span>, <span class=\"number\">0</span>; i &lt;= <span class=\"built_in\">len</span>(p)<span class=\"number\">-1</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &gt; <span class=\"number\">0</span> &amp;&amp; p[i] != p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj = next[j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p[i] == p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnext[i] = j</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// KMP匹配</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Matching</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, j := <span class=\"number\">1</span>, <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s)<span class=\"number\">-1</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j &gt; <span class=\"number\">0</span> &amp;&amp; s[i] != p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj = next[j]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[i] == p[j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\tj++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j == <span class=\"built_in\">len</span>(p)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\tj = next[j]</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 匹配成功后的逻辑</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-trie树\"><a href=\"#6-trie树\" class=\"headerlink\" title=\"6.trie树\"></a>6.trie树</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0号节点既是根节点，又是空节点</span></span><br><span class=\"line\"><span class=\"comment\">son存储树中每个节点的子节点</span></span><br><span class=\"line\"><span class=\"comment\">cnt存储以每个节点结尾的单词数量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tson [][<span class=\"number\">26</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tcnt []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// idx int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertStr</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tp := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(str); i++ &#123;</span><br><span class=\"line\">\t\tu := <span class=\"type\">int</span>(str[i] - <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> son[p][u] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tidx++</span><br><span class=\"line\">\t\t\tson[p][u] = idx</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = son[p][u]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcnt[p]++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查询字符串出现的次数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QueryTrie</span><span class=\"params\">(str <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tp := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(str); i++ &#123;</span><br><span class=\"line\">\t\tu := <span class=\"type\">int</span>(str[i] - <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> son[p][u] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp = son[p][u]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cnt[p]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-并查集\"><a href=\"#7-并查集\" class=\"headerlink\" title=\"7.并查集\"></a>7.并查集</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">朴素并查集</span></span><br><span class=\"line\"><span class=\"comment\">pa 存储每个点的祖宗节点</span></span><br><span class=\"line\"><span class=\"comment\">size 表示祖宗节点所在集合的点的数量。size只有祖宗节点的才有意义</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pa, size []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回x的祖宗节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Find</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pa[x] != x &#123;</span><br><span class=\"line\">\t\tpa[x] = Find(pa[x])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pa[x]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化，假定节点编号是1~n</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tpa[i] = i</span><br><span class=\"line\">\t\t<span class=\"comment\">// size初始化</span></span><br><span class=\"line\">\t\tsize[i] = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并a和b所在的两个集合</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MergeSet</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tpa[Find(a)] = Find(b)</span><br><span class=\"line\">\t<span class=\"comment\">// 处理size</span></span><br><span class=\"line\">\tsize[Find(b)] += size[Find(a)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-堆\"><a href=\"#8-堆\" class=\"headerlink\" title=\"8.堆\"></a>8.堆</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">heap 存储堆中的值，和h[1]是对顶，x的左儿子是2x，x的右儿子是2x+1</span></span><br><span class=\"line\"><span class=\"comment\">sizeH 表示堆的大小</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\theap  []<span class=\"type\">int</span></span><br><span class=\"line\">\tsizeH <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向下排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Down</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tt := u</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> u*<span class=\"number\">2</span> &lt;= sizeH &amp;&amp; heap[u*<span class=\"number\">2</span>] &lt; heap[t] &#123;</span><br><span class=\"line\">\t\tt = u * <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> u*<span class=\"number\">2</span>+<span class=\"number\">1</span> &lt;= sizeH &amp;&amp; heap[u*<span class=\"number\">2</span>+<span class=\"number\">1</span>] &lt; heap[t] &#123;</span><br><span class=\"line\">\t\tt = u*<span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t != u &#123;</span><br><span class=\"line\">\t\theap[t], heap[u] = heap[u], heap[t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 向上排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Up</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> u/<span class=\"number\">2</span> &gt; <span class=\"number\">0</span> &amp;&amp; heap[u] &lt; heap[u/<span class=\"number\">2</span>] &#123;</span><br><span class=\"line\">\t\theap[u], heap[u/<span class=\"number\">2</span>] = heap[u/<span class=\"number\">2</span>], heap[u]</span><br><span class=\"line\">\t\tu /= <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// O(n)建堆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Build</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := n / <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i-- &#123;</span><br><span class=\"line\">\t\tDown(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-一般哈希\"><a href=\"#9-一般哈希\" class=\"headerlink\" title=\"9.一般哈希\"></a>9.一般哈希</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.拉链法</span></span><br><span class=\"line\"><span class=\"comment\">mod 为模数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> h []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mod = <span class=\"number\">1e6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//向哈希表中插入一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InsertHash</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tk := (x%mod + mod) % mod</span><br><span class=\"line\">\te[idx] = x</span><br><span class=\"line\">\tne[idx] = h[k]</span><br><span class=\"line\">\th[k] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在hash表中查询某个数是否存在</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindHash_1</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\tk := (x%mod + mod) % mod</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[k]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> e[i] == x &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">2.开放寻址法</span></span><br><span class=\"line\"><span class=\"comment\">N 为h的最大长度</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> N <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果x在哈希表中，返回x的下标，如果不在哈希表中，返回x应该插入的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindHash_2</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tk := (x%mod + mod) % mod</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> h[k] != <span class=\"number\">0</span> &amp;&amp; h[k] != x &#123;</span><br><span class=\"line\">\t\tk++</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> k == N &#123;</span><br><span class=\"line\">\t\t\tk = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> k</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-字符串哈希\"><a href=\"#10-字符串哈希\" class=\"headerlink\" title=\"10.字符串哈希\"></a>10.字符串哈希</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> datastructure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">核心思想：将字符串看成是P进制数，P的经验值是131或者13331</span></span><br><span class=\"line\"><span class=\"comment\">hash[k] 存储字符串前k个字母的哈希值</span></span><br><span class=\"line\"><span class=\"comment\">pe[k]存储P的k次方</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> P = <span class=\"number\">131</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\thash, pe []<span class=\"type\">uint64</span></span><br><span class=\"line\">\tstr      <span class=\"type\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\thash[i] = hash[i<span class=\"number\">-1</span>]*P + <span class=\"type\">uint64</span>(str[i])</span><br><span class=\"line\">\t\tpe[i] = pe[i<span class=\"number\">-1</span>] * P</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算子串str[l:r]的哈希值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetHash</span><span class=\"params\">(l, r <span class=\"type\">int</span>)</span></span> <span class=\"type\">uint64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hash[r] - hash[l<span class=\"number\">-1</span>]*pe[r-l+<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"图论模板","type":"tags","date":"2024-01-08T11:34:37.000Z","_content":"\n## 图论模板\n\n### 1.树与图的存储\n\n```go\npackage searchandgraph\n\n/*\n树是一种特殊的图，与图的存储方式相同\n对于无向图中的边ab，存储两条有向边a->b,b->a，因此可以只考虑有向图的存储\n1.邻接矩阵：g[a][b]存储边a->b\n2、邻接表：如下\n*/\n\n// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头节点.n表示点数，m表示边数\nvar (\n\th    []int\n\te    []int\n\tne   []int\n\tidx  int\n\tn, m int\n)\n\n// 初始化\nfunc init() {\n\tidx = 0\n\tfor i := 1; i <= n; i++ {\n\t\th[i] = -1\n\t}\n}\n\n// 添加一条边a->b\nfunc Add(a, b int) {\n\te[idx] = b\n\tne[idx] = h[a]\n\th[a] = idx\n\tidx++\n}\n\n```\n\n### 2.树与图的遍历\n\n```go\npackage searchandgraph\n\n// st[u]表示点u是否被遍历\nvar st []bool\n\n// 深度优先遍历\nfunc dfs(u int) {\n\tst[u] = true\n\tfor i := h[u]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\t\tif !st[j] {\n\t\t\tdfs(j)\n\t\t}\n\t}\n}\n\n// BFS初始化\nfunc init() {\n\tst[1] = true\n\tpush(1)\n}\n\n// 宽度优先遍历\nfunc bfs(u int) {\n\tt := front()\n\tpop()\n\n\tfor i := h[t]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\t\tif !st[j] {\n\t\t\tst[j] = true\n\t\t\tpush(j)\n\t\t}\n\t}\n}\n\nvar (\n\tq  []int\n\thh int\n\ttt int = -1\n)\n\nfunc push(x int) {\n\ttt++\n\tq[tt] = x\n}\n\nfunc pop() {\n\thh++\n}\n\nfunc front() int {\n\treturn q[hh]\n}\n\nfunc empty() bool {\n\treturn tt < hh\n}\n\n```\n\n### 3.拓扑排序\n\n```go\npackage searchandgraph\n\n/*\nd 表示点的入度\n*/\n\nvar d []int\n\n// 判断有向图是否存在拓扑序列\nfunc TopSort() bool {\n\t// 队列清空\n\thh, tt = 0, -1\n\n\t// 入度为0的点入队\n\tfor i := 1; i <= n; i++ {\n\t\tif d[i] == 0 {\n\t\t\tpush(i)\n\t\t}\n\t}\n\n\tfor !empty() {\n\t\tt := front()\n\t\tpop()\n\n\t\t// 遍历入度为0的点能到的边\n\t\tfor i := h[t]; i != -1; i = ne[i] {\n\t\t\tj := e[i]\n\n\t\t\t// 遍历过的边去掉\n\t\t\td[j]--\n\t\t\tif d[j] == 0 {\n\t\t\t\tpush(j)\n\t\t\t}\n\t\t}\n\t}\n\n\t// 如果所有点都入队了，说明存在拓扑序列，否则不存在拓扑序列\n\treturn tt == n-1\n}\n\n```\n\n### 4.dijkstra算法\n\n```go\npackage searchandgraph\n\n/*\n求1号点到n号点的最短距离\ng 存储每条边\ndist 存储1号点到每个点的最短距离\nst 存储每个点的最短距离是否已经确定\n*/\n\nvar (\n\tg    [][]int\n\tdist []int\n\t// st []bool\n)\n\nconst INF = 0x3f3f3f3f\n\n// 朴素版求一号点到n号点的最短距离，如不存在则返回-1\nfunc Dijkstra() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\n\t// 1号点的最短距离为0，最短距离已经确认\n\tdist[1] = 0\n\n\t// 确定剩下的n-1个点，每次循环确定一个点\n\tfor i := 0; i < n-1; i++ {\n\t\tt := -1\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif !st[j] && (t == -1 || dist[t] < dist[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\n\t\tst[t] = true\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tdist[j] = min(dist[j], dist[t]+g[t][j])\n\t\t}\n\t}\n\tif dist[n] > INF/2 {\n\t\treturn -1\n\t}\n\treturn dist[n]\n}\n\n```\n\n### 5.bellman-ford算法\n\n```go\npackage searchandgraph\n\n// 存储a->b的边，权重为w\ntype edge struct {\n\ta, b, w int\n}\n\nvar k int\n\n// last存储dist的上一次的结果\nvar last []int\n\n// edges存储所有的边\nvar edges []edge\n\n// 求1号点到n号点最多经过k条边的最短路距离，如果不存在，则返回-1\nfunc Bellman_Ford() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\n\tdist[1] = 0\n\n\t// 遍历k次，表示最多经过k条边\n\tfor i := 0; i < k; i++ {\n\t\tcopy(last, dist)\n\t\tfor j := 0; j < m; j++ {\n\t\t\te := edges[j]\n\t\t\tdist[e.b] = min(dist[e.b], dist[e.a]+e.w)\n\t\t}\n\t}\n\n\tif dist[n] > INF/2 {\n\t\treturn -1\n\t}\n\treturn dist[n]\n}\n\n```\n\n### 6.spfa算法\n\n```go\npackage searchandgraph\n\n// 邻接表存储每条边a->b，w存储ab边的权重\nvar w []int\n\n// 边的存储\nfunc Add_1(a, b, wi int) {\n\te[idx] = b\n\tw[idx] = wi\n\tne[idx] = h[a]\n\th[a] = idx\n\tidx++\n}\n\n// 队列优化的bellman-Ford算法\nfunc spfa() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\tdist[1] = 0\n\n\tpush(1)\n\tst[1] = true\n\n\tfor !empty() {\n\t\tt := front()\n\t\tpop()\n\n\t\tst[t] = false\n\t\tfor i := h[t]; i != -1; i = ne[i] {\n\t\t\tj := e[i]\n\t\t\tif dist[j] > dist[t]+w[i] {\n\t\t\t\tdist[j] = dist[t] + w[i]\n\t\t\t\tif !st[j] {\n\t\t\t\t\tpush(j)\n\t\t\t\t\tst[j] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif dist[n] > INF/2 {\n\t\treturn -1\n\t}\n\treturn dist[n]\n}\n\n// cnt[x] 存储1到x的最短路中经过的点数\nvar cnt []int\n\n// spfa算法判断图中是否有负环\nfunc spfa_cycle() bool {\n\tfor i := 1; i <= n; i++ {\n\t\tpush(i)\n\t\tst[i] = true\n\t}\n\n\tfor !empty() {\n\t\tt := front()\n\t\tpop()\n\n\t\tst[t] = false\n\t\tfor i := h[t]; i != -1; i = ne[i] {\n\t\t\tj := e[i]\n\t\t\tif dist[j] > dist[t]+w[i] {\n\t\t\t\tdist[j] = dist[t] + w[i]\n\t\t\t\tcnt[j] = cnt[t] + 1\n\t\t\t\tif cnt[j] >= n {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\n\t\t\t\tif !st[j] {\n\t\t\t\t\tpush(j)\n\t\t\t\t\tst[j] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n```\n\n### 7.Floyd算法\n\n```go\npackage searchandgraph\n\n/*\nfloyd算法求任意两个点的最短路距离\n\ndistance[a][b] 表示a到b的最短距离\n*/\n\nvar distance [][]int\n\n// 初始化\nfunc init() {\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif i == j {\n\t\t\t\tdistance[i][j] = 0\n\t\t\t} else {\n\t\t\t\tdistance[i][j] = INF\n\t\t\t}\n\t\t}\n\t}\n}\n\n// 计算完之后，distance[a][b]就是a到b的最短距离\nfunc floyd() {\n\tfor k := 1; k <= n; k++ {\n\t\tfor i := 1; i <= n; i++ {\n\t\t\tfor j := 1; j <= n; j++ {\n\t\t\t\tdistance[i][j] = min(distance[i][j], distance[i][k]+distance[k][j])\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n### 8.prim算法\n\n```go\npackage searchandgraph\n\n/*\ng 邻接矩阵，存储所有边\ndist 存储其他点到最小生成树的距离\nst 存储每个点是否已经在最小生成树中\n*/\n\n// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和\nfunc Prim() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\n\tres := 0\n\tdist[1] = 0\n\tfor i := 1; i <= n; i++ {\n\t\tt := -1\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif !st[j] && (t == -1 || dist[j] < dist[t]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t\tst[t] = true\n\t\t\tif dist[t] > INF/2 {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t\tres += dist[t]\n\t\t\tfor k := 1; k <= n; k++ {\n\t\t\t\tif !st[k] {\n\t\t\t\t\tdist[k] = min(dist[k], g[t][k])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n```\n\n### 9.kruskal算法\n\n```go\npackage searchandgraph\n\nimport \"sort\"\n\n/*\np 存储并查集的父节点数组\n*/\n\nvar p []int\n\n// 并查集的核心操作\nfunc find(x int) int {\n\tif x != p[x] {\n\t\tp[x] = find(p[x])\n\t}\n\treturn p[x]\n}\n\n// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和\nfunc kruskal() int {\n\t// 按照权重从小到大给边排序\n\tsort.Slice(edges, func(i, j int) bool {\n\t\treturn edges[i].w < edges[j].w\n\t})\n\n\t// 初始化并查集\n\tfor i := 1; i <= n; i++ {\n\t\tp[i] = i\n\t}\n\n\tvar res, cnt int\n\t// 遍历所有的边\n\tfor i := 0; i < m; i++ {\n\t\ta, b, w := edges[i].a, edges[i].b, edges[i].w\n\n\t\ta, b = find(a), find(b)\n\t\t// 如果a,b两个块不连通，则将两个块联通\n\t\tif a != b {\n\t\t\tp[a] = b\n\t\t\tres += w\n\t\t\tcnt++\n\t\t}\n\t}\n\n\tif cnt < n-1 {\n\t\treturn INF\n\t}\n\n\treturn res\n}\n\n```\n\n### 10.染色法判定二分图\n\n```go\npackage searchandgraph\n\n/*\n染色法判定二分图\n邻接表存储图\ncolor 存储每个点的颜色，0表示未染色，1表示白色，2表示黑色\n*/\n\nvar color []int\n\n// 参数：u表示当前点，c表示当前点的颜色\nfunc dfs_1(u, c int) bool {\n\tcolor[u] = c\n\n\tfor i := h[u]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\t\tif color[j] == 0 {\n\t\t\tif !dfs_1(j, 3-c) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else if color[j] == c {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n```\n\n### 11.匈牙利算法\n\n```go\npackage searchandgraph\n\n/*\n求二分图的最大匹配\nn1,n2 n1表示第一个集合中的点数，n2表示第二个集合中的点数\nmatch 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个\nst 表示第二个集合中的每个点是否已经被遍历过\n*/\n\nvar match []int\nvar n1, n2 int\n\nfunc find_1(x int) bool {\n\tfor i := h[x]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\n\t\tif !st[j] {\n\t\t\tst[j] = true\n\t\t\tif match[j] == 0 || find_1(j) {\n\t\t\t\tmatch[j] = i\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点\nfunc hungarian() int {\n\tres := 0\n\tfor i := 1; i <= n1; i++ {\n\t\tfor j := 1; j <= n2; j++ {\n\t\t\tst[j] = false\n\t\t}\n\t\tif find_1(i) {\n\t\t\tres++\n\t\t}\n\t}\n\n\treturn res\n}\n\n```\n\n","source":"_posts/30.算法基础-图论模板.md","raw":"---\ntitle: 图论模板\ntype: tags\ncategories:\n  - 学习笔记\ndate: 2024-01-08 19:34:37\ntags:\n- go\n- 算法\n---\n\n## 图论模板\n\n### 1.树与图的存储\n\n```go\npackage searchandgraph\n\n/*\n树是一种特殊的图，与图的存储方式相同\n对于无向图中的边ab，存储两条有向边a->b,b->a，因此可以只考虑有向图的存储\n1.邻接矩阵：g[a][b]存储边a->b\n2、邻接表：如下\n*/\n\n// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头节点.n表示点数，m表示边数\nvar (\n\th    []int\n\te    []int\n\tne   []int\n\tidx  int\n\tn, m int\n)\n\n// 初始化\nfunc init() {\n\tidx = 0\n\tfor i := 1; i <= n; i++ {\n\t\th[i] = -1\n\t}\n}\n\n// 添加一条边a->b\nfunc Add(a, b int) {\n\te[idx] = b\n\tne[idx] = h[a]\n\th[a] = idx\n\tidx++\n}\n\n```\n\n### 2.树与图的遍历\n\n```go\npackage searchandgraph\n\n// st[u]表示点u是否被遍历\nvar st []bool\n\n// 深度优先遍历\nfunc dfs(u int) {\n\tst[u] = true\n\tfor i := h[u]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\t\tif !st[j] {\n\t\t\tdfs(j)\n\t\t}\n\t}\n}\n\n// BFS初始化\nfunc init() {\n\tst[1] = true\n\tpush(1)\n}\n\n// 宽度优先遍历\nfunc bfs(u int) {\n\tt := front()\n\tpop()\n\n\tfor i := h[t]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\t\tif !st[j] {\n\t\t\tst[j] = true\n\t\t\tpush(j)\n\t\t}\n\t}\n}\n\nvar (\n\tq  []int\n\thh int\n\ttt int = -1\n)\n\nfunc push(x int) {\n\ttt++\n\tq[tt] = x\n}\n\nfunc pop() {\n\thh++\n}\n\nfunc front() int {\n\treturn q[hh]\n}\n\nfunc empty() bool {\n\treturn tt < hh\n}\n\n```\n\n### 3.拓扑排序\n\n```go\npackage searchandgraph\n\n/*\nd 表示点的入度\n*/\n\nvar d []int\n\n// 判断有向图是否存在拓扑序列\nfunc TopSort() bool {\n\t// 队列清空\n\thh, tt = 0, -1\n\n\t// 入度为0的点入队\n\tfor i := 1; i <= n; i++ {\n\t\tif d[i] == 0 {\n\t\t\tpush(i)\n\t\t}\n\t}\n\n\tfor !empty() {\n\t\tt := front()\n\t\tpop()\n\n\t\t// 遍历入度为0的点能到的边\n\t\tfor i := h[t]; i != -1; i = ne[i] {\n\t\t\tj := e[i]\n\n\t\t\t// 遍历过的边去掉\n\t\t\td[j]--\n\t\t\tif d[j] == 0 {\n\t\t\t\tpush(j)\n\t\t\t}\n\t\t}\n\t}\n\n\t// 如果所有点都入队了，说明存在拓扑序列，否则不存在拓扑序列\n\treturn tt == n-1\n}\n\n```\n\n### 4.dijkstra算法\n\n```go\npackage searchandgraph\n\n/*\n求1号点到n号点的最短距离\ng 存储每条边\ndist 存储1号点到每个点的最短距离\nst 存储每个点的最短距离是否已经确定\n*/\n\nvar (\n\tg    [][]int\n\tdist []int\n\t// st []bool\n)\n\nconst INF = 0x3f3f3f3f\n\n// 朴素版求一号点到n号点的最短距离，如不存在则返回-1\nfunc Dijkstra() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\n\t// 1号点的最短距离为0，最短距离已经确认\n\tdist[1] = 0\n\n\t// 确定剩下的n-1个点，每次循环确定一个点\n\tfor i := 0; i < n-1; i++ {\n\t\tt := -1\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif !st[j] && (t == -1 || dist[t] < dist[j]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t}\n\n\t\tst[t] = true\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tdist[j] = min(dist[j], dist[t]+g[t][j])\n\t\t}\n\t}\n\tif dist[n] > INF/2 {\n\t\treturn -1\n\t}\n\treturn dist[n]\n}\n\n```\n\n### 5.bellman-ford算法\n\n```go\npackage searchandgraph\n\n// 存储a->b的边，权重为w\ntype edge struct {\n\ta, b, w int\n}\n\nvar k int\n\n// last存储dist的上一次的结果\nvar last []int\n\n// edges存储所有的边\nvar edges []edge\n\n// 求1号点到n号点最多经过k条边的最短路距离，如果不存在，则返回-1\nfunc Bellman_Ford() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\n\tdist[1] = 0\n\n\t// 遍历k次，表示最多经过k条边\n\tfor i := 0; i < k; i++ {\n\t\tcopy(last, dist)\n\t\tfor j := 0; j < m; j++ {\n\t\t\te := edges[j]\n\t\t\tdist[e.b] = min(dist[e.b], dist[e.a]+e.w)\n\t\t}\n\t}\n\n\tif dist[n] > INF/2 {\n\t\treturn -1\n\t}\n\treturn dist[n]\n}\n\n```\n\n### 6.spfa算法\n\n```go\npackage searchandgraph\n\n// 邻接表存储每条边a->b，w存储ab边的权重\nvar w []int\n\n// 边的存储\nfunc Add_1(a, b, wi int) {\n\te[idx] = b\n\tw[idx] = wi\n\tne[idx] = h[a]\n\th[a] = idx\n\tidx++\n}\n\n// 队列优化的bellman-Ford算法\nfunc spfa() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\tdist[1] = 0\n\n\tpush(1)\n\tst[1] = true\n\n\tfor !empty() {\n\t\tt := front()\n\t\tpop()\n\n\t\tst[t] = false\n\t\tfor i := h[t]; i != -1; i = ne[i] {\n\t\t\tj := e[i]\n\t\t\tif dist[j] > dist[t]+w[i] {\n\t\t\t\tdist[j] = dist[t] + w[i]\n\t\t\t\tif !st[j] {\n\t\t\t\t\tpush(j)\n\t\t\t\t\tst[j] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif dist[n] > INF/2 {\n\t\treturn -1\n\t}\n\treturn dist[n]\n}\n\n// cnt[x] 存储1到x的最短路中经过的点数\nvar cnt []int\n\n// spfa算法判断图中是否有负环\nfunc spfa_cycle() bool {\n\tfor i := 1; i <= n; i++ {\n\t\tpush(i)\n\t\tst[i] = true\n\t}\n\n\tfor !empty() {\n\t\tt := front()\n\t\tpop()\n\n\t\tst[t] = false\n\t\tfor i := h[t]; i != -1; i = ne[i] {\n\t\t\tj := e[i]\n\t\t\tif dist[j] > dist[t]+w[i] {\n\t\t\t\tdist[j] = dist[t] + w[i]\n\t\t\t\tcnt[j] = cnt[t] + 1\n\t\t\t\tif cnt[j] >= n {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\n\t\t\t\tif !st[j] {\n\t\t\t\t\tpush(j)\n\t\t\t\t\tst[j] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n```\n\n### 7.Floyd算法\n\n```go\npackage searchandgraph\n\n/*\nfloyd算法求任意两个点的最短路距离\n\ndistance[a][b] 表示a到b的最短距离\n*/\n\nvar distance [][]int\n\n// 初始化\nfunc init() {\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif i == j {\n\t\t\t\tdistance[i][j] = 0\n\t\t\t} else {\n\t\t\t\tdistance[i][j] = INF\n\t\t\t}\n\t\t}\n\t}\n}\n\n// 计算完之后，distance[a][b]就是a到b的最短距离\nfunc floyd() {\n\tfor k := 1; k <= n; k++ {\n\t\tfor i := 1; i <= n; i++ {\n\t\t\tfor j := 1; j <= n; j++ {\n\t\t\t\tdistance[i][j] = min(distance[i][j], distance[i][k]+distance[k][j])\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n### 8.prim算法\n\n```go\npackage searchandgraph\n\n/*\ng 邻接矩阵，存储所有边\ndist 存储其他点到最小生成树的距离\nst 存储每个点是否已经在最小生成树中\n*/\n\n// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和\nfunc Prim() int {\n\tfor i := 1; i <= n; i++ {\n\t\tdist[i] = INF\n\t}\n\n\tres := 0\n\tdist[1] = 0\n\tfor i := 1; i <= n; i++ {\n\t\tt := -1\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif !st[j] && (t == -1 || dist[j] < dist[t]) {\n\t\t\t\tt = j\n\t\t\t}\n\t\t\tst[t] = true\n\t\t\tif dist[t] > INF/2 {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t\tres += dist[t]\n\t\t\tfor k := 1; k <= n; k++ {\n\t\t\t\tif !st[k] {\n\t\t\t\t\tdist[k] = min(dist[k], g[t][k])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n```\n\n### 9.kruskal算法\n\n```go\npackage searchandgraph\n\nimport \"sort\"\n\n/*\np 存储并查集的父节点数组\n*/\n\nvar p []int\n\n// 并查集的核心操作\nfunc find(x int) int {\n\tif x != p[x] {\n\t\tp[x] = find(p[x])\n\t}\n\treturn p[x]\n}\n\n// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和\nfunc kruskal() int {\n\t// 按照权重从小到大给边排序\n\tsort.Slice(edges, func(i, j int) bool {\n\t\treturn edges[i].w < edges[j].w\n\t})\n\n\t// 初始化并查集\n\tfor i := 1; i <= n; i++ {\n\t\tp[i] = i\n\t}\n\n\tvar res, cnt int\n\t// 遍历所有的边\n\tfor i := 0; i < m; i++ {\n\t\ta, b, w := edges[i].a, edges[i].b, edges[i].w\n\n\t\ta, b = find(a), find(b)\n\t\t// 如果a,b两个块不连通，则将两个块联通\n\t\tif a != b {\n\t\t\tp[a] = b\n\t\t\tres += w\n\t\t\tcnt++\n\t\t}\n\t}\n\n\tif cnt < n-1 {\n\t\treturn INF\n\t}\n\n\treturn res\n}\n\n```\n\n### 10.染色法判定二分图\n\n```go\npackage searchandgraph\n\n/*\n染色法判定二分图\n邻接表存储图\ncolor 存储每个点的颜色，0表示未染色，1表示白色，2表示黑色\n*/\n\nvar color []int\n\n// 参数：u表示当前点，c表示当前点的颜色\nfunc dfs_1(u, c int) bool {\n\tcolor[u] = c\n\n\tfor i := h[u]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\t\tif color[j] == 0 {\n\t\t\tif !dfs_1(j, 3-c) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else if color[j] == c {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n```\n\n### 11.匈牙利算法\n\n```go\npackage searchandgraph\n\n/*\n求二分图的最大匹配\nn1,n2 n1表示第一个集合中的点数，n2表示第二个集合中的点数\nmatch 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个\nst 表示第二个集合中的每个点是否已经被遍历过\n*/\n\nvar match []int\nvar n1, n2 int\n\nfunc find_1(x int) bool {\n\tfor i := h[x]; i != -1; i = ne[i] {\n\t\tj := e[i]\n\n\t\tif !st[j] {\n\t\t\tst[j] = true\n\t\t\tif match[j] == 0 || find_1(j) {\n\t\t\t\tmatch[j] = i\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点\nfunc hungarian() int {\n\tres := 0\n\tfor i := 1; i <= n1; i++ {\n\t\tfor j := 1; j <= n2; j++ {\n\t\t\tst[j] = false\n\t\t}\n\t\tif find_1(i) {\n\t\t\tres++\n\t\t}\n\t}\n\n\treturn res\n}\n\n```\n\n","slug":"30.算法基础-图论模板","published":1,"updated":"2024-01-08T11:41:37.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dx001t0cfv3yjz6rlj","content":"<h2 id=\"图论模板\"><a href=\"#图论模板\" class=\"headerlink\" title=\"图论模板\"></a>图论模板</h2><h3 id=\"1-树与图的存储\"><a href=\"#1-树与图的存储\" class=\"headerlink\" title=\"1.树与图的存储\"></a>1.树与图的存储</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">树是一种特殊的图，与图的存储方式相同</span></span><br><span class=\"line\"><span class=\"comment\">对于无向图中的边ab，存储两条有向边a-&gt;b,b-&gt;a，因此可以只考虑有向图的存储</span></span><br><span class=\"line\"><span class=\"comment\">1.邻接矩阵：g[a][b]存储边a-&gt;b</span></span><br><span class=\"line\"><span class=\"comment\">2、邻接表：如下</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头节点.n表示点数，m表示边数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\th    []<span class=\"type\">int</span></span><br><span class=\"line\">\te    []<span class=\"type\">int</span></span><br><span class=\"line\">\tne   []<span class=\"type\">int</span></span><br><span class=\"line\">\tidx  <span class=\"type\">int</span></span><br><span class=\"line\">\tn, m <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tidx = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\th[i] = <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加一条边a-&gt;b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = b</span><br><span class=\"line\">\tne[idx] = h[a]</span><br><span class=\"line\">\th[a] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-树与图的遍历\"><a href=\"#2-树与图的遍历\" class=\"headerlink\" title=\"2.树与图的遍历\"></a>2.树与图的遍历</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// st[u]表示点u是否被遍历</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> st []<span class=\"type\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tst[u] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[u]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\tdfs(j)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BFS初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tst[<span class=\"number\">1</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">\tpush(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 宽度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bfs</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tt := front()</span><br><span class=\"line\">\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tpush(j)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tq  []<span class=\"type\">int</span></span><br><span class=\"line\">\thh <span class=\"type\">int</span></span><br><span class=\"line\">\ttt <span class=\"type\">int</span> = <span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttt++</span><br><span class=\"line\">\tq[tt] = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thh++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">front</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> q[hh]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tt &lt; hh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拓扑排序\"><a href=\"#3-拓扑排序\" class=\"headerlink\" title=\"3.拓扑排序\"></a>3.拓扑排序</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">d 表示点的入度</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断有向图是否存在拓扑序列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TopSort</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 队列清空</span></span><br><span class=\"line\">\thh, tt = <span class=\"number\">0</span>, <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 入度为0的点入队</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tpush(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !empty() &#123;</span><br><span class=\"line\">\t\tt := front()</span><br><span class=\"line\">\t\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历入度为0的点能到的边</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t\tj := e[i]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 遍历过的边去掉</span></span><br><span class=\"line\">\t\t\td[j]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> d[j] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tpush(j)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果所有点都入队了，说明存在拓扑序列，否则不存在拓扑序列</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tt == n<span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-dijkstra算法\"><a href=\"#4-dijkstra算法\" class=\"headerlink\" title=\"4.dijkstra算法\"></a>4.dijkstra算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">求1号点到n号点的最短距离</span></span><br><span class=\"line\"><span class=\"comment\">g 存储每条边</span></span><br><span class=\"line\"><span class=\"comment\">dist 存储1号点到每个点的最短距离</span></span><br><span class=\"line\"><span class=\"comment\">st 存储每个点的最短距离是否已经确定</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tg    [][]<span class=\"type\">int</span></span><br><span class=\"line\">\tdist []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// st []bool</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> INF = <span class=\"number\">0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 朴素版求一号点到n号点的最短距离，如不存在则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dijkstra</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1号点的最短距离为0，最短距离已经确认</span></span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确定剩下的n-1个点，每次循环确定一个点</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; i++ &#123;</span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[t] &lt; dist[j]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tst[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\tdist[j] = min(dist[j], dist[t]+g[t][j])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[n] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist[n]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-bellman-ford算法\"><a href=\"#5-bellman-ford算法\" class=\"headerlink\" title=\"5.bellman-ford算法\"></a>5.bellman-ford算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储a-&gt;b的边，权重为w</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> edge <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta, b, w <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> k <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// last存储dist的上一次的结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> last []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// edges存储所有的边</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> edges []edge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求1号点到n号点最多经过k条边的最短路距离，如果不存在，则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bellman_Ford</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历k次，表示最多经过k条边</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; k; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(last, dist)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; m; j++ &#123;</span><br><span class=\"line\">\t\t\te := edges[j]</span><br><span class=\"line\">\t\t\tdist[e.b] = min(dist[e.b], dist[e.a]+e.w)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[n] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist[n]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-spfa算法\"><a href=\"#6-spfa算法\" class=\"headerlink\" title=\"6.spfa算法\"></a>6.spfa算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 邻接表存储每条边a-&gt;b，w存储ab边的权重</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> w []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 边的存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add_1</span><span class=\"params\">(a, b, wi <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = b</span><br><span class=\"line\">\tw[idx] = wi</span><br><span class=\"line\">\tne[idx] = h[a]</span><br><span class=\"line\">\th[a] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列优化的bellman-Ford算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpush(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tst[<span class=\"number\">1</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !empty() &#123;</span><br><span class=\"line\">\t\tt := front()</span><br><span class=\"line\">\t\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tst[t] = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t\tj := e[i]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> dist[j] &gt; dist[t]+w[i] &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[t] + w[i]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\t\t\tpush(j)</span><br><span class=\"line\">\t\t\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[n] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist[n]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cnt[x] 存储1到x的最短路中经过的点数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spfa算法判断图中是否有负环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spfa_cycle</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tpush(i)</span><br><span class=\"line\">\t\tst[i] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !empty() &#123;</span><br><span class=\"line\">\t\tt := front()</span><br><span class=\"line\">\t\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tst[t] = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t\tj := e[i]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> dist[j] &gt; dist[t]+w[i] &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[t] + w[i]</span><br><span class=\"line\">\t\t\t\tcnt[j] = cnt[t] + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> cnt[j] &gt;= n &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\t\t\tpush(j)</span><br><span class=\"line\">\t\t\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Floyd算法\"><a href=\"#7-Floyd算法\" class=\"headerlink\" title=\"7.Floyd算法\"></a>7.Floyd算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">floyd算法求任意两个点的最短路距离</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">distance[a][b] 表示a到b的最短距离</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> distance [][]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i == j &#123;</span><br><span class=\"line\">\t\t\t\tdistance[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tdistance[i][j] = INF</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算完之后，distance[a][b]就是a到b的最短距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">1</span>; k &lt;= n; k++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t\tdistance[i][j] = min(distance[i][j], distance[i][k]+distance[k][j])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-prim算法\"><a href=\"#8-prim算法\" class=\"headerlink\" title=\"8.prim算法\"></a>8.prim算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">g 邻接矩阵，存储所有边</span></span><br><span class=\"line\"><span class=\"comment\">dist 存储其他点到最小生成树的距离</span></span><br><span class=\"line\"><span class=\"comment\">st 存储每个点是否已经在最小生成树中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Prim</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[j] &lt; dist[t]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tst[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> dist[t] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tres += dist[t]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">1</span>; k &lt;= n; k++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !st[k] &#123;</span><br><span class=\"line\">\t\t\t\t\tdist[k] = min(dist[k], g[t][k])</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-kruskal算法\"><a href=\"#9-kruskal算法\" class=\"headerlink\" title=\"9.kruskal算法\"></a>9.kruskal算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">p 存储并查集的父节点数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并查集的核心操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">find</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x != p[x] &#123;</span><br><span class=\"line\">\t\tp[x] = find(p[x])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p[x]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 按照权重从小到大给边排序</span></span><br><span class=\"line\">\tsort.Slice(edges, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges[i].w &lt; edges[j].w</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化并查集</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tp[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res, cnt <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历所有的边</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\ta, b, w := edges[i].a, edges[i].b, edges[i].w</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ta, b = find(a), find(b)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果a,b两个块不连通，则将两个块联通</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> a != b &#123;</span><br><span class=\"line\">\t\t\tp[a] = b</span><br><span class=\"line\">\t\t\tres += w</span><br><span class=\"line\">\t\t\tcnt++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cnt &lt; n<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-染色法判定二分图\"><a href=\"#10-染色法判定二分图\" class=\"headerlink\" title=\"10.染色法判定二分图\"></a>10.染色法判定二分图</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">染色法判定二分图</span></span><br><span class=\"line\"><span class=\"comment\">邻接表存储图</span></span><br><span class=\"line\"><span class=\"comment\">color 存储每个点的颜色，0表示未染色，1表示白色，2表示黑色</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> color []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数：u表示当前点，c表示当前点的颜色</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs_1</span><span class=\"params\">(u, c <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\tcolor[u] = c</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[u]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> color[j] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !dfs_1(j, <span class=\"number\">3</span>-c) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> color[j] == c &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-匈牙利算法\"><a href=\"#11-匈牙利算法\" class=\"headerlink\" title=\"11.匈牙利算法\"></a>11.匈牙利算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">求二分图的最大匹配</span></span><br><span class=\"line\"><span class=\"comment\">n1,n2 n1表示第一个集合中的点数，n2表示第二个集合中的点数</span></span><br><span class=\"line\"><span class=\"comment\">match 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span></span><br><span class=\"line\"><span class=\"comment\">st 表示第二个集合中的每个点是否已经被遍历过</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> match []<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n1, n2 <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">find_1</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[x]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> match[j] == <span class=\"number\">0</span> || find_1(j) &#123;</span><br><span class=\"line\">\t\t\t\tmatch[j] = i</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hungarian</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n1; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n2; j++ &#123;</span><br><span class=\"line\">\t\t\tst[j] = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> find_1(i) &#123;</span><br><span class=\"line\">\t\t\tres++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover10.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"图论模板\"><a href=\"#图论模板\" class=\"headerlink\" title=\"图论模板\"></a>图论模板</h2><h3 id=\"1-树与图的存储\"><a href=\"#1-树与图的存储\" class=\"headerlink\" title=\"1.树与图的存储\"></a>1.树与图的存储</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">树是一种特殊的图，与图的存储方式相同</span></span><br><span class=\"line\"><span class=\"comment\">对于无向图中的边ab，存储两条有向边a-&gt;b,b-&gt;a，因此可以只考虑有向图的存储</span></span><br><span class=\"line\"><span class=\"comment\">1.邻接矩阵：g[a][b]存储边a-&gt;b</span></span><br><span class=\"line\"><span class=\"comment\">2、邻接表：如下</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头节点.n表示点数，m表示边数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\th    []<span class=\"type\">int</span></span><br><span class=\"line\">\te    []<span class=\"type\">int</span></span><br><span class=\"line\">\tne   []<span class=\"type\">int</span></span><br><span class=\"line\">\tidx  <span class=\"type\">int</span></span><br><span class=\"line\">\tn, m <span class=\"type\">int</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tidx = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\th[i] = <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加一条边a-&gt;b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = b</span><br><span class=\"line\">\tne[idx] = h[a]</span><br><span class=\"line\">\th[a] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-树与图的遍历\"><a href=\"#2-树与图的遍历\" class=\"headerlink\" title=\"2.树与图的遍历\"></a>2.树与图的遍历</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// st[u]表示点u是否被遍历</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> st []<span class=\"type\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tst[u] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[u]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\tdfs(j)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BFS初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tst[<span class=\"number\">1</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">\tpush(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 宽度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bfs</span><span class=\"params\">(u <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tt := front()</span><br><span class=\"line\">\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tpush(j)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tq  []<span class=\"type\">int</span></span><br><span class=\"line\">\thh <span class=\"type\">int</span></span><br><span class=\"line\">\ttt <span class=\"type\">int</span> = <span class=\"number\">-1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttt++</span><br><span class=\"line\">\tq[tt] = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thh++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">front</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> q[hh]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tt &lt; hh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拓扑排序\"><a href=\"#3-拓扑排序\" class=\"headerlink\" title=\"3.拓扑排序\"></a>3.拓扑排序</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">d 表示点的入度</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断有向图是否存在拓扑序列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TopSort</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 队列清空</span></span><br><span class=\"line\">\thh, tt = <span class=\"number\">0</span>, <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 入度为0的点入队</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tpush(i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !empty() &#123;</span><br><span class=\"line\">\t\tt := front()</span><br><span class=\"line\">\t\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历入度为0的点能到的边</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t\tj := e[i]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 遍历过的边去掉</span></span><br><span class=\"line\">\t\t\td[j]--</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> d[j] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tpush(j)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果所有点都入队了，说明存在拓扑序列，否则不存在拓扑序列</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tt == n<span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-dijkstra算法\"><a href=\"#4-dijkstra算法\" class=\"headerlink\" title=\"4.dijkstra算法\"></a>4.dijkstra算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">求1号点到n号点的最短距离</span></span><br><span class=\"line\"><span class=\"comment\">g 存储每条边</span></span><br><span class=\"line\"><span class=\"comment\">dist 存储1号点到每个点的最短距离</span></span><br><span class=\"line\"><span class=\"comment\">st 存储每个点的最短距离是否已经确定</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tg    [][]<span class=\"type\">int</span></span><br><span class=\"line\">\tdist []<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// st []bool</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> INF = <span class=\"number\">0x3f3f3f3f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 朴素版求一号点到n号点的最短距离，如不存在则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Dijkstra</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1号点的最短距离为0，最短距离已经确认</span></span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 确定剩下的n-1个点，每次循环确定一个点</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; i++ &#123;</span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[t] &lt; dist[j]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tst[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\tdist[j] = min(dist[j], dist[t]+g[t][j])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[n] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist[n]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-bellman-ford算法\"><a href=\"#5-bellman-ford算法\" class=\"headerlink\" title=\"5.bellman-ford算法\"></a>5.bellman-ford算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储a-&gt;b的边，权重为w</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> edge <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta, b, w <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> k <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// last存储dist的上一次的结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> last []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// edges存储所有的边</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> edges []edge</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求1号点到n号点最多经过k条边的最短路距离，如果不存在，则返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Bellman_Ford</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历k次，表示最多经过k条边</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; k; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(last, dist)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; m; j++ &#123;</span><br><span class=\"line\">\t\t\te := edges[j]</span><br><span class=\"line\">\t\t\tdist[e.b] = min(dist[e.b], dist[e.a]+e.w)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[n] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist[n]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-spfa算法\"><a href=\"#6-spfa算法\" class=\"headerlink\" title=\"6.spfa算法\"></a>6.spfa算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 邻接表存储每条边a-&gt;b，w存储ab边的权重</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> w []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 边的存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add_1</span><span class=\"params\">(a, b, wi <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\te[idx] = b</span><br><span class=\"line\">\tw[idx] = wi</span><br><span class=\"line\">\tne[idx] = h[a]</span><br><span class=\"line\">\th[a] = idx</span><br><span class=\"line\">\tidx++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列优化的bellman-Ford算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpush(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tst[<span class=\"number\">1</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !empty() &#123;</span><br><span class=\"line\">\t\tt := front()</span><br><span class=\"line\">\t\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tst[t] = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t\tj := e[i]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> dist[j] &gt; dist[t]+w[i] &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[t] + w[i]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\t\t\tpush(j)</span><br><span class=\"line\">\t\t\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[n] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist[n]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// cnt[x] 存储1到x的最短路中经过的点数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spfa算法判断图中是否有负环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spfa_cycle</span><span class=\"params\">()</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tpush(i)</span><br><span class=\"line\">\t\tst[i] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !empty() &#123;</span><br><span class=\"line\">\t\tt := front()</span><br><span class=\"line\">\t\tpop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tst[t] = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := h[t]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\t\tj := e[i]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> dist[j] &gt; dist[t]+w[i] &#123;</span><br><span class=\"line\">\t\t\t\tdist[j] = dist[t] + w[i]</span><br><span class=\"line\">\t\t\t\tcnt[j] = cnt[t] + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> cnt[j] &gt;= n &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\t\t\tpush(j)</span><br><span class=\"line\">\t\t\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-Floyd算法\"><a href=\"#7-Floyd算法\" class=\"headerlink\" title=\"7.Floyd算法\"></a>7.Floyd算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">floyd算法求任意两个点的最短路距离</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">distance[a][b] 表示a到b的最短距离</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> distance [][]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i == j &#123;</span><br><span class=\"line\">\t\t\t\tdistance[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tdistance[i][j] = INF</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算完之后，distance[a][b]就是a到b的最短距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">1</span>; k &lt;= n; k++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t\tdistance[i][j] = min(distance[i][j], distance[i][k]+distance[k][j])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-prim算法\"><a href=\"#8-prim算法\" class=\"headerlink\" title=\"8.prim算法\"></a>8.prim算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">g 邻接矩阵，存储所有边</span></span><br><span class=\"line\"><span class=\"comment\">dist 存储其他点到最小生成树的距离</span></span><br><span class=\"line\"><span class=\"comment\">st 存储每个点是否已经在最小生成树中</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Prim</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tdist[i] = INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\tdist[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !st[j] &amp;&amp; (t == <span class=\"number\">-1</span> || dist[j] &lt; dist[t]) &#123;</span><br><span class=\"line\">\t\t\t\tt = j</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tst[t] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> dist[t] &gt; INF/<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tres += dist[t]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">1</span>; k &lt;= n; k++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !st[k] &#123;</span><br><span class=\"line\">\t\t\t\t\tdist[k] = min(dist[k], g[t][k])</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-kruskal算法\"><a href=\"#9-kruskal算法\" class=\"headerlink\" title=\"9.kruskal算法\"></a>9.kruskal算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">p 存储并查集的父节点数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并查集的核心操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">find</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x != p[x] &#123;</span><br><span class=\"line\">\t\tp[x] = find(p[x])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p[x]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果图不连通，返回INF，否则返回最小生成树的树边权重之和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 按照权重从小到大给边排序</span></span><br><span class=\"line\">\tsort.Slice(edges, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges[i].w &lt; edges[j].w</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化并查集</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tp[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> res, cnt <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历所有的边</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\ta, b, w := edges[i].a, edges[i].b, edges[i].w</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ta, b = find(a), find(b)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果a,b两个块不连通，则将两个块联通</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> a != b &#123;</span><br><span class=\"line\">\t\t\tp[a] = b</span><br><span class=\"line\">\t\t\tres += w</span><br><span class=\"line\">\t\t\tcnt++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cnt &lt; n<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> INF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-染色法判定二分图\"><a href=\"#10-染色法判定二分图\" class=\"headerlink\" title=\"10.染色法判定二分图\"></a>10.染色法判定二分图</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">染色法判定二分图</span></span><br><span class=\"line\"><span class=\"comment\">邻接表存储图</span></span><br><span class=\"line\"><span class=\"comment\">color 存储每个点的颜色，0表示未染色，1表示白色，2表示黑色</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> color []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数：u表示当前点，c表示当前点的颜色</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs_1</span><span class=\"params\">(u, c <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\tcolor[u] = c</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[u]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> color[j] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !dfs_1(j, <span class=\"number\">3</span>-c) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> color[j] == c &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-匈牙利算法\"><a href=\"#11-匈牙利算法\" class=\"headerlink\" title=\"11.匈牙利算法\"></a>11.匈牙利算法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> searchandgraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">求二分图的最大匹配</span></span><br><span class=\"line\"><span class=\"comment\">n1,n2 n1表示第一个集合中的点数，n2表示第二个集合中的点数</span></span><br><span class=\"line\"><span class=\"comment\">match 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span></span><br><span class=\"line\"><span class=\"comment\">st 表示第二个集合中的每个点是否已经被遍历过</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> match []<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n1, n2 <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">find_1</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := h[x]; i != <span class=\"number\">-1</span>; i = ne[i] &#123;</span><br><span class=\"line\">\t\tj := e[i]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !st[j] &#123;</span><br><span class=\"line\">\t\t\tst[j] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> match[j] == <span class=\"number\">0</span> || find_1(j) &#123;</span><br><span class=\"line\">\t\t\t\tmatch[j] = i</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hungarian</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tres := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n1; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">1</span>; j &lt;= n2; j++ &#123;</span><br><span class=\"line\">\t\t\tst[j] = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> find_1(i) &#123;</span><br><span class=\"line\">\t\t\tres++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"nodejs版本管理工具nvm的使用","date":"2023-02-16T01:48:59.000Z","type":"tags","_content":"\n## nodejs版本管理工具nvm的使用\n\n#### 1、什么是nvm\n\n如今的web前端开发多数大多都离不开Node，而且node更新迭代很快；不同项目依赖的node版本不同，会导致需要安装对应的node版本才能正常运行;同时维护多个版本的node将会是一件非常麻烦的事情，此时此刻我们就需要一个可以安装多个node版本并随时可以切换的版本控制工具来简化我们的工作，常用的node版本管理工具有n、nvm、nvs，这里我主要介绍nvm。\n\n<!--more-->\n\n#### 2、安装下载\n\n[nvm安装包下载地址](https://github.com/coreybutler/nvm-windows/releases)\n\n### 3、常见的使用命令\n\n```bash\n# 显示nvm版本\nnvm v\n\n# 列出本地已安装所有版本\nnvm list      \n\n# 添加可选参数available列出所有克下载版本\nnvm list available    \n\n# 安装node.js的命令 version指定版本号\nnvm install 10.22.0   \n\n# 安装最新稳定版node.js\nnvm install stable    \n\n# 卸载node.js的命令 version指定版本号\nnvm uninstall 10.22.0 \n\n# 切换到指定的node.js版本，使用此版本nodejs\nnvm use 10.22.0   \n\n# 启用node.js版本管理\nnvm on           \n\n# 关闭node.js版本管理  \nnvm off                \n```\n\n","source":"_posts/4.nodejs版本管理工具nvm的使用.md","raw":"---\ntitle: nodejs版本管理工具nvm的使用\ndate: 2023-02-16 09:48:59\ntags:\n- nodejs\n- nvm\n- 版本管理\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n## nodejs版本管理工具nvm的使用\n\n#### 1、什么是nvm\n\n如今的web前端开发多数大多都离不开Node，而且node更新迭代很快；不同项目依赖的node版本不同，会导致需要安装对应的node版本才能正常运行;同时维护多个版本的node将会是一件非常麻烦的事情，此时此刻我们就需要一个可以安装多个node版本并随时可以切换的版本控制工具来简化我们的工作，常用的node版本管理工具有n、nvm、nvs，这里我主要介绍nvm。\n\n<!--more-->\n\n#### 2、安装下载\n\n[nvm安装包下载地址](https://github.com/coreybutler/nvm-windows/releases)\n\n### 3、常见的使用命令\n\n```bash\n# 显示nvm版本\nnvm v\n\n# 列出本地已安装所有版本\nnvm list      \n\n# 添加可选参数available列出所有克下载版本\nnvm list available    \n\n# 安装node.js的命令 version指定版本号\nnvm install 10.22.0   \n\n# 安装最新稳定版node.js\nnvm install stable    \n\n# 卸载node.js的命令 version指定版本号\nnvm uninstall 10.22.0 \n\n# 切换到指定的node.js版本，使用此版本nodejs\nnvm use 10.22.0   \n\n# 启用node.js版本管理\nnvm on           \n\n# 关闭node.js版本管理  \nnvm off                \n```\n\n","slug":"4.nodejs版本管理工具nvm的使用","published":1,"updated":"2024-01-06T00:21:08.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dy001x0cfv2i4u3qrj","content":"<h2 id=\"nodejs版本管理工具nvm的使用\"><a href=\"#nodejs版本管理工具nvm的使用\" class=\"headerlink\" title=\"nodejs版本管理工具nvm的使用\"></a>nodejs版本管理工具nvm的使用</h2><h4 id=\"1、什么是nvm\"><a href=\"#1、什么是nvm\" class=\"headerlink\" title=\"1、什么是nvm\"></a>1、什么是nvm</h4><p>如今的web前端开发多数大多都离不开Node，而且node更新迭代很快；不同项目依赖的node版本不同，会导致需要安装对应的node版本才能正常运行;同时维护多个版本的node将会是一件非常麻烦的事情，此时此刻我们就需要一个可以安装多个node版本并随时可以切换的版本控制工具来简化我们的工作，常用的node版本管理工具有n、nvm、nvs，这里我主要介绍nvm。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"2、安装下载\"><a href=\"#2、安装下载\" class=\"headerlink\" title=\"2、安装下载\"></a>2、安装下载</h4><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\">nvm安装包下载地址</a></p>\n<h3 id=\"3、常见的使用命令\"><a href=\"#3、常见的使用命令\" class=\"headerlink\" title=\"3、常见的使用命令\"></a>3、常见的使用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示nvm版本</span></span><br><span class=\"line\">nvm v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出本地已安装所有版本</span></span><br><span class=\"line\">nvm list      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加可选参数available列出所有克下载版本</span></span><br><span class=\"line\">nvm list available    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装node.js的命令 version指定版本号</span></span><br><span class=\"line\">nvm install 10.22.0   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新稳定版node.js</span></span><br><span class=\"line\">nvm install stable    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载node.js的命令 version指定版本号</span></span><br><span class=\"line\">nvm uninstall 10.22.0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定的node.js版本，使用此版本nodejs</span></span><br><span class=\"line\">nvm use 10.22.0   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用node.js版本管理</span></span><br><span class=\"line\">nvm on           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭node.js版本管理  </span></span><br><span class=\"line\">nvm off                </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover01.jpg","cover_type":"img","excerpt":"<h2 id=\"nodejs版本管理工具nvm的使用\"><a href=\"#nodejs版本管理工具nvm的使用\" class=\"headerlink\" title=\"nodejs版本管理工具nvm的使用\"></a>nodejs版本管理工具nvm的使用</h2><h4 id=\"1、什么是nvm\"><a href=\"#1、什么是nvm\" class=\"headerlink\" title=\"1、什么是nvm\"></a>1、什么是nvm</h4><p>如今的web前端开发多数大多都离不开Node，而且node更新迭代很快；不同项目依赖的node版本不同，会导致需要安装对应的node版本才能正常运行;同时维护多个版本的node将会是一件非常麻烦的事情，此时此刻我们就需要一个可以安装多个node版本并随时可以切换的版本控制工具来简化我们的工作，常用的node版本管理工具有n、nvm、nvs，这里我主要介绍nvm。</p>","more":"<h4 id=\"2、安装下载\"><a href=\"#2、安装下载\" class=\"headerlink\" title=\"2、安装下载\"></a>2、安装下载</h4><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\">nvm安装包下载地址</a></p>\n<h3 id=\"3、常见的使用命令\"><a href=\"#3、常见的使用命令\" class=\"headerlink\" title=\"3、常见的使用命令\"></a>3、常见的使用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示nvm版本</span></span><br><span class=\"line\">nvm v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出本地已安装所有版本</span></span><br><span class=\"line\">nvm list      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加可选参数available列出所有克下载版本</span></span><br><span class=\"line\">nvm list available    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装node.js的命令 version指定版本号</span></span><br><span class=\"line\">nvm install 10.22.0   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新稳定版node.js</span></span><br><span class=\"line\">nvm install stable    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载node.js的命令 version指定版本号</span></span><br><span class=\"line\">nvm uninstall 10.22.0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到指定的node.js版本，使用此版本nodejs</span></span><br><span class=\"line\">nvm use 10.22.0   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用node.js版本管理</span></span><br><span class=\"line\">nvm on           </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭node.js版本管理  </span></span><br><span class=\"line\">nvm off                </span><br></pre></td></tr></table></figure>"},{"title":"七层OSI模型","type":"tags","date":"2023-12-21T03:49:40.000Z","_content":"\n## 七层OSI模型\n\n七层OSI模型有应用层、表示层、会话层、传输层、网络层、数据链路层、物理层；各个层次上的典型网络协议如下：\n\n|    层次    |                 协议                  |\n| :--------: | :-----------------------------------: |\n|   应用层   |        HTTP、SMTP、FTP、Telnet        |\n|   表示层   |        ASCII、MPEG、JPEG、MIDI        |\n|   会话层   |       NetBIOS、SAP、SDP、NWLink       |\n|   传输层   |             TCP、UDP、SPX             |\n|   网络层   |                IP、IPX                |\n| 数据链路层 | Ethernet、Token Ring、FDDI、AppleTalk |\n\n","source":"_posts/5.七层OSI模型.md","raw":"---\ntitle: 七层OSI模型\ntype: tags\ndate: 2023-12-21 11:49:40\ntags:\n- osi\n- 网络\ncategories:\n- 学习笔记\n---\n\n## 七层OSI模型\n\n七层OSI模型有应用层、表示层、会话层、传输层、网络层、数据链路层、物理层；各个层次上的典型网络协议如下：\n\n|    层次    |                 协议                  |\n| :--------: | :-----------------------------------: |\n|   应用层   |        HTTP、SMTP、FTP、Telnet        |\n|   表示层   |        ASCII、MPEG、JPEG、MIDI        |\n|   会话层   |       NetBIOS、SAP、SDP、NWLink       |\n|   传输层   |             TCP、UDP、SPX             |\n|   网络层   |                IP、IPX                |\n| 数据链路层 | Ethernet、Token Ring、FDDI、AppleTalk |\n\n","slug":"5.七层OSI模型","published":1,"updated":"2024-01-06T00:21:32.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1dz00200cfv2gui0hmk","content":"<h2 id=\"七层OSI模型\"><a href=\"#七层OSI模型\" class=\"headerlink\" title=\"七层OSI模型\"></a>七层OSI模型</h2><p>七层OSI模型有应用层、表示层、会话层、传输层、网络层、数据链路层、物理层；各个层次上的典型网络协议如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">层次</th>\n<th align=\"center\">协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">应用层</td>\n<td align=\"center\">HTTP、SMTP、FTP、Telnet</td>\n</tr>\n<tr>\n<td align=\"center\">表示层</td>\n<td align=\"center\">ASCII、MPEG、JPEG、MIDI</td>\n</tr>\n<tr>\n<td align=\"center\">会话层</td>\n<td align=\"center\">NetBIOS、SAP、SDP、NWLink</td>\n</tr>\n<tr>\n<td align=\"center\">传输层</td>\n<td align=\"center\">TCP、UDP、SPX</td>\n</tr>\n<tr>\n<td align=\"center\">网络层</td>\n<td align=\"center\">IP、IPX</td>\n</tr>\n<tr>\n<td align=\"center\">数据链路层</td>\n<td align=\"center\">Ethernet、Token Ring、FDDI、AppleTalk</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"cover":"/img/cover11.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"七层OSI模型\"><a href=\"#七层OSI模型\" class=\"headerlink\" title=\"七层OSI模型\"></a>七层OSI模型</h2><p>七层OSI模型有应用层、表示层、会话层、传输层、网络层、数据链路层、物理层；各个层次上的典型网络协议如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">层次</th>\n<th align=\"center\">协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">应用层</td>\n<td align=\"center\">HTTP、SMTP、FTP、Telnet</td>\n</tr>\n<tr>\n<td align=\"center\">表示层</td>\n<td align=\"center\">ASCII、MPEG、JPEG、MIDI</td>\n</tr>\n<tr>\n<td align=\"center\">会话层</td>\n<td align=\"center\">NetBIOS、SAP、SDP、NWLink</td>\n</tr>\n<tr>\n<td align=\"center\">传输层</td>\n<td align=\"center\">TCP、UDP、SPX</td>\n</tr>\n<tr>\n<td align=\"center\">网络层</td>\n<td align=\"center\">IP、IPX</td>\n</tr>\n<tr>\n<td align=\"center\">数据链路层</td>\n<td align=\"center\">Ethernet、Token Ring、FDDI、AppleTalk</td>\n</tr>\n</tbody></table>\n"},{"title":"go交叉编译(Mac/Linux/Windows)","date":"2023-02-25T12:33:09.000Z","type":"tags","_content":"\n# go交叉编译(Mac/Linux/Windows)\n\n## 1、MAC 下编译 Linux 、Windows\n\n```bash\n#linux\n\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64  go build  -o name   main.go\n```\n\n---\n\n```bash\n#windows\n\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name  main.go\n```\n\n## 2、Linux 下编译 Mac、 Windows\n\n```bash\n#Mac\n\nCGO_ENABLED=0 GOOS=darwin GOARCH=amd64  go build  -o name   main.go\n```\n\n---\n\n```bash\n#Windows\n\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name   main.go\n```\n\n## 3、Windows 下编译 Mac 、Linux\n\n```bash\n#Mac\n\nSET CGO_ENABLED=0\n\nSET GOOS=darwin\n\nSET GOARCH=amd64\n\ngo build  -o name   main.go\n```\n\n---\n\n```bash\n#Linux\n\nSET CGO_ENABLED=0\n\nSET GOOS=linux\n\nSET GOARCH=amd64\n\ngo build  -o name   main.go\n```\n\n","source":"_posts/6.go交叉编译-Mac-Linux-Windows.md","raw":"---\ntitle: go交叉编译(Mac/Linux/Windows)\ndate: 2023-02-25 20:33:09\ntags:\n- go\n- build\ncategories:\n- 实践\ntype: \"tags\"\n---\n\n# go交叉编译(Mac/Linux/Windows)\n\n## 1、MAC 下编译 Linux 、Windows\n\n```bash\n#linux\n\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64  go build  -o name   main.go\n```\n\n---\n\n```bash\n#windows\n\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name  main.go\n```\n\n## 2、Linux 下编译 Mac、 Windows\n\n```bash\n#Mac\n\nCGO_ENABLED=0 GOOS=darwin GOARCH=amd64  go build  -o name   main.go\n```\n\n---\n\n```bash\n#Windows\n\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name   main.go\n```\n\n## 3、Windows 下编译 Mac 、Linux\n\n```bash\n#Mac\n\nSET CGO_ENABLED=0\n\nSET GOOS=darwin\n\nSET GOARCH=amd64\n\ngo build  -o name   main.go\n```\n\n---\n\n```bash\n#Linux\n\nSET CGO_ENABLED=0\n\nSET GOOS=linux\n\nSET GOARCH=amd64\n\ngo build  -o name   main.go\n```\n\n","slug":"6.go交叉编译-Mac-Linux-Windows","published":1,"updated":"2024-01-06T08:16:24.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1e100220cfv1bgcf6qo","content":"<h1 id=\"go交叉编译-Mac-Linux-Windows\"><a href=\"#go交叉编译-Mac-Linux-Windows\" class=\"headerlink\" title=\"go交叉编译(Mac/Linux/Windows)\"></a>go交叉编译(Mac/Linux/Windows)</h1><h2 id=\"1、MAC-下编译-Linux-、Windows\"><a href=\"#1、MAC-下编译-Linux-、Windows\" class=\"headerlink\" title=\"1、MAC 下编译 Linux 、Windows\"></a>1、MAC 下编译 Linux 、Windows</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#linux</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=linux GOARCH=amd64  go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#windows</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name  main.go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、Linux-下编译-Mac、-Windows\"><a href=\"#2、Linux-下编译-Mac、-Windows\" class=\"headerlink\" title=\"2、Linux 下编译 Mac、 Windows\"></a>2、Linux 下编译 Mac、 Windows</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Mac</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64  go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、Windows-下编译-Mac-、Linux\"><a href=\"#3、Windows-下编译-Mac-、Linux\" class=\"headerlink\" title=\"3、Windows 下编译 Mac 、Linux\"></a>3、Windows 下编译 Mac 、Linux</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Mac</span></span><br><span class=\"line\"></span><br><span class=\"line\">SET CGO_ENABLED=0</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOOS=darwin</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOARCH=amd64</span><br><span class=\"line\"></span><br><span class=\"line\">go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\">SET CGO_ENABLED=0</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOOS=linux</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOARCH=amd64</span><br><span class=\"line\"></span><br><span class=\"line\">go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover05.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"go交叉编译-Mac-Linux-Windows\"><a href=\"#go交叉编译-Mac-Linux-Windows\" class=\"headerlink\" title=\"go交叉编译(Mac/Linux/Windows)\"></a>go交叉编译(Mac/Linux/Windows)</h1><h2 id=\"1、MAC-下编译-Linux-、Windows\"><a href=\"#1、MAC-下编译-Linux-、Windows\" class=\"headerlink\" title=\"1、MAC 下编译 Linux 、Windows\"></a>1、MAC 下编译 Linux 、Windows</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#linux</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=linux GOARCH=amd64  go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#windows</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name  main.go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、Linux-下编译-Mac、-Windows\"><a href=\"#2、Linux-下编译-Mac、-Windows\" class=\"headerlink\" title=\"2、Linux 下编译 Mac、 Windows\"></a>2、Linux 下编译 Mac、 Windows</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Mac</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64  go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Windows</span></span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=windows GOARCH=amd64  go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、Windows-下编译-Mac-、Linux\"><a href=\"#3、Windows-下编译-Mac-、Linux\" class=\"headerlink\" title=\"3、Windows 下编译 Mac 、Linux\"></a>3、Windows 下编译 Mac 、Linux</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Mac</span></span><br><span class=\"line\"></span><br><span class=\"line\">SET CGO_ENABLED=0</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOOS=darwin</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOARCH=amd64</span><br><span class=\"line\"></span><br><span class=\"line\">go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\">SET CGO_ENABLED=0</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOOS=linux</span><br><span class=\"line\"></span><br><span class=\"line\">SET GOARCH=amd64</span><br><span class=\"line\"></span><br><span class=\"line\">go build  -o name   main.go</span><br></pre></td></tr></table></figure>\n\n"},{"title":"完全背包问题(go实现)","date":"2023-02-27T09:26:21.000Z","type":"tags","_content":"\n# 完全背包问题(go实现)\n\n## 1.题目\n\n有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。\n\n第 i 种物品的体积是 vi，价值是 wi。\n\n求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\n输出最大价值。\n\n输入格式：\n\n​\t第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。\n\n​\t接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。\n\n输出格式：\n\n​\t输出一个整数，表示最大价值。\n\n数据范围：\n\n​\t0<N,V≤1000\n\n​\t0<vi,wi≤1000\n\n<!--more-->\n\n## 2.解题思路及代码实现\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t/*\n\t   题目：\n\t   有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。\n\n\t   第 i 种物品的体积是 vi，价值是 wi。\n\n\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\t   输出最大价值。\n\n\t   输入格式\n\t   第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。\n\n\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。\n\n\t   输出格式\n\t   输出一个整数，表示最大价值。\n\n\t   数据范围\n\t   0<N,V≤1000\n\t   0<vi,wi≤1000\n\t*/\n\tsimplicity()\n\t// optimize()\n}\n\nfunc max(x, y int) int {\n\tif x < y {\n\t\treturn y\n\t}\n\treturn x\n}\n\nfunc simplicity() {\n\n\t/*\n\t\t1.朴素解法\n\t\t状态表示：f[i][j] 表示考虑前i个物品的情况下，总体积为j时的最大价值。\n\n\t\t转移方程：\n\t\t1.不考虑i个物品的情况\n\t\tf[i][j] = f[i-1][j]\n\n\t\t2.考虑第i个物品的情况\n\t\tf[i][j] = f[i-1][j-k*v[i]]+k*w[i]  k在体积足够的情况下穷举\n\n\t\t汇总：\n\t\tf[i][j] = max{f[i-1][j],f[i-1][j-k*v[i]]+k*w[i]} k在体积足够的情况下穷举\n\n\n\t\t复杂度：\n\t\t时间复杂度O(N*V*K)\n\t\t空间复杂度O(N*V)\n\n\t*/\n\n\tconst N = 1010\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N][N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t}\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := m; j >= v[i]; j-- {\n\t\t\tfor k := 0; k*v[i] <= j; k++ {\n\t\t\t\tf[i][j] = max(f[i-1][j], f[i-1][j-k*v[i]]+k*w[i])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(f[n][m])\n}\n\nfunc optimize() {\n\t/*\n\t\t2.优化实现\n\t\t状态表示：f[i]表示总体积为i时的最大价值。\n\n\t\t转移方程：\n\t\tfor i=1...n\n\t\tfor j=0...m\n\t\tf[j]= max{f[j], f[j - v[i]] + w[i]}\n\n\t\t复杂度：\n\t\t时间复杂度O(VN)\n\t\t空间复杂度O(V)\n\n\n\t\t证明一下转移方程的正确性（数学归纳法）：\n\t\t初始条件：f[0] = 0\n\t\t1、假设考虑前i-1个物品之后，所有的f[j]是正确的。\n\t\t2、证明： 考虑完i个物品之后，所有的f[j]是正确的。\n\n\t\t对某个j而言，如果最优解中包含k个v[i]，\n\t\t则有：\n\t\tf[j - k*v[i]] 不包含第i个物品的情况；此时所有的f[j]是正确的。 ------ （假设条件）\n\n\t\t递推：\n\t\t转移方程：\tf[j] = max{ f[j], f[j - v[i]] + w[i] }\n\t\t则\n\t\tf[j] = max{f[j],f[j - (k-1)*v[i] -v[i]] + w[i]}  包含1个v[i]的情况\n\t\t...\n\t\tf[j] = max{f[j], f[j - v[i]] + w[i]} 包含k-1个v[i]的情况\n\t\tf[j] = max{f[j], f[j]} 包含k个v[i]的情况\n\t\t表明，在考虑完第i个物品之后，所有的f[j]也是正确的。\n\t\t证毕。\n\t*/\n\tconst N = 1010\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t}\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 0; j <= m; j++ {\n\t\t\tif j >= v[i] {\n\t\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(f[m])\n}\n\n```\n\n","source":"_posts/9.完全背包问题-go实现.md","raw":"---\ntitle: 完全背包问题(go实现)\ndate: 2023-02-27 17:26:21\ntags:\n- 完全背包\n- go\n- 算法\ncategories:\n- 学习笔记\ntype: \"tags\"\n---\n\n# 完全背包问题(go实现)\n\n## 1.题目\n\n有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。\n\n第 i 种物品的体积是 vi，价值是 wi。\n\n求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\n输出最大价值。\n\n输入格式：\n\n​\t第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。\n\n​\t接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。\n\n输出格式：\n\n​\t输出一个整数，表示最大价值。\n\n数据范围：\n\n​\t0<N,V≤1000\n\n​\t0<vi,wi≤1000\n\n<!--more-->\n\n## 2.解题思路及代码实现\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t/*\n\t   题目：\n\t   有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。\n\n\t   第 i 种物品的体积是 vi，价值是 wi。\n\n\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\t   输出最大价值。\n\n\t   输入格式\n\t   第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。\n\n\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。\n\n\t   输出格式\n\t   输出一个整数，表示最大价值。\n\n\t   数据范围\n\t   0<N,V≤1000\n\t   0<vi,wi≤1000\n\t*/\n\tsimplicity()\n\t// optimize()\n}\n\nfunc max(x, y int) int {\n\tif x < y {\n\t\treturn y\n\t}\n\treturn x\n}\n\nfunc simplicity() {\n\n\t/*\n\t\t1.朴素解法\n\t\t状态表示：f[i][j] 表示考虑前i个物品的情况下，总体积为j时的最大价值。\n\n\t\t转移方程：\n\t\t1.不考虑i个物品的情况\n\t\tf[i][j] = f[i-1][j]\n\n\t\t2.考虑第i个物品的情况\n\t\tf[i][j] = f[i-1][j-k*v[i]]+k*w[i]  k在体积足够的情况下穷举\n\n\t\t汇总：\n\t\tf[i][j] = max{f[i-1][j],f[i-1][j-k*v[i]]+k*w[i]} k在体积足够的情况下穷举\n\n\n\t\t复杂度：\n\t\t时间复杂度O(N*V*K)\n\t\t空间复杂度O(N*V)\n\n\t*/\n\n\tconst N = 1010\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N][N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t}\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := m; j >= v[i]; j-- {\n\t\t\tfor k := 0; k*v[i] <= j; k++ {\n\t\t\t\tf[i][j] = max(f[i-1][j], f[i-1][j-k*v[i]]+k*w[i])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(f[n][m])\n}\n\nfunc optimize() {\n\t/*\n\t\t2.优化实现\n\t\t状态表示：f[i]表示总体积为i时的最大价值。\n\n\t\t转移方程：\n\t\tfor i=1...n\n\t\tfor j=0...m\n\t\tf[j]= max{f[j], f[j - v[i]] + w[i]}\n\n\t\t复杂度：\n\t\t时间复杂度O(VN)\n\t\t空间复杂度O(V)\n\n\n\t\t证明一下转移方程的正确性（数学归纳法）：\n\t\t初始条件：f[0] = 0\n\t\t1、假设考虑前i-1个物品之后，所有的f[j]是正确的。\n\t\t2、证明： 考虑完i个物品之后，所有的f[j]是正确的。\n\n\t\t对某个j而言，如果最优解中包含k个v[i]，\n\t\t则有：\n\t\tf[j - k*v[i]] 不包含第i个物品的情况；此时所有的f[j]是正确的。 ------ （假设条件）\n\n\t\t递推：\n\t\t转移方程：\tf[j] = max{ f[j], f[j - v[i]] + w[i] }\n\t\t则\n\t\tf[j] = max{f[j],f[j - (k-1)*v[i] -v[i]] + w[i]}  包含1个v[i]的情况\n\t\t...\n\t\tf[j] = max{f[j], f[j - v[i]] + w[i]} 包含k-1个v[i]的情况\n\t\tf[j] = max{f[j], f[j]} 包含k个v[i]的情况\n\t\t表明，在考虑完第i个物品之后，所有的f[j]也是正确的。\n\t\t证毕。\n\t*/\n\tconst N = 1010\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t}\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 0; j <= m; j++ {\n\t\t\tif j >= v[i] {\n\t\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(f[m])\n}\n\n```\n\n","slug":"9.完全背包问题-go实现","published":1,"updated":"2024-01-06T00:21:53.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1e300250cfvdobs9wke","content":"<h1 id=\"完全背包问题-go实现\"><a href=\"#完全背包问题-go实现\" class=\"headerlink\" title=\"完全背包问题(go实现)\"></a>完全背包问题(go实现)</h1><h2 id=\"1-题目\"><a href=\"#1-题目\" class=\"headerlink\" title=\"1.题目\"></a>1.题目</h2><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</p>\n<p>第 i 种物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p>\n<p>输出最大价值。</p>\n<p>输入格式：</p>\n<p>​    第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>​    接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</p>\n<p>输出格式：</p>\n<p>​    输出一个整数，表示最大价值。</p>\n<p>数据范围：</p>\n<p>​    0&lt;N,V≤1000</p>\n<p>​    0&lt;vi,wi≤1000</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-解题思路及代码实现\"><a href=\"#2-解题思路及代码实现\" class=\"headerlink\" title=\"2.解题思路及代码实现\"></a>2.解题思路及代码实现</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t   题目：</span></span><br><span class=\"line\"><span class=\"comment\">\t   有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   第 i 种物品的体积是 vi，价值是 wi。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输入格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输出格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出一个整数，表示最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   数据范围</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;N,V≤1000</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;vi,wi≤1000</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tsimplicity()</span><br><span class=\"line\">\t<span class=\"comment\">// optimize()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">max</span><span class=\"params\">(x, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; y &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simplicity</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1.朴素解法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t状态表示：f[i][j] 表示考虑前i个物品的情况下，总体积为j时的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1.不考虑i个物品的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[i][j] = f[i-1][j]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t2.考虑第i个物品的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[i][j] = f[i-1][j-k*v[i]]+k*w[i]  k在体积足够的情况下穷举</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t汇总：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[i][j] = max&#123;f[i-1][j],f[i-1][j-k*v[i]]+k*w[i]&#125; k在体积足够的情况下穷举</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t时间复杂度O(N*V*K)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t空间复杂度O(N*V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N][N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := m; j &gt;= v[i]; j-- &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k*v[i] &lt;= j; k++ &#123;</span><br><span class=\"line\">\t\t\t\tf[i][j] = max(f[i<span class=\"number\">-1</span>][j], f[i<span class=\"number\">-1</span>][j-k*v[i]]+k*w[i])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[n][m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">optimize</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t2.优化实现</span></span><br><span class=\"line\"><span class=\"comment\">\t\t状态表示：f[i]表示总体积为i时的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tfor i=1...n</span></span><br><span class=\"line\"><span class=\"comment\">\t\tfor j=0...m</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j]= max&#123;f[j], f[j - v[i]] + w[i]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t时间复杂度O(VN)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t空间复杂度O(V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t证明一下转移方程的正确性（数学归纳法）：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t初始条件：f[0] = 0</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1、假设考虑前i-1个物品之后，所有的f[j]是正确的。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t2、证明： 考虑完i个物品之后，所有的f[j]是正确的。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t对某个j而言，如果最优解中包含k个v[i]，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t则有：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j - k*v[i]] 不包含第i个物品的情况；此时所有的f[j]是正确的。 ------ （假设条件）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t递推：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t转移方程：\tf[j] = max&#123; f[j], f[j - v[i]] + w[i] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t则</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j] = max&#123;f[j],f[j - (k-1)*v[i] -v[i]] + w[i]&#125;  包含1个v[i]的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\t...</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j] = max&#123;f[j], f[j - v[i]] + w[i]&#125; 包含k-1个v[i]的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j] = max&#123;f[j], f[j]&#125; 包含k个v[i]的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\t表明，在考虑完第i个物品之后，所有的f[j]也是正确的。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t证毕。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt;= m; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> j &gt;= v[i] &#123;</span><br><span class=\"line\">\t\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover12.jpg","cover_type":"img","excerpt":"<h1 id=\"完全背包问题-go实现\"><a href=\"#完全背包问题-go实现\" class=\"headerlink\" title=\"完全背包问题(go实现)\"></a>完全背包问题(go实现)</h1><h2 id=\"1-题目\"><a href=\"#1-题目\" class=\"headerlink\" title=\"1.题目\"></a>1.题目</h2><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</p>\n<p>第 i 种物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p>\n<p>输出最大价值。</p>\n<p>输入格式：</p>\n<p>​    第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p>\n<p>​    接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</p>\n<p>输出格式：</p>\n<p>​    输出一个整数，表示最大价值。</p>\n<p>数据范围：</p>\n<p>​    0&lt;N,V≤1000</p>\n<p>​    0&lt;vi,wi≤1000</p>","more":"<h2 id=\"2-解题思路及代码实现\"><a href=\"#2-解题思路及代码实现\" class=\"headerlink\" title=\"2.解题思路及代码实现\"></a>2.解题思路及代码实现</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t   题目：</span></span><br><span class=\"line\"><span class=\"comment\">\t   有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   第 i 种物品的体积是 vi，价值是 wi。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输入格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输出格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出一个整数，表示最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   数据范围</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;N,V≤1000</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;vi,wi≤1000</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tsimplicity()</span><br><span class=\"line\">\t<span class=\"comment\">// optimize()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">max</span><span class=\"params\">(x, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; y &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simplicity</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1.朴素解法</span></span><br><span class=\"line\"><span class=\"comment\">\t\t状态表示：f[i][j] 表示考虑前i个物品的情况下，总体积为j时的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1.不考虑i个物品的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[i][j] = f[i-1][j]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t2.考虑第i个物品的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[i][j] = f[i-1][j-k*v[i]]+k*w[i]  k在体积足够的情况下穷举</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t汇总：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[i][j] = max&#123;f[i-1][j],f[i-1][j-k*v[i]]+k*w[i]&#125; k在体积足够的情况下穷举</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t时间复杂度O(N*V*K)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t空间复杂度O(N*V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N][N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := m; j &gt;= v[i]; j-- &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k*v[i] &lt;= j; k++ &#123;</span><br><span class=\"line\">\t\t\t\tf[i][j] = max(f[i<span class=\"number\">-1</span>][j], f[i<span class=\"number\">-1</span>][j-k*v[i]]+k*w[i])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[n][m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">optimize</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t2.优化实现</span></span><br><span class=\"line\"><span class=\"comment\">\t\t状态表示：f[i]表示总体积为i时的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tfor i=1...n</span></span><br><span class=\"line\"><span class=\"comment\">\t\tfor j=0...m</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j]= max&#123;f[j], f[j - v[i]] + w[i]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t时间复杂度O(VN)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t空间复杂度O(V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t证明一下转移方程的正确性（数学归纳法）：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t初始条件：f[0] = 0</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1、假设考虑前i-1个物品之后，所有的f[j]是正确的。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t2、证明： 考虑完i个物品之后，所有的f[j]是正确的。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t对某个j而言，如果最优解中包含k个v[i]，</span></span><br><span class=\"line\"><span class=\"comment\">\t\t则有：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j - k*v[i]] 不包含第i个物品的情况；此时所有的f[j]是正确的。 ------ （假设条件）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t递推：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t转移方程：\tf[j] = max&#123; f[j], f[j - v[i]] + w[i] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t则</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j] = max&#123;f[j],f[j - (k-1)*v[i] -v[i]] + w[i]&#125;  包含1个v[i]的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\t...</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j] = max&#123;f[j], f[j - v[i]] + w[i]&#125; 包含k-1个v[i]的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tf[j] = max&#123;f[j], f[j]&#125; 包含k个v[i]的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\t表明，在考虑完第i个物品之后，所有的f[j]也是正确的。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t证毕。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt;= m; j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> j &gt;= v[i] &#123;</span><br><span class=\"line\">\t\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"01背包问题(go实现)","date":"2023-02-27T02:19:04.000Z","type":"tags","_content":"\n# 01背包问题(go实现)\n\n## 1.问题\n\n有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。\n\n第 i 件物品的体积是 vi，价值是 wi。\n\n求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\n输出最大价值。\n\n输入格式\n\n​    第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。\n\n​\t接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。\n\n输出格式\n\n​    输出一个整数，表示最大价值。\n\n数据范围\n\n​    0<N,V≤1000\n\n​    0<vi,wi≤1000\n\n<!--more-->\n\n## 2.解题思路及代码实现\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t/*\n\t   问题：\n\t   有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。\n\n\t   第 i 件物品的体积是 vi，价值是 wi。\n\n\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\t   输出最大价值。\n\n\t   输入格式\n\t   第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。\n\n\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。\n\n\t   输出格式\n\t   输出一个整数，表示最大价值。\n\n\t   数据范围\n\t   0<N,V≤1000\n\t   0<vi,wi≤1000\n\n\t*/\n\toptimize()\n\t// simplicity()\n}\n\nfunc max(x, y int) int {\n\tif x < y {\n\t\treturn y\n\t} else {\n\t\treturn x\n\t}\n}\n\nfunc simplicity() {\n\t/*\n\t\t思路：\n\t\t   1、朴素实现\n\t\t   f[i][j]:表示前i件物品恰放入一个容量为j的背包可以获得的最大价值。\n\n\t\t   转移方程：\n\t\t   1.不选第i件物品。\n\t\t   f[i][j]=f[i-1][j]\n\n\t\t   2.选择第i件物品。\n\t\t   f[i][j]=f[i-1][j-v[i]]+w[i]\n\n\t\t   汇总：\n\t\t   f[i][j]=max{f[i-1][j],f[i-1][j-v[i]]+w[i]}\n\n\t\t复杂度：\n\t\t\t时间和空间复杂度均为O(N*V)\n\n\t*/\n\tconst N = 1010\n\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N][N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t}\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 0; j <= m; j++ {\n\t\t\tf[i][j] = f[i-1][j]\n\t\t\tif j >= v[i] {\n\t\t\t\tf[i][j] = max(f[i][j], f[i-1][j-v[i]]+w[i])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(f[n][m])\n}\n\nfunc optimize() {\n\t/*\n\t\t1、优化空间复杂度\n\t\t   f[j]:表示容量为j的背包可以获得的最大价值。\n\n\t\t   转移方程：\n\t\t   1.不选第i件物品。\n\t\t   f[j]=f[j]\n\n\t\t   2.选择第i件物品。\n\t\t   f[j]=f[j-v[i]]+w[i]\n\n\t\t   汇总：\n\t\t   f[j]=max{f[j],f[j-v[i]]+w[i]}\n\n\t\t复杂度：\n\t\t\t时间复杂度均为O(N*V)\n\t\t\t空间复杂度均为O(V)\n\n\t*/\n\tconst N = 1010\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t\tfor j := m; j >= v[i]; j-- {\n\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])\n\t\t}\n\t}\n\tfmt.Println(f[m])\n}\n\n```\n\n\n\n\n\n","source":"_posts/8.01背包问题-go实现.md","raw":"---\ntitle: 01背包问题(go实现)\ndate: 2023-02-27 10:19:04\ntags:\n- 01背包问题\n- go\ncategories:\n- 学习笔记\ntype: \"tags\"\n---\n\n# 01背包问题(go实现)\n\n## 1.问题\n\n有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。\n\n第 i 件物品的体积是 vi，价值是 wi。\n\n求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\n输出最大价值。\n\n输入格式\n\n​    第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。\n\n​\t接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。\n\n输出格式\n\n​    输出一个整数，表示最大价值。\n\n数据范围\n\n​    0<N,V≤1000\n\n​    0<vi,wi≤1000\n\n<!--more-->\n\n## 2.解题思路及代码实现\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t/*\n\t   问题：\n\t   有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。\n\n\t   第 i 件物品的体积是 vi，价值是 wi。\n\n\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。\n\t   输出最大价值。\n\n\t   输入格式\n\t   第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。\n\n\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。\n\n\t   输出格式\n\t   输出一个整数，表示最大价值。\n\n\t   数据范围\n\t   0<N,V≤1000\n\t   0<vi,wi≤1000\n\n\t*/\n\toptimize()\n\t// simplicity()\n}\n\nfunc max(x, y int) int {\n\tif x < y {\n\t\treturn y\n\t} else {\n\t\treturn x\n\t}\n}\n\nfunc simplicity() {\n\t/*\n\t\t思路：\n\t\t   1、朴素实现\n\t\t   f[i][j]:表示前i件物品恰放入一个容量为j的背包可以获得的最大价值。\n\n\t\t   转移方程：\n\t\t   1.不选第i件物品。\n\t\t   f[i][j]=f[i-1][j]\n\n\t\t   2.选择第i件物品。\n\t\t   f[i][j]=f[i-1][j-v[i]]+w[i]\n\n\t\t   汇总：\n\t\t   f[i][j]=max{f[i-1][j],f[i-1][j-v[i]]+w[i]}\n\n\t\t复杂度：\n\t\t\t时间和空间复杂度均为O(N*V)\n\n\t*/\n\tconst N = 1010\n\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N][N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t}\n\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := 0; j <= m; j++ {\n\t\t\tf[i][j] = f[i-1][j]\n\t\t\tif j >= v[i] {\n\t\t\t\tf[i][j] = max(f[i][j], f[i-1][j-v[i]]+w[i])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(f[n][m])\n}\n\nfunc optimize() {\n\t/*\n\t\t1、优化空间复杂度\n\t\t   f[j]:表示容量为j的背包可以获得的最大价值。\n\n\t\t   转移方程：\n\t\t   1.不选第i件物品。\n\t\t   f[j]=f[j]\n\n\t\t   2.选择第i件物品。\n\t\t   f[j]=f[j-v[i]]+w[i]\n\n\t\t   汇总：\n\t\t   f[j]=max{f[j],f[j-v[i]]+w[i]}\n\n\t\t复杂度：\n\t\t\t时间复杂度均为O(N*V)\n\t\t\t空间复杂度均为O(V)\n\n\t*/\n\tconst N = 1010\n\tvar n, m int\n\tvar v, w [N]int\n\tvar f [N]int\n\n\tfmt.Scanf(\"%d %d\\n\", &n, &m)\n\tfor i := 1; i <= n; i++ {\n\t\tfmt.Scanf(\"%d %d\\n\", &v[i], &w[i])\n\t\tfor j := m; j >= v[i]; j-- {\n\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])\n\t\t}\n\t}\n\tfmt.Println(f[m])\n}\n\n```\n\n\n\n\n\n","slug":"8.01背包问题-go实现","published":1,"updated":"2024-01-06T00:21:47.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1e300270cfva0wkge0s","content":"<h1 id=\"01背包问题-go实现\"><a href=\"#01背包问题-go实现\" class=\"headerlink\" title=\"01背包问题(go实现)\"></a>01背包问题(go实现)</h1><h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p>\n<p>第 i 件物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p>\n<p>输出最大价值。</p>\n<p>输入格式</p>\n<p>​    第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p>\n<p>​    接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</p>\n<p>输出格式</p>\n<p>​    输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>​    0&lt;N,V≤1000</p>\n<p>​    0&lt;vi,wi≤1000</p>\n<span id=\"more\"></span>\n\n<h2 id=\"2-解题思路及代码实现\"><a href=\"#2-解题思路及代码实现\" class=\"headerlink\" title=\"2.解题思路及代码实现\"></a>2.解题思路及代码实现</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t   问题：</span></span><br><span class=\"line\"><span class=\"comment\">\t   有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   第 i 件物品的体积是 vi，价值是 wi。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输入格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输出格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出一个整数，表示最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   数据范围</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;N,V≤1000</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;vi,wi≤1000</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\toptimize()</span><br><span class=\"line\">\t<span class=\"comment\">// simplicity()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">max</span><span class=\"params\">(x, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; y &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> y</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simplicity</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t思路：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   1、朴素实现</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]:表示前i件物品恰放入一个容量为j的背包可以获得的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   1.不选第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]=f[i-1][j]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   2.选择第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]=f[i-1][j-v[i]]+w[i]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   汇总：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]=max&#123;f[i-1][j],f[i-1][j-v[i]]+w[i]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t时间和空间复杂度均为O(N*V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N][N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt;= m; j++ &#123;</span><br><span class=\"line\">\t\t\tf[i][j] = f[i<span class=\"number\">-1</span>][j]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> j &gt;= v[i] &#123;</span><br><span class=\"line\">\t\t\t\tf[i][j] = max(f[i][j], f[i<span class=\"number\">-1</span>][j-v[i]]+w[i])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[n][m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">optimize</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1、优化空间复杂度</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]:表示容量为j的背包可以获得的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   1.不选第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]=f[j]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   2.选择第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]=f[j-v[i]]+w[i]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   汇总：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]=max&#123;f[j],f[j-v[i]]+w[i]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t时间复杂度均为O(N*V)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t空间复杂度均为O(V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := m; j &gt;= v[i]; j-- &#123;</span><br><span class=\"line\">\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"cover":"/img/cover08.jpg","cover_type":"img","excerpt":"<h1 id=\"01背包问题-go实现\"><a href=\"#01背包问题-go实现\" class=\"headerlink\" title=\"01背包问题(go实现)\"></a>01背包问题(go实现)</h1><h2 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h2><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p>\n<p>第 i 件物品的体积是 vi，价值是 wi。</p>\n<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</p>\n<p>输出最大价值。</p>\n<p>输入格式</p>\n<p>​    第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p>\n<p>​    接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</p>\n<p>输出格式</p>\n<p>​    输出一个整数，表示最大价值。</p>\n<p>数据范围</p>\n<p>​    0&lt;N,V≤1000</p>\n<p>​    0&lt;vi,wi≤1000</p>","more":"<h2 id=\"2-解题思路及代码实现\"><a href=\"#2-解题思路及代码实现\" class=\"headerlink\" title=\"2.解题思路及代码实现\"></a>2.解题思路及代码实现</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t   问题：</span></span><br><span class=\"line\"><span class=\"comment\">\t   有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   第 i 件物品的体积是 vi，价值是 wi。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输入格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   输出格式</span></span><br><span class=\"line\"><span class=\"comment\">\t   输出一个整数，表示最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t   数据范围</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;N,V≤1000</span></span><br><span class=\"line\"><span class=\"comment\">\t   0&lt;vi,wi≤1000</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\toptimize()</span><br><span class=\"line\">\t<span class=\"comment\">// simplicity()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">max</span><span class=\"params\">(x, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; y &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> y</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simplicity</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t思路：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   1、朴素实现</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]:表示前i件物品恰放入一个容量为j的背包可以获得的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   1.不选第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]=f[i-1][j]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   2.选择第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]=f[i-1][j-v[i]]+w[i]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   汇总：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[i][j]=max&#123;f[i-1][j],f[i-1][j-v[i]]+w[i]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t时间和空间复杂度均为O(N*V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N][N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt;= m; j++ &#123;</span><br><span class=\"line\">\t\t\tf[i][j] = f[i<span class=\"number\">-1</span>][j]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> j &gt;= v[i] &#123;</span><br><span class=\"line\">\t\t\t\tf[i][j] = max(f[i][j], f[i<span class=\"number\">-1</span>][j-v[i]]+w[i])</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[n][m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">optimize</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t1、优化空间复杂度</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]:表示容量为j的背包可以获得的最大价值。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   转移方程：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   1.不选第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]=f[j]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   2.选择第i件物品。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]=f[j-v[i]]+w[i]</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t   汇总：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   f[j]=max&#123;f[j],f[j-v[i]]+w[i]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t复杂度：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t时间复杂度均为O(N*V)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t空间复杂度均为O(V)</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> N = <span class=\"number\">1010</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n, m <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> v, w [N]<span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f [N]<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;n, &amp;m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Scanf(<span class=\"string\">&quot;%d %d\\n&quot;</span>, &amp;v[i], &amp;w[i])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := m; j &gt;= v[i]; j-- &#123;</span><br><span class=\"line\">\t\t\tf[j] = max(f[j], f[j-v[i]]+w[i])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(f[m])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Java_sdk安装","type":"tags","date":"2024-01-08T12:10:50.000Z","_content":"\n## Java_sdk安装\n\n自动化安装脚本如下，官网下载好Java sdk包后，配置好存放路径和安装路径，执行即可。\n\n```shell\n#!/bin/bash\n# Java sdk包存放路径\njava_addr=\"\"\n\n# Java sdk的安装路径\njava_home=\"\"\n\n\n# 创建安装目录\nmkdir -p $java_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'create file failed!'\n    exit 1\nfi\n\n\n# 解压安装包\ntar -zxvf $java_addr $java_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\n# 配置Java环境变量\nname=$(ls $java_home | grep jdk)\necho \"export JAVA_HOME=${java_home}/${name}\" >> /etc/profile\necho 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile\necho 'export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar' >> /etc/profile\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\nsource /etc/profile\n\necho 'install successful!'\n```\n\n","source":"_posts/32.Java_sdk安装.md","raw":"---\ntitle: Java_sdk安装\ntype: tags\ncategories:\n  - 实践\ndate: 2024-01-08 20:10:50\ntags:\n- java\n- shell\n---\n\n## Java_sdk安装\n\n自动化安装脚本如下，官网下载好Java sdk包后，配置好存放路径和安装路径，执行即可。\n\n```shell\n#!/bin/bash\n# Java sdk包存放路径\njava_addr=\"\"\n\n# Java sdk的安装路径\njava_home=\"\"\n\n\n# 创建安装目录\nmkdir -p $java_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'create file failed!'\n    exit 1\nfi\n\n\n# 解压安装包\ntar -zxvf $java_addr $java_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\n# 配置Java环境变量\nname=$(ls $java_home | grep jdk)\necho \"export JAVA_HOME=${java_home}/${name}\" >> /etc/profile\necho 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile\necho 'export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar' >> /etc/profile\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\nsource /etc/profile\n\necho 'install successful!'\n```\n\n","slug":"32.Java_sdk安装","published":1,"updated":"2024-01-08T13:18:40.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1eu004o0cfv09j7ceto","content":"<h2 id=\"Java-sdk安装\"><a href=\"#Java-sdk安装\" class=\"headerlink\" title=\"Java_sdk安装\"></a>Java_sdk安装</h2><p>自动化安装脚本如下，官网下载好Java sdk包后，配置好存放路径和安装路径，执行即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Java sdk包存放路径</span></span><br><span class=\"line\">java_addr=&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Java sdk的安装路径</span></span><br><span class=\"line\">java_home=&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建安装目录</span></span><br><span class=\"line\">mkdir -p $java_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;create file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压安装包</span></span><br><span class=\"line\">tar -zxvf $java_addr $java_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置Java环境变量</span></span><br><span class=\"line\">name=$(ls $java_home | grep jdk)</span><br><span class=\"line\">echo &quot;export JAVA_HOME=$&#123;java_home&#125;/$&#123;name&#125;&quot; &gt;&gt; /etc/profile</span><br><span class=\"line\">echo &#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; /etc/profile</span><br><span class=\"line\">echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; /etc/profile</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;install successful!&#x27;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"/img/cover02.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"Java-sdk安装\"><a href=\"#Java-sdk安装\" class=\"headerlink\" title=\"Java_sdk安装\"></a>Java_sdk安装</h2><p>自动化安装脚本如下，官网下载好Java sdk包后，配置好存放路径和安装路径，执行即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Java sdk包存放路径</span></span><br><span class=\"line\">java_addr=&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Java sdk的安装路径</span></span><br><span class=\"line\">java_home=&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建安装目录</span></span><br><span class=\"line\">mkdir -p $java_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;create file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压安装包</span></span><br><span class=\"line\">tar -zxvf $java_addr $java_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置Java环境变量</span></span><br><span class=\"line\">name=$(ls $java_home | grep jdk)</span><br><span class=\"line\">echo &quot;export JAVA_HOME=$&#123;java_home&#125;/$&#123;name&#125;&quot; &gt;&gt; /etc/profile</span><br><span class=\"line\">echo &#x27;export PATH=$JAVA_HOME/bin:$PATH&#x27; &gt;&gt; /etc/profile</span><br><span class=\"line\">echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt; /etc/profile</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;install successful!&#x27;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Kafka安装","type":"tags","date":"2024-01-08T11:57:02.000Z","_content":"\n## Kafka安装\n\nKafka安装需要有Java和zookeeper环境，如何配置可参考本站文章《Java_sdk安装》和《zookeeper安装》。\n\n### 1.本地安装\n\n#### 1.1.解压安装\n\n本地安装，适用于本地开发调试使用。自动化安装脚本如下：\n\n```shell\n#!/bin/bash\n# kafka下载地址\nkafka_addr=\"\"\n\n# kafka的安装路径\nkafka_home=\"/test/kafka\"\n\n\n# 创建安装目录\nmkdir -p $kafka_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'create file failed!'\n    exit 1\nfi\n\n# 下载安装包\nwget $kafka_addr\nif [ \"$?\" != \"0\" ]; then\n    echo 'download failed!'\n    exit 1\nfi\n\n# 解压安装包\nname=$(ls | grep zookeeper)\ntar -zxvf $name -C $kafka_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\necho 'install successful!'\n```\n\n#### 1.2.调整配置\n\n进入conf目录下确认server.properties配置是否符合预期，常见的配置项如下：\n\n```bash\n# kafka server配置 kafka最为重要三个配置依次为：broker.id、log.dir、zookeeper.connect\n \n# 每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况\nbroker.id=0\n \n# broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置\nhost.name=10.0.0.1\n \n# broker server服务端口\nport =9092\n \n# broker处理消息的最大线程数，一般情况下数量为cpu核数\nnum.network.threads=4\n \n# broker处理磁盘IO的线程数，数值为cpu核数2倍\nnum.io.threads=8\n \n# socket的发送缓冲区，socket的调优参数SO_SENDBUFF\nsocket.send.buffer.bytes=1048576\n \n# socket的接受缓冲区，socket的调优参数SO_RECVBUFF\nsocket.receive.buffer.bytes=1048576\n \n# socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖\nsocket.request.max.bytes=104857600\n \n# 每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖\nnum.partitions=2\n \n# 数据文件保留多长时间， 存储的最大时间超过这个时间会根据log.cleanup.policy设置数据清除策略，log.retention.bytes和log.retention.minutes或log.retention.hours任意一个达到要求，都会执行删除\n# 有2删除数据文件方式： 按照文件大小删除：log.retention.bytes  按照2中不同时间粒度删除：分别为分钟，小时\nlog.retention.hours=168\n \n# topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖\nlog.segment.bytes=536870912\n \n# 文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略\nlog.retention.check.interval.ms=60000\n \n# 是否开启日志清理\nlog.cleaner.enable=false\n \n# zookeeper集群的地址，可以是多个，多个之间用逗号分割 hostname1:port1,hostname2:port2,hostname3:port3\nzookeeper.connect=10.0.0.1:2181\n \n# ZooKeeper的连接超时时间\nzookeeper.connection.timeout.ms=60000\n \n# ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不应过大\nzookeeper.session.timeout.ms=6000\n \n# ZooKeeper集群中leader和follower之间的同步时间\nzookeeper.sync.time.ms =2000\n \n# kafka数据的存放地址，多个地址的话用逗号分割,多个目录分布在不同磁盘上可以提高读写性能  /data/kafka-logs-1，/data/kafka-logs-2\nlog.dirs=/tmp/kafka.log\n\n```\n\n#### 1.3.启停服务\n\n进入bin目录\n\n```bash\n# 启动服务\n./kafka-server-start.sh -daemon ../config/server.properties\n\n# 停止服务\n./kafka-server-stop.sh\n```\n\n#### 1.4.验证功能\n\n```bash\n# 创建并验证主题\n./kafka-topics.sh --create --partitions 1 --replication-factor 1 --topic test --bootstrap-server localhost:9092\n\n# 查看主题\n./kafka-topics.sh --list --bootstrap-server localhost:9092\n\n# 向测试主题上发布消息\n./kafka-console-producer.sh --topic test --bootstrap-server localhost:9092\n\n# 从测试主题上读取消息\n./kafka-console-consumer.sh --topic test --from-beginning --bootstrap-server localhost:9092\n```\n\n\n\n","source":"_posts/31.Kafka安装.md","raw":"---\ntitle: Kafka安装\ntype: tags\ncategories:\n  - 实践\ndate: 2024-01-08 19:57:02\ntags:\n- Kafka\n---\n\n## Kafka安装\n\nKafka安装需要有Java和zookeeper环境，如何配置可参考本站文章《Java_sdk安装》和《zookeeper安装》。\n\n### 1.本地安装\n\n#### 1.1.解压安装\n\n本地安装，适用于本地开发调试使用。自动化安装脚本如下：\n\n```shell\n#!/bin/bash\n# kafka下载地址\nkafka_addr=\"\"\n\n# kafka的安装路径\nkafka_home=\"/test/kafka\"\n\n\n# 创建安装目录\nmkdir -p $kafka_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'create file failed!'\n    exit 1\nfi\n\n# 下载安装包\nwget $kafka_addr\nif [ \"$?\" != \"0\" ]; then\n    echo 'download failed!'\n    exit 1\nfi\n\n# 解压安装包\nname=$(ls | grep zookeeper)\ntar -zxvf $name -C $kafka_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\necho 'install successful!'\n```\n\n#### 1.2.调整配置\n\n进入conf目录下确认server.properties配置是否符合预期，常见的配置项如下：\n\n```bash\n# kafka server配置 kafka最为重要三个配置依次为：broker.id、log.dir、zookeeper.connect\n \n# 每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况\nbroker.id=0\n \n# broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置\nhost.name=10.0.0.1\n \n# broker server服务端口\nport =9092\n \n# broker处理消息的最大线程数，一般情况下数量为cpu核数\nnum.network.threads=4\n \n# broker处理磁盘IO的线程数，数值为cpu核数2倍\nnum.io.threads=8\n \n# socket的发送缓冲区，socket的调优参数SO_SENDBUFF\nsocket.send.buffer.bytes=1048576\n \n# socket的接受缓冲区，socket的调优参数SO_RECVBUFF\nsocket.receive.buffer.bytes=1048576\n \n# socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖\nsocket.request.max.bytes=104857600\n \n# 每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖\nnum.partitions=2\n \n# 数据文件保留多长时间， 存储的最大时间超过这个时间会根据log.cleanup.policy设置数据清除策略，log.retention.bytes和log.retention.minutes或log.retention.hours任意一个达到要求，都会执行删除\n# 有2删除数据文件方式： 按照文件大小删除：log.retention.bytes  按照2中不同时间粒度删除：分别为分钟，小时\nlog.retention.hours=168\n \n# topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖\nlog.segment.bytes=536870912\n \n# 文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略\nlog.retention.check.interval.ms=60000\n \n# 是否开启日志清理\nlog.cleaner.enable=false\n \n# zookeeper集群的地址，可以是多个，多个之间用逗号分割 hostname1:port1,hostname2:port2,hostname3:port3\nzookeeper.connect=10.0.0.1:2181\n \n# ZooKeeper的连接超时时间\nzookeeper.connection.timeout.ms=60000\n \n# ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不应过大\nzookeeper.session.timeout.ms=6000\n \n# ZooKeeper集群中leader和follower之间的同步时间\nzookeeper.sync.time.ms =2000\n \n# kafka数据的存放地址，多个地址的话用逗号分割,多个目录分布在不同磁盘上可以提高读写性能  /data/kafka-logs-1，/data/kafka-logs-2\nlog.dirs=/tmp/kafka.log\n\n```\n\n#### 1.3.启停服务\n\n进入bin目录\n\n```bash\n# 启动服务\n./kafka-server-start.sh -daemon ../config/server.properties\n\n# 停止服务\n./kafka-server-stop.sh\n```\n\n#### 1.4.验证功能\n\n```bash\n# 创建并验证主题\n./kafka-topics.sh --create --partitions 1 --replication-factor 1 --topic test --bootstrap-server localhost:9092\n\n# 查看主题\n./kafka-topics.sh --list --bootstrap-server localhost:9092\n\n# 向测试主题上发布消息\n./kafka-console-producer.sh --topic test --bootstrap-server localhost:9092\n\n# 从测试主题上读取消息\n./kafka-console-consumer.sh --topic test --from-beginning --bootstrap-server localhost:9092\n```\n\n\n\n","slug":"31.Kafka安装","published":1,"updated":"2024-01-09T07:13:36.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1ev004p0cfv7qck5sxw","content":"<h2 id=\"Kafka安装\"><a href=\"#Kafka安装\" class=\"headerlink\" title=\"Kafka安装\"></a>Kafka安装</h2><p>Kafka安装需要有Java和zookeeper环境，如何配置可参考本站文章《Java_sdk安装》和《zookeeper安装》。</p>\n<h3 id=\"1-本地安装\"><a href=\"#1-本地安装\" class=\"headerlink\" title=\"1.本地安装\"></a>1.本地安装</h3><h4 id=\"1-1-解压安装\"><a href=\"#1-1-解压安装\" class=\"headerlink\" title=\"1.1.解压安装\"></a>1.1.解压安装</h4><p>本地安装，适用于本地开发调试使用。自动化安装脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka下载地址</span></span><br><span class=\"line\">kafka_addr=&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka的安装路径</span></span><br><span class=\"line\">kafka_home=&quot;/test/kafka&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建安装目录</span></span><br><span class=\"line\">mkdir -p $kafka_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;create file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装包</span></span><br><span class=\"line\">wget $kafka_addr</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;download failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压安装包</span></span><br><span class=\"line\">name=$(ls | grep zookeeper)</span><br><span class=\"line\">tar -zxvf $name -C $kafka_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;install successful!&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-调整配置\"><a href=\"#1-2-调整配置\" class=\"headerlink\" title=\"1.2.调整配置\"></a>1.2.调整配置</h4><p>进入conf目录下确认server.properties配置是否符合预期，常见的配置项如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka server配置 kafka最为重要三个配置依次为：broker.id、log.dir、zookeeper.connect</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况</span></span><br><span class=\"line\">broker.id=0</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置</span></span><br><span class=\"line\">host.name=10.0.0.1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker server服务端口</span></span><br><span class=\"line\">port =9092</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker处理消息的最大线程数，一般情况下数量为cpu核数</span></span><br><span class=\"line\">num.network.threads=4</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker处理磁盘IO的线程数，数值为cpu核数2倍</span></span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># socket的发送缓冲区，socket的调优参数SO_SENDBUFF</span></span><br><span class=\"line\">socket.send.buffer.bytes=1048576</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># socket的接受缓冲区，socket的调优参数SO_RECVBUFF</span></span><br><span class=\"line\">socket.receive.buffer.bytes=1048576</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖</span></span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖</span></span><br><span class=\"line\">num.partitions=2</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据文件保留多长时间， 存储的最大时间超过这个时间会根据log.cleanup.policy设置数据清除策略，log.retention.bytes和log.retention.minutes或log.retention.hours任意一个达到要求，都会执行删除</span></span><br><span class=\"line\"><span class=\"comment\"># 有2删除数据文件方式： 按照文件大小删除：log.retention.bytes  按照2中不同时间粒度删除：分别为分钟，小时</span></span><br><span class=\"line\">log.retention.hours=168</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖</span></span><br><span class=\"line\">log.segment.bytes=536870912</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略</span></span><br><span class=\"line\">log.retention.check.interval.ms=60000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 是否开启日志清理</span></span><br><span class=\"line\">log.cleaner.enable=<span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># zookeeper集群的地址，可以是多个，多个之间用逗号分割 hostname1:port1,hostname2:port2,hostname3:port3</span></span><br><span class=\"line\">zookeeper.connect=10.0.0.1:2181</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ZooKeeper的连接超时时间</span></span><br><span class=\"line\">zookeeper.connection.timeout.ms=60000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不应过大</span></span><br><span class=\"line\">zookeeper.session.timeout.ms=6000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ZooKeeper集群中leader和follower之间的同步时间</span></span><br><span class=\"line\">zookeeper.sync.time.ms =2000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># kafka数据的存放地址，多个地址的话用逗号分割,多个目录分布在不同磁盘上可以提高读写性能  /data/kafka-logs-1，/data/kafka-logs-2</span></span><br><span class=\"line\">log.dirs=/tmp/kafka.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-启停服务\"><a href=\"#1-3-启停服务\" class=\"headerlink\" title=\"1.3.启停服务\"></a>1.3.启停服务</h4><p>进入bin目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">./kafka-server-start.sh -daemon ../config/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">./kafka-server-stop.sh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-验证功能\"><a href=\"#1-4-验证功能\" class=\"headerlink\" title=\"1.4.验证功能\"></a>1.4.验证功能</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建并验证主题</span></span><br><span class=\"line\">./kafka-topics.sh --create --partitions 1 --replication-factor 1 --topic <span class=\"built_in\">test</span> --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看主题</span></span><br><span class=\"line\">./kafka-topics.sh --list --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 向测试主题上发布消息</span></span><br><span class=\"line\">./kafka-console-producer.sh --topic <span class=\"built_in\">test</span> --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从测试主题上读取消息</span></span><br><span class=\"line\">./kafka-console-consumer.sh --topic <span class=\"built_in\">test</span> --from-beginning --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"cover":"/img/cover09.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"Kafka安装\"><a href=\"#Kafka安装\" class=\"headerlink\" title=\"Kafka安装\"></a>Kafka安装</h2><p>Kafka安装需要有Java和zookeeper环境，如何配置可参考本站文章《Java_sdk安装》和《zookeeper安装》。</p>\n<h3 id=\"1-本地安装\"><a href=\"#1-本地安装\" class=\"headerlink\" title=\"1.本地安装\"></a>1.本地安装</h3><h4 id=\"1-1-解压安装\"><a href=\"#1-1-解压安装\" class=\"headerlink\" title=\"1.1.解压安装\"></a>1.1.解压安装</h4><p>本地安装，适用于本地开发调试使用。自动化安装脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka下载地址</span></span><br><span class=\"line\">kafka_addr=&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kafka的安装路径</span></span><br><span class=\"line\">kafka_home=&quot;/test/kafka&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建安装目录</span></span><br><span class=\"line\">mkdir -p $kafka_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;create file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装包</span></span><br><span class=\"line\">wget $kafka_addr</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;download failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压安装包</span></span><br><span class=\"line\">name=$(ls | grep zookeeper)</span><br><span class=\"line\">tar -zxvf $name -C $kafka_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;install successful!&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-调整配置\"><a href=\"#1-2-调整配置\" class=\"headerlink\" title=\"1.2.调整配置\"></a>1.2.调整配置</h4><p>进入conf目录下确认server.properties配置是否符合预期，常见的配置项如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka server配置 kafka最为重要三个配置依次为：broker.id、log.dir、zookeeper.connect</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况</span></span><br><span class=\"line\">broker.id=0</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不设置</span></span><br><span class=\"line\">host.name=10.0.0.1</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker server服务端口</span></span><br><span class=\"line\">port =9092</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker处理消息的最大线程数，一般情况下数量为cpu核数</span></span><br><span class=\"line\">num.network.threads=4</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># broker处理磁盘IO的线程数，数值为cpu核数2倍</span></span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># socket的发送缓冲区，socket的调优参数SO_SENDBUFF</span></span><br><span class=\"line\">socket.send.buffer.bytes=1048576</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># socket的接受缓冲区，socket的调优参数SO_RECVBUFF</span></span><br><span class=\"line\">socket.receive.buffer.bytes=1048576</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖</span></span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖</span></span><br><span class=\"line\">num.partitions=2</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 数据文件保留多长时间， 存储的最大时间超过这个时间会根据log.cleanup.policy设置数据清除策略，log.retention.bytes和log.retention.minutes或log.retention.hours任意一个达到要求，都会执行删除</span></span><br><span class=\"line\"><span class=\"comment\"># 有2删除数据文件方式： 按照文件大小删除：log.retention.bytes  按照2中不同时间粒度删除：分别为分钟，小时</span></span><br><span class=\"line\">log.retention.hours=168</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖</span></span><br><span class=\"line\">log.segment.bytes=536870912</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略</span></span><br><span class=\"line\">log.retention.check.interval.ms=60000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 是否开启日志清理</span></span><br><span class=\"line\">log.cleaner.enable=<span class=\"literal\">false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># zookeeper集群的地址，可以是多个，多个之间用逗号分割 hostname1:port1,hostname2:port2,hostname3:port3</span></span><br><span class=\"line\">zookeeper.connect=10.0.0.1:2181</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ZooKeeper的连接超时时间</span></span><br><span class=\"line\">zookeeper.connection.timeout.ms=60000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不应过大</span></span><br><span class=\"line\">zookeeper.session.timeout.ms=6000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># ZooKeeper集群中leader和follower之间的同步时间</span></span><br><span class=\"line\">zookeeper.sync.time.ms =2000</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># kafka数据的存放地址，多个地址的话用逗号分割,多个目录分布在不同磁盘上可以提高读写性能  /data/kafka-logs-1，/data/kafka-logs-2</span></span><br><span class=\"line\">log.dirs=/tmp/kafka.log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-启停服务\"><a href=\"#1-3-启停服务\" class=\"headerlink\" title=\"1.3.启停服务\"></a>1.3.启停服务</h4><p>进入bin目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">./kafka-server-start.sh -daemon ../config/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">./kafka-server-stop.sh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-验证功能\"><a href=\"#1-4-验证功能\" class=\"headerlink\" title=\"1.4.验证功能\"></a>1.4.验证功能</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建并验证主题</span></span><br><span class=\"line\">./kafka-topics.sh --create --partitions 1 --replication-factor 1 --topic <span class=\"built_in\">test</span> --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看主题</span></span><br><span class=\"line\">./kafka-topics.sh --list --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 向测试主题上发布消息</span></span><br><span class=\"line\">./kafka-console-producer.sh --topic <span class=\"built_in\">test</span> --bootstrap-server localhost:9092</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从测试主题上读取消息</span></span><br><span class=\"line\">./kafka-console-consumer.sh --topic <span class=\"built_in\">test</span> --from-beginning --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"zookeeper安装","type":"tags","date":"2024-01-08T13:09:06.000Z","_content":"\n## zookeeper安装\n\nzookeeper安装需要有Java环境，如何配置可参考本站文章《Java_sdk安装》。\n\n### 1.本地安装\n\n#### 1.1.解压安装\n\n本地安装，适用于本地开发调试使用。自动化安装脚本如下：\n\n```shell\n#!/bin/bash\n# zookeeper下载地址\nzk_addr=\"https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz\"\n\n# zookeeper的安装路径\nzk_home=\"/test/zk\"\n\n\n# 创建安装目录\nmkdir -p $zk_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'create file failed!'\n    exit 1\nfi\n\n# 下载安装包\nwget $zk_addr\nif [ \"$?\" != \"0\" ]; then\n    echo 'download failed!'\n    exit 1\nfi\n\n# 解压安装包\nname=$(ls | grep zookeeper)\ntar -zxvf $name -C $zk_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\necho 'install successful!'\n```\n\n#### 1.2.修改配置\n\n在zookeeper的conf目录下新增配置文件zoo.cfg\n\n```bash\n# The number of milliseconds of each tick\n# 通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒。\ntickTime=2000\n\n# The number of ticks that the initial \n# synchronization phase can take\n# LF初始通信时限。\n# Leader和Follower初始连接时能容忍的最多心跳数，单位次（即tickTime的数量）。\ninitLimit=10\n\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\n# LF同步通信时限。\n# Leader和Follower连接之后，通信时能容忍的最多心跳数，单位次。\n# 时间如果超过syncLimit * tickTime，Leader认为Follwer挂掉，从服务器列表中删除Follwer。\nsyncLimit=5\n\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\n# 保存Zookeeper中的数据的目录。\ndataDir=/test/zk/data\n\n# the port at which the clients will connect\n# 客户端连接端口，通常不做修改。\nclientPort=2181\n```\n\n#### 1.3.启停服务\n\n在zookeeper的bin目录下\n\n```bash\n# 启动服务\n./zkServer.sh start\n\n# 查看服务状态\n./zkServer.sh status\n\n# 停止服务\n./zkServer.sh stop\n\n# 启动客户端\n./zkCli.sh\n```\n\n\n\n\n\n","source":"_posts/33.zookeeper安装.md","raw":"---\ntitle: zookeeper安装\ntype: tags\ncategories:\n  - 实践\ndate: 2024-01-08 21:09:06\ntags:\n- zookeeper\n---\n\n## zookeeper安装\n\nzookeeper安装需要有Java环境，如何配置可参考本站文章《Java_sdk安装》。\n\n### 1.本地安装\n\n#### 1.1.解压安装\n\n本地安装，适用于本地开发调试使用。自动化安装脚本如下：\n\n```shell\n#!/bin/bash\n# zookeeper下载地址\nzk_addr=\"https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz\"\n\n# zookeeper的安装路径\nzk_home=\"/test/zk\"\n\n\n# 创建安装目录\nmkdir -p $zk_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'create file failed!'\n    exit 1\nfi\n\n# 下载安装包\nwget $zk_addr\nif [ \"$?\" != \"0\" ]; then\n    echo 'download failed!'\n    exit 1\nfi\n\n# 解压安装包\nname=$(ls | grep zookeeper)\ntar -zxvf $name -C $zk_home\nif [ \"$?\" != \"0\" ]; then\n    echo 'decompression file failed!'\n    exit 1\nfi\n\necho 'install successful!'\n```\n\n#### 1.2.修改配置\n\n在zookeeper的conf目录下新增配置文件zoo.cfg\n\n```bash\n# The number of milliseconds of each tick\n# 通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒。\ntickTime=2000\n\n# The number of ticks that the initial \n# synchronization phase can take\n# LF初始通信时限。\n# Leader和Follower初始连接时能容忍的最多心跳数，单位次（即tickTime的数量）。\ninitLimit=10\n\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\n# LF同步通信时限。\n# Leader和Follower连接之后，通信时能容忍的最多心跳数，单位次。\n# 时间如果超过syncLimit * tickTime，Leader认为Follwer挂掉，从服务器列表中删除Follwer。\nsyncLimit=5\n\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\n# 保存Zookeeper中的数据的目录。\ndataDir=/test/zk/data\n\n# the port at which the clients will connect\n# 客户端连接端口，通常不做修改。\nclientPort=2181\n```\n\n#### 1.3.启停服务\n\n在zookeeper的bin目录下\n\n```bash\n# 启动服务\n./zkServer.sh start\n\n# 查看服务状态\n./zkServer.sh status\n\n# 停止服务\n./zkServer.sh stop\n\n# 启动客户端\n./zkCli.sh\n```\n\n\n\n\n\n","slug":"33.zookeeper安装","published":1,"updated":"2024-01-08T14:21:44.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1ew004r0cfveo6h8ohr","content":"<h2 id=\"zookeeper安装\"><a href=\"#zookeeper安装\" class=\"headerlink\" title=\"zookeeper安装\"></a>zookeeper安装</h2><p>zookeeper安装需要有Java环境，如何配置可参考本站文章《Java_sdk安装》。</p>\n<h3 id=\"1-本地安装\"><a href=\"#1-本地安装\" class=\"headerlink\" title=\"1.本地安装\"></a>1.本地安装</h3><h4 id=\"1-1-解压安装\"><a href=\"#1-1-解压安装\" class=\"headerlink\" title=\"1.1.解压安装\"></a>1.1.解压安装</h4><p>本地安装，适用于本地开发调试使用。自动化安装脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zookeeper下载地址</span></span><br><span class=\"line\">zk_addr=&quot;https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zookeeper的安装路径</span></span><br><span class=\"line\">zk_home=&quot;/test/zk&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建安装目录</span></span><br><span class=\"line\">mkdir -p $zk_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;create file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装包</span></span><br><span class=\"line\">wget $zk_addr</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;download failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压安装包</span></span><br><span class=\"line\">name=$(ls | grep zookeeper)</span><br><span class=\"line\">tar -zxvf $name -C $zk_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;install successful!&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-修改配置\"><a href=\"#1-2-修改配置\" class=\"headerlink\" title=\"1.2.修改配置\"></a>1.2.修改配置</h4><p>在zookeeper的conf目录下新增配置文件zoo.cfg</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The number of milliseconds of each tick</span></span><br><span class=\"line\"><span class=\"comment\"># 通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒。</span></span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that the initial </span></span><br><span class=\"line\"><span class=\"comment\"># synchronization phase can take</span></span><br><span class=\"line\"><span class=\"comment\"># LF初始通信时限。</span></span><br><span class=\"line\"><span class=\"comment\"># Leader和Follower初始连接时能容忍的最多心跳数，单位次（即tickTime的数量）。</span></span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that can pass between </span></span><br><span class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement</span></span><br><span class=\"line\"><span class=\"comment\"># LF同步通信时限。</span></span><br><span class=\"line\"><span class=\"comment\"># Leader和Follower连接之后，通信时能容忍的最多心跳数，单位次。</span></span><br><span class=\"line\"><span class=\"comment\"># 时间如果超过syncLimit * tickTime，Leader认为Follwer挂掉，从服务器列表中删除Follwer。</span></span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.</span></span><br><span class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just </span></span><br><span class=\"line\"><span class=\"comment\"># example sakes.</span></span><br><span class=\"line\"><span class=\"comment\"># 保存Zookeeper中的数据的目录。</span></span><br><span class=\"line\">dataDir=/test/zk/data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the port at which the clients will connect</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端连接端口，通常不做修改。</span></span><br><span class=\"line\">clientPort=2181</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-启停服务\"><a href=\"#1-3-启停服务\" class=\"headerlink\" title=\"1.3.启停服务\"></a>1.3.启停服务</h4><p>在zookeeper的bin目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">./zkServer.sh start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\">./zkServer.sh status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">./zkServer.sh stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动客户端</span></span><br><span class=\"line\">./zkCli.sh</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"cover":"/img/cover05.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"zookeeper安装\"><a href=\"#zookeeper安装\" class=\"headerlink\" title=\"zookeeper安装\"></a>zookeeper安装</h2><p>zookeeper安装需要有Java环境，如何配置可参考本站文章《Java_sdk安装》。</p>\n<h3 id=\"1-本地安装\"><a href=\"#1-本地安装\" class=\"headerlink\" title=\"1.本地安装\"></a>1.本地安装</h3><h4 id=\"1-1-解压安装\"><a href=\"#1-1-解压安装\" class=\"headerlink\" title=\"1.1.解压安装\"></a>1.1.解压安装</h4><p>本地安装，适用于本地开发调试使用。自动化安装脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zookeeper下载地址</span></span><br><span class=\"line\">zk_addr=&quot;https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zookeeper的安装路径</span></span><br><span class=\"line\">zk_home=&quot;/test/zk&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建安装目录</span></span><br><span class=\"line\">mkdir -p $zk_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;create file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载安装包</span></span><br><span class=\"line\">wget $zk_addr</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;download failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解压安装包</span></span><br><span class=\"line\">name=$(ls | grep zookeeper)</span><br><span class=\"line\">tar -zxvf $name -C $zk_home</span><br><span class=\"line\">if [ &quot;$?&quot; != &quot;0&quot; ]; then</span><br><span class=\"line\">    echo &#x27;decompression file failed!&#x27;</span><br><span class=\"line\">    exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#x27;install successful!&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-修改配置\"><a href=\"#1-2-修改配置\" class=\"headerlink\" title=\"1.2.修改配置\"></a>1.2.修改配置</h4><p>在zookeeper的conf目录下新增配置文件zoo.cfg</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># The number of milliseconds of each tick</span></span><br><span class=\"line\"><span class=\"comment\"># 通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒。</span></span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that the initial </span></span><br><span class=\"line\"><span class=\"comment\"># synchronization phase can take</span></span><br><span class=\"line\"><span class=\"comment\"># LF初始通信时限。</span></span><br><span class=\"line\"><span class=\"comment\"># Leader和Follower初始连接时能容忍的最多心跳数，单位次（即tickTime的数量）。</span></span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The number of ticks that can pass between </span></span><br><span class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement</span></span><br><span class=\"line\"><span class=\"comment\"># LF同步通信时限。</span></span><br><span class=\"line\"><span class=\"comment\"># Leader和Follower连接之后，通信时能容忍的最多心跳数，单位次。</span></span><br><span class=\"line\"><span class=\"comment\"># 时间如果超过syncLimit * tickTime，Leader认为Follwer挂掉，从服务器列表中删除Follwer。</span></span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.</span></span><br><span class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just </span></span><br><span class=\"line\"><span class=\"comment\"># example sakes.</span></span><br><span class=\"line\"><span class=\"comment\"># 保存Zookeeper中的数据的目录。</span></span><br><span class=\"line\">dataDir=/test/zk/data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the port at which the clients will connect</span></span><br><span class=\"line\"><span class=\"comment\"># 客户端连接端口，通常不做修改。</span></span><br><span class=\"line\">clientPort=2181</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-3-启停服务\"><a href=\"#1-3-启停服务\" class=\"headerlink\" title=\"1.3.启停服务\"></a>1.3.启停服务</h4><p>在zookeeper的bin目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">./zkServer.sh start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务状态</span></span><br><span class=\"line\">./zkServer.sh status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">./zkServer.sh stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动客户端</span></span><br><span class=\"line\">./zkCli.sh</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"dd大牛的《背包九讲》","date":"2023-02-25T13:47:59.000Z","type":"tags","_content":"\n# dd大牛的《背包九讲》\n\n## 1.01背包问题\n\n### 1.1.题目\n\n有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 1.2.基本思路\n\n这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。\n\n用子问题定义状态：即`f[i][v]`表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：\n\n`f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}`。\n\n<!--more-->\n\n这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为`v-c[i]`的背包中”，此时能获得的最大价值就是`f [i-1][v-c[i]]`再加上通过放入第i件物品获得的价值w[i]。\n\n注意`f[i][v]`有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是`f[N] [V]`，而是`f[N][0..V]`的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项`f[i][v-1]`，这样就可以保证f[N] [V]就是最后的答案。至于为什么这样就可以，由你自己来体会了。\n\n### 1.3.优化空间复杂度\n\n以上方法的时间和空间复杂度均为O(N*V)，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到O(V)。\n\n先考虑上面讲的基本思路如何实现，肯定是有一个主循环i=1..N，每次算出来二维数组`f[i][0..V]`的所有值。那么，如果只用一个数组f [0..V]，能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态`f[i][v]`呢？`f[i][v]`是由`f[i-1][v]`和f[i-1] [v-c[i]]两个子问题递推而来，能否保证在推`f[i][v]`时（也即在第i次主循环中推f[v]时）能够得到`f[i-1][v]`和`f[i-1][v -c[i]]`的值呢？事实上，这要求在每次主循环中我们以v=V..0的顺序推f[v]，这样才能保证推f[v]时f[v-c[i]]保存的是状态`f[i -1][v-c[i]]`的值。伪代码如下：\n\n```go\nfor i=1..N\nfor v=V..0\nf[v]=max{f[v],f[v-c[i]]+w[i]};\n```\n\n其中的f[v]=max{f[v],f[v-c[i]]}一句恰就相当于我们的转移方程`f[i][v]=max{f[i-1][v],f[i- 1][v-c[i]]}`，因为现在的f[v-c[i]]就相当于原来的`f[i-1][v-c[i]]`。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了`f[i][v]`由`f[i][v-c[i]]`推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。\n\n### 1.4.总结\n\n01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。\n\n## 2. 完全背包问题\n\n### 2.1.题目\n\n有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 2.2.基本思路\n\n这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令`f[i][v]`表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：`f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<= v}`。这跟01背包问题一样有`O(N*V)`个状态需要求解，但求解每个状态的时间则不是常数了，求解状态`f[i][v]`的时间是O(v/c[i])，总的复杂度是超过`O(VN)`的。\n\n将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。\n\n### 2.3.一个简单有效的优化\n\n完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足`c[i]<=c[j]`且`w[i]>=w[j]`，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得j换成物美价廉的i，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。\n\n转化为01背包问题求解\n既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选`V/c [i]`件，于是可以把第i种物品转化为`V/c[i]`件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。\n\n更高效的转化方法是：把第i种物品拆成费用为`c[i]*2^k`、价值为`w[i]*2^k`的若干件物品，其中k满足`c[i]*2^k<V`。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个`2^k`件物品的和。这样把每种物品拆成`O(log(V/c[i]))`件物品，是一个很大的改进。但我们有更优的`O(VN)`的算法。` * O(VN)`的算法这个算法使用一维数组，先看伪代码：\n\n```go\nfor i=1..N \nfor v=0..V \nf[v]=max{f[v],f[v-c[i]]+w[i]};\n```\n\n你会发现，这个伪代码与01背包问题的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么01背包问题中要按照v=V..0的逆序来循环。这是因为要保证第i次循环中的状态`f[i][v]`是由状态`f[i-1][v-c[i]]`递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果`f[i-1][v-c[i]]`。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果`f[i][v-c[i]]`，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的道理。\n\n这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：`f[i][v]=max{f[i-1][v],f[i][v-c[i]]+w[i]}`，将这个方程用一维数组实现，便得到了上面的伪代码。\n\n### 2.4.总结\n\n完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“`O(VN)`的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。\n\n## 3.多重背包问题\n\n### 3.1.题目\n\n有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 3.2.基本算法\n\n这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取 n[i]件。令`f[i][v]`表示前i种物品恰放入一个容量为v的背包的最大权值，则：`f[i][v]=max{f[i-1][v-k*c[i]]+ k*w[i]|0<=k<=n[i]}`。复杂度是`O(V*∑n[i])`。\n\n转化为01背包问题\n另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为`∑n[i]`的01背包问题，直接求解，复杂度仍然是`O(V*∑n[i])`。\n\n但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取0..n[i]件——均能等价于取若干件代换以后的物品。另外，取超过n[i]件的策略必不能出现。\n\n方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 `1,2,4,...,2^(k-1)`,`n[i]-2^k+1`，且k是满足`n[i]-2^k+1>0`的最大整数。例如，如果n[i]为13，就将这种物品分成系数分别为1,2,4,6的四件物品。\n\n分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于`0..n[i]`间的每一个整数，均可以用若干个系数的和表示，这个证明可以分`0..2^k-1`和`2^k..n[i]`两段来分别讨论得出，并不难，希望你自己思考尝试一下。\n\n这样就将第i种物品分成了`O(log n[i])`种物品，将原问题转化为了复杂度为`O(V*∑log n[i])`的01背包问题，是很大的改进。\n\n### 3.3.`O(VN)`的算法\n\n多重背包问题同样有`O(VN)`的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了`NOIP`的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。\n\n### 3.4.小结\n\n这里我们看到了将一个算法的复杂度由`O(V*∑n[i])`改进到`O(V*∑log n[i])`的过程，还知道了存在应用超出`NOIP`范围的知识的`O(VN)`算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。\n\n## 4.混合三种背包问题\n\n### 4.1.问题\n\n如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？\n\n### 4.2.01背包与完全背包的混合\n\n考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是`O(VN)`。伪代码如下：\n\n```go\n\nfor i=1..N\nif 第i件物品是01背包\nfor v=V..0\nf[v]=max{f[v],f[v-c[i]]+w[i]};\nelse if 第i件物品是完全背包\nfor v=0..V\nf[v]=max{f[v],f[v-c[i]]+w[i]};\n```\n\n### 4.3.再加上多重背包\n\n如果再加上有的物品最多可以取有限次，那么原则上也可以给出`O(VN)`的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成O(log n[i])个01背包的物品的方法也已经很优了。\n\n### 4.4.小结\n\n有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。\n\n## 5.二维费用的背包问题\n\n### 5.1.问题\n\n二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。\n\n### 5.2.算法\n\n费用加了一维，只需状态也加一维即可。设`f[i][v][u]`表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是：`f [i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}`。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用顺序的循环，当物品有如完全背包问题时采用逆序的循环。当物品有如多重背包问题时拆分物品。\n\n### 5.3.物品总个数的限制\n\n有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设`f[v][m]`表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在`f[0..V`][0..M]范围内寻找答案。\n\n另外，如果要求“恰取M件物品”，则在`f[0..V][M]`范围内寻找答案。\n\n### 5.4.小结\n\n事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。\n\n## 6.分组的背包问题\n\n### 6.1.问题\n\n有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 6.2.算法\n\n这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设`f[k`][v]表示前k组物品花费费用v能取得的最大权值，则有`f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]|`物品i属于第k组}。\n\n使用一维数组的伪代码如下：\n\n```go\nfor 所有的组k\nfor 所有的i属于组k\nfor v=V..0\nf[v]=max{f[v],f[v-c[i]]+w[i]}\n```\n\n\n\n另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。\n\n### 6.3.小结\n\n分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。 \n\n## 7.有依赖的背包问题\n\n### 7.1.简化的问题\n\n这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。\n\n### 7.2.算法\n\n这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。\n\n按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有n个附件，则策略有2^n+1个，为指数级。）\n\n考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。\n\n再考虑P06中的一句话：可以对每组中的物品应用P02中“一个简单有效的优化”。这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为0..V-c[i]所有这些值时相应的最大价值f'[0..V-c[i]]。那么这个主件及它的附件集合相当于V-c[i]+1个物品的物品组，其中费用为c[i]+k的物品的价值为f'[k]+w[i]。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为 V-c[i]+1个物品的物品组，就可以直接应用P06的算法解决问题了。\n\n### 7.3.更一般的问题\n\n更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。\n\n解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01 背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。\n\n事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。\n\n### 7.4.小结\n\nNOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。\n\n我想说：失败不是什么丢人的事情，从失败中全无收获才是。\n\n## 8.泛化物品\n\n### 8.1.定义\n\n考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。\n\n更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。\n\n这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0..V]，给它费用v，可得到价值h[V]。\n\n一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c*w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有h(v)=v/c*w仅当v被c整除且v/c<=n，其它情况函数值均为0。\n\n一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则h(v)=0，否则h(v)为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。\n\n### 8.2.泛化物品的和\n\n如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即`f(v)=max{h(k) +l(v-k)|0<=k<=v}`。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和 l决定的泛化物品。\n\n由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足`f(v)=max{h(k)+l(v-k)|0<=k<=v}`，则称f是h与l的和，即f=h+l。这个运算的时间复杂度是O(V^2)。\n\n泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。\n\n### 8.3.背包问题的泛化物品\n\n一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。\n\n综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。\n\n### 8.4.小结\n\n本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 Scheme 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。\n\n我想说：“思考”是一个`OIer`最重要的品质。简单的问题，深入思考以后，也能发现更多。\n\n## 9.背包问题问法的变化\n\n以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。\n\n例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。\n\n还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。\n\n下面说一些变化更大的问法。\n\n### 9.1.输出方案\n\n一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。\n\n还是以01背包为例，方程为`f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}`。再用一个数组g[i] [v]，设`g[i][v]=0`表示推出`f[i`][v]的值时是采用了方程的前一项（也即`f[i][v]=f[i-1][v]`），`g[i][v]`表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为`f[N`][V]）：\n\n```go\ni=N\nv=V\nwhile(i>0)\nif(g[i][v]==0)\nprint \"未选第i项物品\"\nelse if(g[i][v]==1)\nprint \"选了第i项物品\"\nv=v-c[i]\n```\n\n另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的`g[i] [v]==0`改成`f[i][v]==f[i-1][v]`，`g[i][v]==1`改成`f[i][v]==f[i-1][v-c[i]]+w[i]`也可。\n\n### 9.2.输出字典序最小的最优方案\n\n这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。\n\n一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。\n\n在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果`f[i][v]==f[i-v]`及`f[i][v]==f[i-1][f-c[i]]+w[i]`同时成立，应该按照后者（即选择了物品i）来输出方案。\n\n求方案总数\n对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。\n\n对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是01背包中的物品，转移方程即为`f[i][v]=sum{f[i-1][v],f[i-1][v-c[i]]+w[i]}`，初始条件`f[0][0]=1`。\n\n事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。\n\n### 9.3.最优方案的总数\n\n这里的最优方案是指物品总价值最大的方案。还是以01背包为例。\n\n结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：\n\n```go\nfor i=1..N\nfor v=0..V\nf[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}\ng[i][v]=0\nif(f[i][v]==f[i-1][v])\ninc(g[i][v],g[i-1][v]\nif(f[i][v]==f[i-1][v-c[i]]+w[i])\ninc(g[i][v],g[i-1][v-c[i]])\n```\n\n如果你是第一次看到这样的问题，请仔细体会上面的伪代码。\n\n### 9.4.小结\n\n显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。\n\n触类旁通、举一反三，应该也是一个OIer应有的品质吧。\n","source":"_posts/7.dd大牛的《背包九讲》.md","raw":"---\ntitle: dd大牛的《背包九讲》\ndate: 2023-02-25 21:47:59\ntags:\n- 背包九讲\n- 算法\ncategories:\n- 学习笔记\ntype: \"tags\"\n---\n\n# dd大牛的《背包九讲》\n\n## 1.01背包问题\n\n### 1.1.题目\n\n有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 1.2.基本思路\n\n这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。\n\n用子问题定义状态：即`f[i][v]`表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：\n\n`f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}`。\n\n<!--more-->\n\n这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为`v-c[i]`的背包中”，此时能获得的最大价值就是`f [i-1][v-c[i]]`再加上通过放入第i件物品获得的价值w[i]。\n\n注意`f[i][v]`有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是`f[N] [V]`，而是`f[N][0..V]`的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项`f[i][v-1]`，这样就可以保证f[N] [V]就是最后的答案。至于为什么这样就可以，由你自己来体会了。\n\n### 1.3.优化空间复杂度\n\n以上方法的时间和空间复杂度均为O(N*V)，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到O(V)。\n\n先考虑上面讲的基本思路如何实现，肯定是有一个主循环i=1..N，每次算出来二维数组`f[i][0..V]`的所有值。那么，如果只用一个数组f [0..V]，能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态`f[i][v]`呢？`f[i][v]`是由`f[i-1][v]`和f[i-1] [v-c[i]]两个子问题递推而来，能否保证在推`f[i][v]`时（也即在第i次主循环中推f[v]时）能够得到`f[i-1][v]`和`f[i-1][v -c[i]]`的值呢？事实上，这要求在每次主循环中我们以v=V..0的顺序推f[v]，这样才能保证推f[v]时f[v-c[i]]保存的是状态`f[i -1][v-c[i]]`的值。伪代码如下：\n\n```go\nfor i=1..N\nfor v=V..0\nf[v]=max{f[v],f[v-c[i]]+w[i]};\n```\n\n其中的f[v]=max{f[v],f[v-c[i]]}一句恰就相当于我们的转移方程`f[i][v]=max{f[i-1][v],f[i- 1][v-c[i]]}`，因为现在的f[v-c[i]]就相当于原来的`f[i-1][v-c[i]]`。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了`f[i][v]`由`f[i][v-c[i]]`推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。\n\n### 1.4.总结\n\n01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。\n\n## 2. 完全背包问题\n\n### 2.1.题目\n\n有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 2.2.基本思路\n\n这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令`f[i][v]`表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：`f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<= v}`。这跟01背包问题一样有`O(N*V)`个状态需要求解，但求解每个状态的时间则不是常数了，求解状态`f[i][v]`的时间是O(v/c[i])，总的复杂度是超过`O(VN)`的。\n\n将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。\n\n### 2.3.一个简单有效的优化\n\n完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足`c[i]<=c[j]`且`w[i]>=w[j]`，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得j换成物美价廉的i，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。\n\n转化为01背包问题求解\n既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选`V/c [i]`件，于是可以把第i种物品转化为`V/c[i]`件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。\n\n更高效的转化方法是：把第i种物品拆成费用为`c[i]*2^k`、价值为`w[i]*2^k`的若干件物品，其中k满足`c[i]*2^k<V`。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个`2^k`件物品的和。这样把每种物品拆成`O(log(V/c[i]))`件物品，是一个很大的改进。但我们有更优的`O(VN)`的算法。` * O(VN)`的算法这个算法使用一维数组，先看伪代码：\n\n```go\nfor i=1..N \nfor v=0..V \nf[v]=max{f[v],f[v-c[i]]+w[i]};\n```\n\n你会发现，这个伪代码与01背包问题的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么01背包问题中要按照v=V..0的逆序来循环。这是因为要保证第i次循环中的状态`f[i][v]`是由状态`f[i-1][v-c[i]]`递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果`f[i-1][v-c[i]]`。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果`f[i][v-c[i]]`，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的道理。\n\n这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：`f[i][v]=max{f[i-1][v],f[i][v-c[i]]+w[i]}`，将这个方程用一维数组实现，便得到了上面的伪代码。\n\n### 2.4.总结\n\n完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“`O(VN)`的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。\n\n## 3.多重背包问题\n\n### 3.1.题目\n\n有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 3.2.基本算法\n\n这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取 n[i]件。令`f[i][v]`表示前i种物品恰放入一个容量为v的背包的最大权值，则：`f[i][v]=max{f[i-1][v-k*c[i]]+ k*w[i]|0<=k<=n[i]}`。复杂度是`O(V*∑n[i])`。\n\n转化为01背包问题\n另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为`∑n[i]`的01背包问题，直接求解，复杂度仍然是`O(V*∑n[i])`。\n\n但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取0..n[i]件——均能等价于取若干件代换以后的物品。另外，取超过n[i]件的策略必不能出现。\n\n方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 `1,2,4,...,2^(k-1)`,`n[i]-2^k+1`，且k是满足`n[i]-2^k+1>0`的最大整数。例如，如果n[i]为13，就将这种物品分成系数分别为1,2,4,6的四件物品。\n\n分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于`0..n[i]`间的每一个整数，均可以用若干个系数的和表示，这个证明可以分`0..2^k-1`和`2^k..n[i]`两段来分别讨论得出，并不难，希望你自己思考尝试一下。\n\n这样就将第i种物品分成了`O(log n[i])`种物品，将原问题转化为了复杂度为`O(V*∑log n[i])`的01背包问题，是很大的改进。\n\n### 3.3.`O(VN)`的算法\n\n多重背包问题同样有`O(VN)`的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了`NOIP`的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。\n\n### 3.4.小结\n\n这里我们看到了将一个算法的复杂度由`O(V*∑n[i])`改进到`O(V*∑log n[i])`的过程，还知道了存在应用超出`NOIP`范围的知识的`O(VN)`算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。\n\n## 4.混合三种背包问题\n\n### 4.1.问题\n\n如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？\n\n### 4.2.01背包与完全背包的混合\n\n考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是`O(VN)`。伪代码如下：\n\n```go\n\nfor i=1..N\nif 第i件物品是01背包\nfor v=V..0\nf[v]=max{f[v],f[v-c[i]]+w[i]};\nelse if 第i件物品是完全背包\nfor v=0..V\nf[v]=max{f[v],f[v-c[i]]+w[i]};\n```\n\n### 4.3.再加上多重背包\n\n如果再加上有的物品最多可以取有限次，那么原则上也可以给出`O(VN)`的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成O(log n[i])个01背包的物品的方法也已经很优了。\n\n### 4.4.小结\n\n有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。\n\n## 5.二维费用的背包问题\n\n### 5.1.问题\n\n二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。\n\n### 5.2.算法\n\n费用加了一维，只需状态也加一维即可。设`f[i][v][u]`表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是：`f [i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}`。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用顺序的循环，当物品有如完全背包问题时采用逆序的循环。当物品有如多重背包问题时拆分物品。\n\n### 5.3.物品总个数的限制\n\n有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设`f[v][m]`表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在`f[0..V`][0..M]范围内寻找答案。\n\n另外，如果要求“恰取M件物品”，则在`f[0..V][M]`范围内寻找答案。\n\n### 5.4.小结\n\n事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。\n\n## 6.分组的背包问题\n\n### 6.1.问题\n\n有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。\n\n### 6.2.算法\n\n这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设`f[k`][v]表示前k组物品花费费用v能取得的最大权值，则有`f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]|`物品i属于第k组}。\n\n使用一维数组的伪代码如下：\n\n```go\nfor 所有的组k\nfor 所有的i属于组k\nfor v=V..0\nf[v]=max{f[v],f[v-c[i]]+w[i]}\n```\n\n\n\n另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。\n\n### 6.3.小结\n\n分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。 \n\n## 7.有依赖的背包问题\n\n### 7.1.简化的问题\n\n这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。\n\n### 7.2.算法\n\n这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。\n\n按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有n个附件，则策略有2^n+1个，为指数级。）\n\n考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。\n\n再考虑P06中的一句话：可以对每组中的物品应用P02中“一个简单有效的优化”。这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为0..V-c[i]所有这些值时相应的最大价值f'[0..V-c[i]]。那么这个主件及它的附件集合相当于V-c[i]+1个物品的物品组，其中费用为c[i]+k的物品的价值为f'[k]+w[i]。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为 V-c[i]+1个物品的物品组，就可以直接应用P06的算法解决问题了。\n\n### 7.3.更一般的问题\n\n更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。\n\n解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01 背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。\n\n事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。\n\n### 7.4.小结\n\nNOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。\n\n我想说：失败不是什么丢人的事情，从失败中全无收获才是。\n\n## 8.泛化物品\n\n### 8.1.定义\n\n考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。\n\n更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。\n\n这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0..V]，给它费用v，可得到价值h[V]。\n\n一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c*w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有h(v)=v/c*w仅当v被c整除且v/c<=n，其它情况函数值均为0。\n\n一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则h(v)=0，否则h(v)为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。\n\n### 8.2.泛化物品的和\n\n如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即`f(v)=max{h(k) +l(v-k)|0<=k<=v}`。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和 l决定的泛化物品。\n\n由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足`f(v)=max{h(k)+l(v-k)|0<=k<=v}`，则称f是h与l的和，即f=h+l。这个运算的时间复杂度是O(V^2)。\n\n泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。\n\n### 8.3.背包问题的泛化物品\n\n一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。\n\n综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。\n\n### 8.4.小结\n\n本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 Scheme 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。\n\n我想说：“思考”是一个`OIer`最重要的品质。简单的问题，深入思考以后，也能发现更多。\n\n## 9.背包问题问法的变化\n\n以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。\n\n例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。\n\n还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。\n\n下面说一些变化更大的问法。\n\n### 9.1.输出方案\n\n一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。\n\n还是以01背包为例，方程为`f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}`。再用一个数组g[i] [v]，设`g[i][v]=0`表示推出`f[i`][v]的值时是采用了方程的前一项（也即`f[i][v]=f[i-1][v]`），`g[i][v]`表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为`f[N`][V]）：\n\n```go\ni=N\nv=V\nwhile(i>0)\nif(g[i][v]==0)\nprint \"未选第i项物品\"\nelse if(g[i][v]==1)\nprint \"选了第i项物品\"\nv=v-c[i]\n```\n\n另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的`g[i] [v]==0`改成`f[i][v]==f[i-1][v]`，`g[i][v]==1`改成`f[i][v]==f[i-1][v-c[i]]+w[i]`也可。\n\n### 9.2.输出字典序最小的最优方案\n\n这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。\n\n一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。\n\n在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果`f[i][v]==f[i-v]`及`f[i][v]==f[i-1][f-c[i]]+w[i]`同时成立，应该按照后者（即选择了物品i）来输出方案。\n\n求方案总数\n对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。\n\n对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是01背包中的物品，转移方程即为`f[i][v]=sum{f[i-1][v],f[i-1][v-c[i]]+w[i]}`，初始条件`f[0][0]=1`。\n\n事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。\n\n### 9.3.最优方案的总数\n\n这里的最优方案是指物品总价值最大的方案。还是以01背包为例。\n\n结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：\n\n```go\nfor i=1..N\nfor v=0..V\nf[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}\ng[i][v]=0\nif(f[i][v]==f[i-1][v])\ninc(g[i][v],g[i-1][v]\nif(f[i][v]==f[i-1][v-c[i]]+w[i])\ninc(g[i][v],g[i-1][v-c[i]])\n```\n\n如果你是第一次看到这样的问题，请仔细体会上面的伪代码。\n\n### 9.4.小结\n\n显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。\n\n触类旁通、举一反三，应该也是一个OIer应有的品质吧。\n","slug":"7.dd大牛的《背包九讲》","published":1,"updated":"2024-01-06T00:21:40.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clr6zs1ew004s0cfvgyd9eq1n","content":"<h1 id=\"dd大牛的《背包九讲》\"><a href=\"#dd大牛的《背包九讲》\" class=\"headerlink\" title=\"dd大牛的《背包九讲》\"></a>dd大牛的《背包九讲》</h1><h2 id=\"1-01背包问题\"><a href=\"#1-01背包问题\" class=\"headerlink\" title=\"1.01背包问题\"></a>1.01背包问题</h2><h3 id=\"1-1-题目\"><a href=\"#1-1-题目\" class=\"headerlink\" title=\"1.1.题目\"></a>1.1.题目</h3><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"1-2-基本思路\"><a href=\"#1-2-基本思路\" class=\"headerlink\" title=\"1.2.基本思路\"></a>1.2.基本思路</h3><p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p>\n<p>用子问题定义状态：即<code>f[i][v]</code>表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：</p>\n<p><code>f[i][v]=max&#123;f[i-1][v],f[i-1][v-c[i]]+w[i]&#125;</code>。</p>\n<span id=\"more\"></span>\n\n<p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为<code>v-c[i]</code>的背包中”，此时能获得的最大价值就是<code>f [i-1][v-c[i]]</code>再加上通过放入第i件物品获得的价值w[i]。</p>\n<p>注意<code>f[i][v]</code>有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是<code>f[N] [V]</code>，而是<code>f[N][0..V]</code>的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项<code>f[i][v-1]</code>，这样就可以保证f[N] [V]就是最后的答案。至于为什么这样就可以，由你自己来体会了。</p>\n<h3 id=\"1-3-优化空间复杂度\"><a href=\"#1-3-优化空间复杂度\" class=\"headerlink\" title=\"1.3.优化空间复杂度\"></a>1.3.优化空间复杂度</h3><p>以上方法的时间和空间复杂度均为O(N*V)，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到O(V)。</p>\n<p>先考虑上面讲的基本思路如何实现，肯定是有一个主循环i=1..N，每次算出来二维数组<code>f[i][0..V]</code>的所有值。那么，如果只用一个数组f [0..V]，能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态<code>f[i][v]</code>呢？<code>f[i][v]</code>是由<code>f[i-1][v]</code>和f[i-1] [v-c[i]]两个子问题递推而来，能否保证在推<code>f[i][v]</code>时（也即在第i次主循环中推f[v]时）能够得到<code>f[i-1][v]</code>和<code>f[i-1][v -c[i]]</code>的值呢？事实上，这要求在每次主循环中我们以v=V..0的顺序推f[v]，这样才能保证推f[v]时f[v-c[i]]保存的是状态<code>f[i -1][v-c[i]]</code>的值。伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=V.<span class=\"number\">.0</span></span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中的f[v]=max{f[v],f[v-c[i]]}一句恰就相当于我们的转移方程<code>f[i][v]=max&#123;f[i-1][v],f[i- 1][v-c[i]]&#125;</code>，因为现在的f[v-c[i]]就相当于原来的<code>f[i-1][v-c[i]]</code>。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了<code>f[i][v]</code>由<code>f[i][v-c[i]]</code>推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。</p>\n<h3 id=\"1-4-总结\"><a href=\"#1-4-总结\" class=\"headerlink\" title=\"1.4.总结\"></a>1.4.总结</h3><p>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p>\n<h2 id=\"2-完全背包问题\"><a href=\"#2-完全背包问题\" class=\"headerlink\" title=\"2. 完全背包问题\"></a>2. 完全背包问题</h2><h3 id=\"2-1-题目\"><a href=\"#2-1-题目\" class=\"headerlink\" title=\"2.1.题目\"></a>2.1.题目</h3><p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"2-2-基本思路\"><a href=\"#2-2-基本思路\" class=\"headerlink\" title=\"2.2.基本思路\"></a>2.2.基本思路</h3><p>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令<code>f[i][v]</code>表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：<code>f[i][v]=max&#123;f[i-1][v-k*c[i]]+k*w[i]|0&lt;=k*c[i]&lt;= v&#125;</code>。这跟01背包问题一样有<code>O(N*V)</code>个状态需要求解，但求解每个状态的时间则不是常数了，求解状态<code>f[i][v]</code>的时间是O(v/c[i])，总的复杂度是超过<code>O(VN)</code>的。</p>\n<p>将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。</p>\n<h3 id=\"2-3-一个简单有效的优化\"><a href=\"#2-3-一个简单有效的优化\" class=\"headerlink\" title=\"2.3.一个简单有效的优化\"></a>2.3.一个简单有效的优化</h3><p>完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足<code>c[i]&lt;=c[j]</code>且<code>w[i]&gt;=w[j]</code>，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得j换成物美价廉的i，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。</p>\n<p>转化为01背包问题求解<br>既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选<code>V/c [i]</code>件，于是可以把第i种物品转化为<code>V/c[i]</code>件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。</p>\n<p>更高效的转化方法是：把第i种物品拆成费用为<code>c[i]*2^k</code>、价值为<code>w[i]*2^k</code>的若干件物品，其中k满足<code>c[i]*2^k&lt;V</code>。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个<code>2^k</code>件物品的和。这样把每种物品拆成<code>O(log(V/c[i]))</code>件物品，是一个很大的改进。但我们有更优的<code>O(VN)</code>的算法。<code> * O(VN)</code>的算法这个算法使用一维数组，先看伪代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N </span><br><span class=\"line\"><span class=\"keyword\">for</span> v=<span class=\"number\">0.</span>.V </span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>你会发现，这个伪代码与01背包问题的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么01背包问题中要按照v=V..0的逆序来循环。这是因为要保证第i次循环中的状态<code>f[i][v]</code>是由状态<code>f[i-1][v-c[i]]</code>递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果<code>f[i-1][v-c[i]]</code>。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果<code>f[i][v-c[i]]</code>，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的道理。</p>\n<p>这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：<code>f[i][v]=max&#123;f[i-1][v],f[i][v-c[i]]+w[i]&#125;</code>，将这个方程用一维数组实现，便得到了上面的伪代码。</p>\n<h3 id=\"2-4-总结\"><a href=\"#2-4-总结\" class=\"headerlink\" title=\"2.4.总结\"></a>2.4.总结</h3><p>完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“<code>O(VN)</code>的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。</p>\n<h2 id=\"3-多重背包问题\"><a href=\"#3-多重背包问题\" class=\"headerlink\" title=\"3.多重背包问题\"></a>3.多重背包问题</h2><h3 id=\"3-1-题目\"><a href=\"#3-1-题目\" class=\"headerlink\" title=\"3.1.题目\"></a>3.1.题目</h3><p>有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"3-2-基本算法\"><a href=\"#3-2-基本算法\" class=\"headerlink\" title=\"3.2.基本算法\"></a>3.2.基本算法</h3><p>这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取 n[i]件。令<code>f[i][v]</code>表示前i种物品恰放入一个容量为v的背包的最大权值，则：<code>f[i][v]=max&#123;f[i-1][v-k*c[i]]+ k*w[i]|0&lt;=k&lt;=n[i]&#125;</code>。复杂度是<code>O(V*∑n[i])</code>。</p>\n<p>转化为01背包问题<br>另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为<code>∑n[i]</code>的01背包问题，直接求解，复杂度仍然是<code>O(V*∑n[i])</code>。</p>\n<p>但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取0..n[i]件——均能等价于取若干件代换以后的物品。另外，取超过n[i]件的策略必不能出现。</p>\n<p>方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 <code>1,2,4,...,2^(k-1)</code>,<code>n[i]-2^k+1</code>，且k是满足<code>n[i]-2^k+1&gt;0</code>的最大整数。例如，如果n[i]为13，就将这种物品分成系数分别为1,2,4,6的四件物品。</p>\n<p>分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于<code>0..n[i]</code>间的每一个整数，均可以用若干个系数的和表示，这个证明可以分<code>0..2^k-1</code>和<code>2^k..n[i]</code>两段来分别讨论得出，并不难，希望你自己思考尝试一下。</p>\n<p>这样就将第i种物品分成了<code>O(log n[i])</code>种物品，将原问题转化为了复杂度为<code>O(V*∑log n[i])</code>的01背包问题，是很大的改进。</p>\n<h3 id=\"3-3-O-VN-的算法\"><a href=\"#3-3-O-VN-的算法\" class=\"headerlink\" title=\"3.3.O(VN)的算法\"></a>3.3.<code>O(VN)</code>的算法</h3><p>多重背包问题同样有<code>O(VN)</code>的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了<code>NOIP</code>的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。</p>\n<h3 id=\"3-4-小结\"><a href=\"#3-4-小结\" class=\"headerlink\" title=\"3.4.小结\"></a>3.4.小结</h3><p>这里我们看到了将一个算法的复杂度由<code>O(V*∑n[i])</code>改进到<code>O(V*∑log n[i])</code>的过程，还知道了存在应用超出<code>NOIP</code>范围的知识的<code>O(VN)</code>算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。</p>\n<h2 id=\"4-混合三种背包问题\"><a href=\"#4-混合三种背包问题\" class=\"headerlink\" title=\"4.混合三种背包问题\"></a>4.混合三种背包问题</h2><h3 id=\"4-1-问题\"><a href=\"#4-1-问题\" class=\"headerlink\" title=\"4.1.问题\"></a>4.1.问题</h3><p>如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？</p>\n<h3 id=\"4-2-01背包与完全背包的混合\"><a href=\"#4-2-01背包与完全背包的混合\" class=\"headerlink\" title=\"4.2.01背包与完全背包的混合\"></a>4.2.01背包与完全背包的混合</h3><p>考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是<code>O(VN)</code>。伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N</span><br><span class=\"line\"><span class=\"keyword\">if</span> 第i件物品是<span class=\"number\">01</span>背包</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=V.<span class=\"number\">.0</span></span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> 第i件物品是完全背包</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=<span class=\"number\">0.</span>.V</span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-再加上多重背包\"><a href=\"#4-3-再加上多重背包\" class=\"headerlink\" title=\"4.3.再加上多重背包\"></a>4.3.再加上多重背包</h3><p>如果再加上有的物品最多可以取有限次，那么原则上也可以给出<code>O(VN)</code>的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成O(log n[i])个01背包的物品的方法也已经很优了。</p>\n<h3 id=\"4-4-小结\"><a href=\"#4-4-小结\" class=\"headerlink\" title=\"4.4.小结\"></a>4.4.小结</h3><p>有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。</p>\n<h2 id=\"5-二维费用的背包问题\"><a href=\"#5-二维费用的背包问题\" class=\"headerlink\" title=\"5.二维费用的背包问题\"></a>5.二维费用的背包问题</h2><h3 id=\"5-1-问题\"><a href=\"#5-1-问题\" class=\"headerlink\" title=\"5.1.问题\"></a>5.1.问题</h3><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。</p>\n<h3 id=\"5-2-算法\"><a href=\"#5-2-算法\" class=\"headerlink\" title=\"5.2.算法\"></a>5.2.算法</h3><p>费用加了一维，只需状态也加一维即可。设<code>f[i][v][u]</code>表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是：<code>f [i][v][u]=max&#123;f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]&#125;</code>。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用顺序的循环，当物品有如完全背包问题时采用逆序的循环。当物品有如多重背包问题时拆分物品。</p>\n<h3 id=\"5-3-物品总个数的限制\"><a href=\"#5-3-物品总个数的限制\" class=\"headerlink\" title=\"5.3.物品总个数的限制\"></a>5.3.物品总个数的限制</h3><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设<code>f[v][m]</code>表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在<code>f[0..V</code>][0..M]范围内寻找答案。</p>\n<p>另外，如果要求“恰取M件物品”，则在<code>f[0..V][M]</code>范围内寻找答案。</p>\n<h3 id=\"5-4-小结\"><a href=\"#5-4-小结\" class=\"headerlink\" title=\"5.4.小结\"></a>5.4.小结</h3><p>事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。</p>\n<h2 id=\"6-分组的背包问题\"><a href=\"#6-分组的背包问题\" class=\"headerlink\" title=\"6.分组的背包问题\"></a>6.分组的背包问题</h2><h3 id=\"6-1-问题\"><a href=\"#6-1-问题\" class=\"headerlink\" title=\"6.1.问题\"></a>6.1.问题</h3><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"6-2-算法\"><a href=\"#6-2-算法\" class=\"headerlink\" title=\"6.2.算法\"></a>6.2.算法</h3><p>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设<code>f[k</code>][v]表示前k组物品花费费用v能取得的最大权值，则有<code>f[k][v]=max&#123;f[k-1][v],f[k-1][v-c[i]]+w[i]|</code>物品i属于第k组}。</p>\n<p>使用一维数组的伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 所有的组k</span><br><span class=\"line\"><span class=\"keyword\">for</span> 所有的i属于组k</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=V.<span class=\"number\">.0</span></span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。</p>\n<h3 id=\"6-3-小结\"><a href=\"#6-3-小结\" class=\"headerlink\" title=\"6.3.小结\"></a>6.3.小结</h3><p>分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。 </p>\n<h2 id=\"7-有依赖的背包问题\"><a href=\"#7-有依赖的背包问题\" class=\"headerlink\" title=\"7.有依赖的背包问题\"></a>7.有依赖的背包问题</h2><h3 id=\"7-1-简化的问题\"><a href=\"#7-1-简化的问题\" class=\"headerlink\" title=\"7.1.简化的问题\"></a>7.1.简化的问题</h3><p>这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。</p>\n<h3 id=\"7-2-算法\"><a href=\"#7-2-算法\" class=\"headerlink\" title=\"7.2.算法\"></a>7.2.算法</h3><p>这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。</p>\n<p>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有n个附件，则策略有2^n+1个，为指数级。）</p>\n<p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。</p>\n<p>再考虑P06中的一句话：可以对每组中的物品应用P02中“一个简单有效的优化”。这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为0..V-c[i]所有这些值时相应的最大价值f’[0..V-c[i]]。那么这个主件及它的附件集合相当于V-c[i]+1个物品的物品组，其中费用为c[i]+k的物品的价值为f’[k]+w[i]。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为 V-c[i]+1个物品的物品组，就可以直接应用P06的算法解决问题了。</p>\n<h3 id=\"7-3-更一般的问题\"><a href=\"#7-3-更一般的问题\" class=\"headerlink\" title=\"7.3.更一般的问题\"></a>7.3.更一般的问题</h3><p>更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。</p>\n<p>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01 背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。</p>\n<p>事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p>\n<h3 id=\"7-4-小结\"><a href=\"#7-4-小结\" class=\"headerlink\" title=\"7.4.小结\"></a>7.4.小结</h3><p>NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。</p>\n<p>我想说：失败不是什么丢人的事情，从失败中全无收获才是。</p>\n<h2 id=\"8-泛化物品\"><a href=\"#8-泛化物品\" class=\"headerlink\" title=\"8.泛化物品\"></a>8.泛化物品</h2><h3 id=\"8-1-定义\"><a href=\"#8-1-定义\" class=\"headerlink\" title=\"8.1.定义\"></a>8.1.定义</h3><p>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。</p>\n<p>更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。</p>\n<p>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0..V]，给它费用v，可得到价值h[V]。</p>\n<p>一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c<em>w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有h(v)=v/c</em>w仅当v被c整除且v/c&lt;=n，其它情况函数值均为0。</p>\n<p>一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则h(v)=0，否则h(v)为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</p>\n<h3 id=\"8-2-泛化物品的和\"><a href=\"#8-2-泛化物品的和\" class=\"headerlink\" title=\"8.2.泛化物品的和\"></a>8.2.泛化物品的和</h3><p>如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即<code>f(v)=max&#123;h(k) +l(v-k)|0&lt;=k&lt;=v&#125;</code>。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和 l决定的泛化物品。</p>\n<p>由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足<code>f(v)=max&#123;h(k)+l(v-k)|0&lt;=k&lt;=v&#125;</code>，则称f是h与l的和，即f=h+l。这个运算的时间复杂度是O(V^2)。</p>\n<p>泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。</p>\n<h3 id=\"8-3-背包问题的泛化物品\"><a href=\"#8-3-背包问题的泛化物品\" class=\"headerlink\" title=\"8.3.背包问题的泛化物品\"></a>8.3.背包问题的泛化物品</h3><p>一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。</p>\n<p>综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。</p>\n<h3 id=\"8-4-小结\"><a href=\"#8-4-小结\" class=\"headerlink\" title=\"8.4.小结\"></a>8.4.小结</h3><p>本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 Scheme 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。</p>\n<p>我想说：“思考”是一个<code>OIer</code>最重要的品质。简单的问题，深入思考以后，也能发现更多。</p>\n<h2 id=\"9-背包问题问法的变化\"><a href=\"#9-背包问题问法的变化\" class=\"headerlink\" title=\"9.背包问题问法的变化\"></a>9.背包问题问法的变化</h2><p>以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。</p>\n<p>例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。</p>\n<p>还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。</p>\n<p>下面说一些变化更大的问法。</p>\n<h3 id=\"9-1-输出方案\"><a href=\"#9-1-输出方案\" class=\"headerlink\" title=\"9.1.输出方案\"></a>9.1.输出方案</h3><p>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p>\n<p>还是以01背包为例，方程为<code>f[i][v]=max&#123;f[i-1][v],f[i-1][v-c[i]]+w[i]&#125;</code>。再用一个数组g[i] [v]，设<code>g[i][v]=0</code>表示推出<code>f[i</code>][v]的值时是采用了方程的前一项（也即<code>f[i][v]=f[i-1][v]</code>），<code>g[i][v]</code>表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为<code>f[N</code>][V]）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i=N</span><br><span class=\"line\">v=V</span><br><span class=\"line\">while(i&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(g[i][v]==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;未选第i项物品&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(g[i][v]==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;选了第i项物品&quot;</span></span><br><span class=\"line\">v=v-c[i]</span><br></pre></td></tr></table></figure>\n\n<p>另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的<code>g[i] [v]==0</code>改成<code>f[i][v]==f[i-1][v]</code>，<code>g[i][v]==1</code>改成<code>f[i][v]==f[i-1][v-c[i]]+w[i]</code>也可。</p>\n<h3 id=\"9-2-输出字典序最小的最优方案\"><a href=\"#9-2-输出字典序最小的最优方案\" class=\"headerlink\" title=\"9.2.输出字典序最小的最优方案\"></a>9.2.输出字典序最小的最优方案</h3><p>这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p>\n<p>一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。</p>\n<p>在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果<code>f[i][v]==f[i-v]</code>及<code>f[i][v]==f[i-1][f-c[i]]+w[i]</code>同时成立，应该按照后者（即选择了物品i）来输出方案。</p>\n<p>求方案总数<br>对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。</p>\n<p>对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是01背包中的物品，转移方程即为<code>f[i][v]=sum&#123;f[i-1][v],f[i-1][v-c[i]]+w[i]&#125;</code>，初始条件<code>f[0][0]=1</code>。</p>\n<p>事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。</p>\n<h3 id=\"9-3-最优方案的总数\"><a href=\"#9-3-最优方案的总数\" class=\"headerlink\" title=\"9.3.最优方案的总数\"></a>9.3.最优方案的总数</h3><p>这里的最优方案是指物品总价值最大的方案。还是以01背包为例。</p>\n<p>结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=<span class=\"number\">0.</span>.V</span><br><span class=\"line\">f[i][v]=max&#123;f[i<span class=\"number\">-1</span>][v],f[i<span class=\"number\">-1</span>][v-c[i]]+w[i]&#125;</span><br><span class=\"line\">g[i][v]=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(f[i][v]==f[i<span class=\"number\">-1</span>][v])</span><br><span class=\"line\">inc(g[i][v],g[i<span class=\"number\">-1</span>][v]</span><br><span class=\"line\"><span class=\"keyword\">if</span>(f[i][v]==f[i<span class=\"number\">-1</span>][v-c[i]]+w[i])</span><br><span class=\"line\">inc(g[i][v],g[i<span class=\"number\">-1</span>][v-c[i]])</span><br></pre></td></tr></table></figure>\n\n<p>如果你是第一次看到这样的问题，请仔细体会上面的伪代码。</p>\n<h3 id=\"9-4-小结\"><a href=\"#9-4-小结\" class=\"headerlink\" title=\"9.4.小结\"></a>9.4.小结</h3><p>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。</p>\n<p>触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p>\n","site":{"data":{}},"cover":"/img/cover09.jpg","cover_type":"img","excerpt":"<h1 id=\"dd大牛的《背包九讲》\"><a href=\"#dd大牛的《背包九讲》\" class=\"headerlink\" title=\"dd大牛的《背包九讲》\"></a>dd大牛的《背包九讲》</h1><h2 id=\"1-01背包问题\"><a href=\"#1-01背包问题\" class=\"headerlink\" title=\"1.01背包问题\"></a>1.01背包问题</h2><h3 id=\"1-1-题目\"><a href=\"#1-1-题目\" class=\"headerlink\" title=\"1.1.题目\"></a>1.1.题目</h3><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"1-2-基本思路\"><a href=\"#1-2-基本思路\" class=\"headerlink\" title=\"1.2.基本思路\"></a>1.2.基本思路</h3><p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p>\n<p>用子问题定义状态：即<code>f[i][v]</code>表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：</p>\n<p><code>f[i][v]=max&#123;f[i-1][v],f[i-1][v-c[i]]+w[i]&#125;</code>。</p>","more":"<p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为<code>v-c[i]</code>的背包中”，此时能获得的最大价值就是<code>f [i-1][v-c[i]]</code>再加上通过放入第i件物品获得的价值w[i]。</p>\n<p>注意<code>f[i][v]</code>有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是<code>f[N] [V]</code>，而是<code>f[N][0..V]</code>的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项<code>f[i][v-1]</code>，这样就可以保证f[N] [V]就是最后的答案。至于为什么这样就可以，由你自己来体会了。</p>\n<h3 id=\"1-3-优化空间复杂度\"><a href=\"#1-3-优化空间复杂度\" class=\"headerlink\" title=\"1.3.优化空间复杂度\"></a>1.3.优化空间复杂度</h3><p>以上方法的时间和空间复杂度均为O(N*V)，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到O(V)。</p>\n<p>先考虑上面讲的基本思路如何实现，肯定是有一个主循环i=1..N，每次算出来二维数组<code>f[i][0..V]</code>的所有值。那么，如果只用一个数组f [0..V]，能不能保证第i次循环结束后f[v]中表示的就是我们定义的状态<code>f[i][v]</code>呢？<code>f[i][v]</code>是由<code>f[i-1][v]</code>和f[i-1] [v-c[i]]两个子问题递推而来，能否保证在推<code>f[i][v]</code>时（也即在第i次主循环中推f[v]时）能够得到<code>f[i-1][v]</code>和<code>f[i-1][v -c[i]]</code>的值呢？事实上，这要求在每次主循环中我们以v=V..0的顺序推f[v]，这样才能保证推f[v]时f[v-c[i]]保存的是状态<code>f[i -1][v-c[i]]</code>的值。伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=V.<span class=\"number\">.0</span></span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中的f[v]=max{f[v],f[v-c[i]]}一句恰就相当于我们的转移方程<code>f[i][v]=max&#123;f[i-1][v],f[i- 1][v-c[i]]&#125;</code>，因为现在的f[v-c[i]]就相当于原来的<code>f[i-1][v-c[i]]</code>。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了<code>f[i][v]</code>由<code>f[i][v-c[i]]</code>推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。</p>\n<h3 id=\"1-4-总结\"><a href=\"#1-4-总结\" class=\"headerlink\" title=\"1.4.总结\"></a>1.4.总结</h3><p>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p>\n<h2 id=\"2-完全背包问题\"><a href=\"#2-完全背包问题\" class=\"headerlink\" title=\"2. 完全背包问题\"></a>2. 完全背包问题</h2><h3 id=\"2-1-题目\"><a href=\"#2-1-题目\" class=\"headerlink\" title=\"2.1.题目\"></a>2.1.题目</h3><p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"2-2-基本思路\"><a href=\"#2-2-基本思路\" class=\"headerlink\" title=\"2.2.基本思路\"></a>2.2.基本思路</h3><p>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令<code>f[i][v]</code>表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：<code>f[i][v]=max&#123;f[i-1][v-k*c[i]]+k*w[i]|0&lt;=k*c[i]&lt;= v&#125;</code>。这跟01背包问题一样有<code>O(N*V)</code>个状态需要求解，但求解每个状态的时间则不是常数了，求解状态<code>f[i][v]</code>的时间是O(v/c[i])，总的复杂度是超过<code>O(VN)</code>的。</p>\n<p>将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。</p>\n<h3 id=\"2-3-一个简单有效的优化\"><a href=\"#2-3-一个简单有效的优化\" class=\"headerlink\" title=\"2.3.一个简单有效的优化\"></a>2.3.一个简单有效的优化</h3><p>完全背包问题有一个很简单有效的优化，是这样的：若两件物品i、j满足<code>c[i]&lt;=c[j]</code>且<code>w[i]&gt;=w[j]</code>，则将物品j去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高得j换成物美价廉的i，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。</p>\n<p>转化为01背包问题求解<br>既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选<code>V/c [i]</code>件，于是可以把第i种物品转化为<code>V/c[i]</code>件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。</p>\n<p>更高效的转化方法是：把第i种物品拆成费用为<code>c[i]*2^k</code>、价值为<code>w[i]*2^k</code>的若干件物品，其中k满足<code>c[i]*2^k&lt;V</code>。这是二进制的思想，因为不管最优策略选几件第i种物品，总可以表示成若干个<code>2^k</code>件物品的和。这样把每种物品拆成<code>O(log(V/c[i]))</code>件物品，是一个很大的改进。但我们有更优的<code>O(VN)</code>的算法。<code> * O(VN)</code>的算法这个算法使用一维数组，先看伪代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N </span><br><span class=\"line\"><span class=\"keyword\">for</span> v=<span class=\"number\">0.</span>.V </span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>你会发现，这个伪代码与01背包问题的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么01背包问题中要按照v=V..0的逆序来循环。这是因为要保证第i次循环中的状态<code>f[i][v]</code>是由状态<code>f[i-1][v-c[i]]</code>递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第i件物品”这件策略时，依据的是一个绝无已经选入第i件物品的子结果<code>f[i-1][v-c[i]]</code>。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第i种物品”这种策略时，却正需要一个可能已选入第i种物品的子结果<code>f[i][v-c[i]]</code>，所以就可以并且必须采用v= 0..V的顺序循环。这就是这个简单的程序为何成立的道理。</p>\n<p>这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：<code>f[i][v]=max&#123;f[i-1][v],f[i][v-c[i]]+w[i]&#125;</code>，将这个方程用一维数组实现，便得到了上面的伪代码。</p>\n<h3 id=\"2-4-总结\"><a href=\"#2-4-总结\" class=\"headerlink\" title=\"2.4.总结\"></a>2.4.总结</h3><p>完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“<code>O(VN)</code>的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。</p>\n<h2 id=\"3-多重背包问题\"><a href=\"#3-多重背包问题\" class=\"headerlink\" title=\"3.多重背包问题\"></a>3.多重背包问题</h2><h3 id=\"3-1-题目\"><a href=\"#3-1-题目\" class=\"headerlink\" title=\"3.1.题目\"></a>3.1.题目</h3><p>有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"3-2-基本算法\"><a href=\"#3-2-基本算法\" class=\"headerlink\" title=\"3.2.基本算法\"></a>3.2.基本算法</h3><p>这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第i种物品有n[i]+1种策略：取0件，取1件……取 n[i]件。令<code>f[i][v]</code>表示前i种物品恰放入一个容量为v的背包的最大权值，则：<code>f[i][v]=max&#123;f[i-1][v-k*c[i]]+ k*w[i]|0&lt;=k&lt;=n[i]&#125;</code>。复杂度是<code>O(V*∑n[i])</code>。</p>\n<p>转化为01背包问题<br>另一种好想好写的基本方法是转化为01背包求解：把第i种物品换成n[i]件01背包中的物品，则得到了物品数为<code>∑n[i]</code>的01背包问题，直接求解，复杂度仍然是<code>O(V*∑n[i])</code>。</p>\n<p>但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第i种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取0..n[i]件——均能等价于取若干件代换以后的物品。另外，取超过n[i]件的策略必不能出现。</p>\n<p>方法是：将第i种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 <code>1,2,4,...,2^(k-1)</code>,<code>n[i]-2^k+1</code>，且k是满足<code>n[i]-2^k+1&gt;0</code>的最大整数。例如，如果n[i]为13，就将这种物品分成系数分别为1,2,4,6的四件物品。</p>\n<p>分成的这几件物品的系数和为n[i]，表明不可能取多于n[i]件的第i种物品。另外这种方法也能保证对于<code>0..n[i]</code>间的每一个整数，均可以用若干个系数的和表示，这个证明可以分<code>0..2^k-1</code>和<code>2^k..n[i]</code>两段来分别讨论得出，并不难，希望你自己思考尝试一下。</p>\n<p>这样就将第i种物品分成了<code>O(log n[i])</code>种物品，将原问题转化为了复杂度为<code>O(V*∑log n[i])</code>的01背包问题，是很大的改进。</p>\n<h3 id=\"3-3-O-VN-的算法\"><a href=\"#3-3-O-VN-的算法\" class=\"headerlink\" title=\"3.3.O(VN)的算法\"></a>3.3.<code>O(VN)</code>的算法</h3><p>多重背包问题同样有<code>O(VN)</code>的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊O(1)的时间求解。由于用单调队列优化的DP已超出了<code>NOIP</code>的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。</p>\n<h3 id=\"3-4-小结\"><a href=\"#3-4-小结\" class=\"headerlink\" title=\"3.4.小结\"></a>3.4.小结</h3><p>这里我们看到了将一个算法的复杂度由<code>O(V*∑n[i])</code>改进到<code>O(V*∑log n[i])</code>的过程，还知道了存在应用超出<code>NOIP</code>范围的知识的<code>O(VN)</code>算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。</p>\n<h2 id=\"4-混合三种背包问题\"><a href=\"#4-混合三种背包问题\" class=\"headerlink\" title=\"4.混合三种背包问题\"></a>4.混合三种背包问题</h2><h3 id=\"4-1-问题\"><a href=\"#4-1-问题\" class=\"headerlink\" title=\"4.1.问题\"></a>4.1.问题</h3><p>如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？</p>\n<h3 id=\"4-2-01背包与完全背包的混合\"><a href=\"#4-2-01背包与完全背包的混合\" class=\"headerlink\" title=\"4.2.01背包与完全背包的混合\"></a>4.2.01背包与完全背包的混合</h3><p>考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是<code>O(VN)</code>。伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N</span><br><span class=\"line\"><span class=\"keyword\">if</span> 第i件物品是<span class=\"number\">01</span>背包</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=V.<span class=\"number\">.0</span></span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> 第i件物品是完全背包</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=<span class=\"number\">0.</span>.V</span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-再加上多重背包\"><a href=\"#4-3-再加上多重背包\" class=\"headerlink\" title=\"4.3.再加上多重背包\"></a>4.3.再加上多重背包</h3><p>如果再加上有的物品最多可以取有限次，那么原则上也可以给出<code>O(VN)</code>的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成O(log n[i])个01背包的物品的方法也已经很优了。</p>\n<h3 id=\"4-4-小结\"><a href=\"#4-4-小结\" class=\"headerlink\" title=\"4.4.小结\"></a>4.4.小结</h3><p>有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。</p>\n<h2 id=\"5-二维费用的背包问题\"><a href=\"#5-二维费用的背包问题\" class=\"headerlink\" title=\"5.二维费用的背包问题\"></a>5.二维费用的背包问题</h2><h3 id=\"5-1-问题\"><a href=\"#5-1-问题\" class=\"headerlink\" title=\"5.1.问题\"></a>5.1.问题</h3><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为a[i]和b[i]。两种代价可付出的最大值（两种背包容量）分别为V和U。物品的价值为w[i]。</p>\n<h3 id=\"5-2-算法\"><a href=\"#5-2-算法\" class=\"headerlink\" title=\"5.2.算法\"></a>5.2.算法</h3><p>费用加了一维，只需状态也加一维即可。设<code>f[i][v][u]</code>表示前i件物品付出两种代价分别为v和u时可获得的最大价值。状态转移方程就是：<code>f [i][v][u]=max&#123;f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]&#125;</code>。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量v和u采用顺序的循环，当物品有如完全背包问题时采用逆序的循环。当物品有如多重背包问题时拆分物品。</p>\n<h3 id=\"5-3-物品总个数的限制\"><a href=\"#5-3-物品总个数的限制\" class=\"headerlink\" title=\"5.3.物品总个数的限制\"></a>5.3.物品总个数的限制</h3><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取M件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为1，可以付出的最大件数费用为M。换句话说，设<code>f[v][m]</code>表示付出费用v、最多选m件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在<code>f[0..V</code>][0..M]范围内寻找答案。</p>\n<p>另外，如果要求“恰取M件物品”，则在<code>f[0..V][M]</code>范围内寻找答案。</p>\n<h3 id=\"5-4-小结\"><a href=\"#5-4-小结\" class=\"headerlink\" title=\"5.4.小结\"></a>5.4.小结</h3><p>事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一纬以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。</p>\n<h2 id=\"6-分组的背包问题\"><a href=\"#6-分组的背包问题\" class=\"headerlink\" title=\"6.分组的背包问题\"></a>6.分组的背包问题</h2><h3 id=\"6-1-问题\"><a href=\"#6-1-问题\" class=\"headerlink\" title=\"6.1.问题\"></a>6.1.问题</h3><p>有N件物品和一个容量为V的背包。第i件物品的费用是c[i]，价值是w[i]。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p>\n<h3 id=\"6-2-算法\"><a href=\"#6-2-算法\" class=\"headerlink\" title=\"6.2.算法\"></a>6.2.算法</h3><p>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设<code>f[k</code>][v]表示前k组物品花费费用v能取得的最大权值，则有<code>f[k][v]=max&#123;f[k-1][v],f[k-1][v-c[i]]+w[i]|</code>物品i属于第k组}。</p>\n<p>使用一维数组的伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 所有的组k</span><br><span class=\"line\"><span class=\"keyword\">for</span> 所有的i属于组k</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=V.<span class=\"number\">.0</span></span><br><span class=\"line\">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。</p>\n<h3 id=\"6-3-小结\"><a href=\"#6-3-小结\" class=\"headerlink\" title=\"6.3.小结\"></a>6.3.小结</h3><p>分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。 </p>\n<h2 id=\"7-有依赖的背包问题\"><a href=\"#7-有依赖的背包问题\" class=\"headerlink\" title=\"7.有依赖的背包问题\"></a>7.有依赖的背包问题</h2><h3 id=\"7-1-简化的问题\"><a href=\"#7-1-简化的问题\" class=\"headerlink\" title=\"7.1.简化的问题\"></a>7.1.简化的问题</h3><p>这种背包问题的物品间存在某种“依赖”的关系。也就是说，i依赖于j，表示若选物品i，则必须选物品j。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。</p>\n<h3 id=\"7-2-算法\"><a href=\"#7-2-算法\" class=\"headerlink\" title=\"7.2.算法\"></a>7.2.算法</h3><p>这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。</p>\n<p>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有n个附件，则策略有2^n+1个，为指数级。）</p>\n<p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于P06中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。</p>\n<p>再考虑P06中的一句话：可以对每组中的物品应用P02中“一个简单有效的优化”。这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件i的“附件集合”先进行一次01背包，得到费用依次为0..V-c[i]所有这些值时相应的最大价值f’[0..V-c[i]]。那么这个主件及它的附件集合相当于V-c[i]+1个物品的物品组，其中费用为c[i]+k的物品的价值为f’[k]+w[i]。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件i转化为 V-c[i]+1个物品的物品组，就可以直接应用P06的算法解决问题了。</p>\n<h3 id=\"7-3-更一般的问题\"><a href=\"#7-3-更一般的问题\" class=\"headerlink\" title=\"7.3.更一般的问题\"></a>7.3.更一般的问题</h3><p>更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。</p>\n<p>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01 背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。</p>\n<p>事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p>\n<h3 id=\"7-4-小结\"><a href=\"#7-4-小结\" class=\"headerlink\" title=\"7.4.小结\"></a>7.4.小结</h3><p>NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。</p>\n<p>我想说：失败不是什么丢人的事情，从失败中全无收获才是。</p>\n<h2 id=\"8-泛化物品\"><a href=\"#8-泛化物品\" class=\"headerlink\" title=\"8.泛化物品\"></a>8.泛化物品</h2><h3 id=\"8-1-定义\"><a href=\"#8-1-定义\" class=\"headerlink\" title=\"8.1.定义\"></a>8.1.定义</h3><p>考虑这样一种物品，它并没有固定的费用和价值，而是它的价值随着你分配给它的费用而变化。这就是泛化物品的概念。</p>\n<p>更严格的定义之。在背包容量为V的背包问题中，泛化物品是一个定义域为0..V中的整数的函数h，当分配给它的费用为v时，能得到的价值就是h(v)。</p>\n<p>这个定义有一点点抽象，另一种理解是一个泛化物品就是一个数组h[0..V]，给它费用v，可得到价值h[V]。</p>\n<p>一个费用为c价值为w的物品，如果它是01背包中的物品，那么把它看成泛化物品，它就是除了h(c)=w其它函数值都为0的一个函数。如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有h(v)=v/c<em>w，其它函数值均为0。如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有h(v)=v/c</em>w仅当v被c整除且v/c&lt;=n，其它情况函数值均为0。</p>\n<p>一个物品组可以看作一个泛化物品h。对于一个0..V中的v，若物品组中不存在费用为v的的物品，则h(v)=0，否则h(v)为所有费用为v的物品的最大价值。P07中每个主件及其附件集合等价于一个物品组，自然也可看作一个泛化物品。</p>\n<h3 id=\"8-2-泛化物品的和\"><a href=\"#8-2-泛化物品的和\" class=\"headerlink\" title=\"8.2.泛化物品的和\"></a>8.2.泛化物品的和</h3><p>如果面对两个泛化物品h和l，要用给定的费用从这两个泛化物品中得到最大的价值，怎么求呢？事实上，对于一个给定的费用v，只需枚举将这个费用如何分配给两个泛化物品就可以了。同样的，对于0..V的每一个整数v，可以求得费用v分配到h和l中的最大价值f(v)。也即<code>f(v)=max&#123;h(k) +l(v-k)|0&lt;=k&lt;=v&#125;</code>。可以看到，f也是一个由泛化物品h和l决定的定义域为0..V的函数，也就是说，f是一个由泛化物品h和 l决定的泛化物品。</p>\n<p>由此可以定义泛化物品的和：h、l都是泛化物品，若泛化物品f满足<code>f(v)=max&#123;h(k)+l(v-k)|0&lt;=k&lt;=v&#125;</code>，则称f是h与l的和，即f=h+l。这个运算的时间复杂度是O(V^2)。</p>\n<p>泛化物品的定义表明：在一个背包问题中，若将两个泛化物品代以它们的和，不影响问题的答案。事实上，对于其中的物品都是泛化物品的背包问题，求它的答案的过程也就是求所有这些泛化物品之和的过程。设此和为s，则答案就是s[0..V]中的最大值。</p>\n<h3 id=\"8-3-背包问题的泛化物品\"><a href=\"#8-3-背包问题的泛化物品\" class=\"headerlink\" title=\"8.3.背包问题的泛化物品\"></a>8.3.背包问题的泛化物品</h3><p>一个背包问题中，可能会给出很多条件，包括每种物品的费用、价值等属性，物品之间的分组、依赖等关系等。但肯定能将问题对应于某个泛化物品。也就是说，给定了所有条件以后，就可以对每个非负整数v求得：若背包容量为v，将物品装入背包可得到的最大价值是多少，这可以认为是定义在非负整数集上的一件泛化物品。这个泛化物品——或者说问题所对应的一个定义域为非负整数的函数——包含了关于问题本身的高度浓缩的信息。一般而言，求得这个泛化物品的一个子域（例如0..V）的值之后，就可以根据这个函数的取值得到背包问题的最终答案。</p>\n<p>综上所述，一般而言，求解背包问题，即求解这个问题所对应的一个函数，即该问题的泛化物品。而求解某个泛化物品的一种方法就是将它表示为若干泛化物品的和然后求之。</p>\n<h3 id=\"8-4-小结\"><a href=\"#8-4-小结\" class=\"headerlink\" title=\"8.4.小结\"></a>8.4.小结</h3><p>本讲可以说都是我自己的原创思想。具体来说，是我在学习函数式编程的 Scheme 语言时，用函数编程的眼光审视各类背包问题得出的理论。这一讲真的很抽象，也许在“模型的抽象程度”这一方面已经超出了NOIP的要求，所以暂且看不懂也没关系。相信随着你的OI之路逐渐延伸，有一天你会理解的。</p>\n<p>我想说：“思考”是一个<code>OIer</code>最重要的品质。简单的问题，深入思考以后，也能发现更多。</p>\n<h2 id=\"9-背包问题问法的变化\"><a href=\"#9-背包问题问法的变化\" class=\"headerlink\" title=\"9.背包问题问法的变化\"></a>9.背包问题问法的变化</h2><p>以上涉及的各种背包问题都是要求在背包容量（费用）的限制下求可以取到的最大价值，但背包问题还有很多种灵活的问法，在这里值得提一下。但是我认为，只要深入理解了求背包问题最大价值的方法，即使问法变化了，也是不难想出算法的。</p>\n<p>例如，求解最多可以放多少件物品或者最多可以装满多少背包的空间。这都可以根据具体问题利用前面的方程求出所有状态的值（f数组）之后得到。</p>\n<p>还有，如果要求的是“总价值最小”“总件数最小”，只需简单的将上面的状态转移方程中的max改成min即可。</p>\n<p>下面说一些变化更大的问法。</p>\n<h3 id=\"9-1-输出方案\"><a href=\"#9-1-输出方案\" class=\"headerlink\" title=\"9.1.输出方案\"></a>9.1.输出方案</h3><p>一般而言，背包问题是要求一个最优值，如果要求输出这个最优值的方案，可以参照一般动态规划问题输出方案的方法：记录下每个状态的最优值是由状态转移方程的哪一项推出来的，换句话说，记录下它是由哪一个策略推出来的。便可根据这条策略找到上一个状态，从上一个状态接着向前推即可。</p>\n<p>还是以01背包为例，方程为<code>f[i][v]=max&#123;f[i-1][v],f[i-1][v-c[i]]+w[i]&#125;</code>。再用一个数组g[i] [v]，设<code>g[i][v]=0</code>表示推出<code>f[i</code>][v]的值时是采用了方程的前一项（也即<code>f[i][v]=f[i-1][v]</code>），<code>g[i][v]</code>表示采用了方程的后一项。注意这两项分别表示了两种策略：未选第i个物品及选了第i个物品。那么输出方案的伪代码可以这样写（设最终状态为<code>f[N</code>][V]）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i=N</span><br><span class=\"line\">v=V</span><br><span class=\"line\">while(i&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(g[i][v]==<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;未选第i项物品&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(g[i][v]==<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;选了第i项物品&quot;</span></span><br><span class=\"line\">v=v-c[i]</span><br></pre></td></tr></table></figure>\n\n<p>另外，采用方程的前一项或后一项也可以在输出方案的过程中根据f[i][v]的值实时地求出来，也即不须纪录g数组，将上述代码中的<code>g[i] [v]==0</code>改成<code>f[i][v]==f[i-1][v]</code>，<code>g[i][v]==1</code>改成<code>f[i][v]==f[i-1][v-c[i]]+w[i]</code>也可。</p>\n<h3 id=\"9-2-输出字典序最小的最优方案\"><a href=\"#9-2-输出字典序最小的最优方案\" class=\"headerlink\" title=\"9.2.输出字典序最小的最优方案\"></a>9.2.输出字典序最小的最优方案</h3><p>这里“字典序最小”的意思是1..N号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p>\n<p>一般而言，求一个字典序最小的最优方案，只需要在转移时注意策略。首先，子问题的定义要略改一些。我们注意到，如果存在一个选了物品1的最优方案，那么答案一定包含物品1，原问题转化为一个背包容量为v-c[1]，物品为2..N的子问题。反之，如果答案不包含物品1，则转化成背包容量仍为V，物品为2..N的子问题。不管答案怎样，子问题的物品都是以i..N而非前所述的1..i的形式来定义的，所以状态的定义和转移方程都需要改一下。但也许更简易的方法是先把物品逆序排列一下，以下按物品已被逆序排列来叙述。</p>\n<p>在这种情况下，可以按照前面经典的状态转移方程来求值，只是输出方案的时候要注意：从N到1输入时，如果<code>f[i][v]==f[i-v]</code>及<code>f[i][v]==f[i-1][f-c[i]]+w[i]</code>同时成立，应该按照后者（即选择了物品i）来输出方案。</p>\n<p>求方案总数<br>对于一个给定了背包容量、物品费用、物品间相互关系（分组、依赖等）的背包问题，除了再给定每个物品的价值后求可得到的最大价值外，还可以得到装满背包或将背包装至某一指定容量的方案总数。</p>\n<p>对于这类改变问法的问题，一般只需将状态转移方程中的max改成sum即可。例如若每件物品均是01背包中的物品，转移方程即为<code>f[i][v]=sum&#123;f[i-1][v],f[i-1][v-c[i]]+w[i]&#125;</code>，初始条件<code>f[0][0]=1</code>。</p>\n<p>事实上，这样做可行的原因在于状态转移方程已经考察了所有可能的背包组成方案。</p>\n<h3 id=\"9-3-最优方案的总数\"><a href=\"#9-3-最优方案的总数\" class=\"headerlink\" title=\"9.3.最优方案的总数\"></a>9.3.最优方案的总数</h3><p>这里的最优方案是指物品总价值最大的方案。还是以01背包为例。</p>\n<p>结合求最大总价值和方案总数两个问题的思路，最优方案的总数可以这样求：f[i][v]意义同前述，g[i][v]表示这个子问题的最优方案的总数，则在求f[i][v]的同时求g[i][v]的伪代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1.</span>.N</span><br><span class=\"line\"><span class=\"keyword\">for</span> v=<span class=\"number\">0.</span>.V</span><br><span class=\"line\">f[i][v]=max&#123;f[i<span class=\"number\">-1</span>][v],f[i<span class=\"number\">-1</span>][v-c[i]]+w[i]&#125;</span><br><span class=\"line\">g[i][v]=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(f[i][v]==f[i<span class=\"number\">-1</span>][v])</span><br><span class=\"line\">inc(g[i][v],g[i<span class=\"number\">-1</span>][v]</span><br><span class=\"line\"><span class=\"keyword\">if</span>(f[i][v]==f[i<span class=\"number\">-1</span>][v-c[i]]+w[i])</span><br><span class=\"line\">inc(g[i][v],g[i<span class=\"number\">-1</span>][v-c[i]])</span><br></pre></td></tr></table></figure>\n\n<p>如果你是第一次看到这样的问题，请仔细体会上面的伪代码。</p>\n<h3 id=\"9-4-小结\"><a href=\"#9-4-小结\" class=\"headerlink\" title=\"9.4.小结\"></a>9.4.小结</h3><p>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。</p>\n<p>触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clr6zs1cy00010cfvfigvhrei","category_id":"clr6zs1d300040cfvh8wmdvvl","_id":"clr6zs1da000f0cfv83946wqc"},{"post_id":"clr6zs1d8000d0cfvf2iifzjv","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dd000k0cfv4q9rhldh"},{"post_id":"clr6zs1d100030cfv7oxp6lcm","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1df000o0cfv85qo8rt9"},{"post_id":"clr6zs1d9000e0cfv4eaq3zz6","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dg000r0cfvfc9zgt9r"},{"post_id":"clr6zs1db000i0cfv3xz3caql","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1di000w0cfv7w74g3gp"},{"post_id":"clr6zs1d500070cfv19mg505s","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1dj000y0cfv609d9jhd"},{"post_id":"clr6zs1dc000j0cfv0o656cph","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dj00100cfvh8uk8itx"},{"post_id":"clr6zs1de000n0cfv6m4q50ib","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dl00140cfv7rql6oid"},{"post_id":"clr6zs1d600080cfvf42qapml","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1dm00170cfvd5ym3pyg"},{"post_id":"clr6zs1dg000q0cfv868l50hc","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dn001a0cfvhfo6a80n"},{"post_id":"clr6zs1dh000v0cfv10ssg7s4","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1do001c0cfv3halbddz"},{"post_id":"clr6zs1d700090cfv1irhafvt","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1dp001f0cfv157hhk4r"},{"post_id":"clr6zs1di000x0cfvh02gff3q","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dr001i0cfvexu6dmyx"},{"post_id":"clr6zs1dj000z0cfv7bn72x9j","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1ds001m0cfv0yke4swt"},{"post_id":"clr6zs1dl00130cfvd1ml0tl4","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dt001o0cfv7kwx58nf"},{"post_id":"clr6zs1dm00160cfv23fsdoes","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dx001r0cfv2gw08dn8"},{"post_id":"clr6zs1dn00190cfvak61hyzt","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dy001u0cfv5qz01t2y"},{"post_id":"clr6zs1do001b0cfvgc9nd7nv","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1dz001y0cfvgdvc03kw"},{"post_id":"clr6zs1dp001e0cfvfnch7umx","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e000210cfva5nx6qj8"},{"post_id":"clr6zs1dq001h0cfv3f1vdvq4","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e200230cfvheah3m8i"},{"post_id":"clr6zs1dr001l0cfv0fzi0ds5","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1e300260cfvbtjq5u73"},{"post_id":"clr6zs1ds001n0cfvb5lj7vi8","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e400280cfvaogfgjyt"},{"post_id":"clr6zs1dv001q0cfv5a6aasog","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e5002a0cfv92qs9etx"},{"post_id":"clr6zs1dx001t0cfv3yjz6rlj","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e6002c0cfvc8k43odr"},{"post_id":"clr6zs1dy001x0cfv2i4u3qrj","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1e7002f0cfv2wnjfead"},{"post_id":"clr6zs1dz00200cfv2gui0hmk","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e7002h0cfvfogu1wx0"},{"post_id":"clr6zs1e100220cfv1bgcf6qo","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1e7002j0cfva8h9dgl2"},{"post_id":"clr6zs1e300250cfvdobs9wke","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e7002l0cfvb4xs0aoh"},{"post_id":"clr6zs1e300270cfva0wkge0s","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1e8002n0cfv98mr7xxr"},{"post_id":"clr6zs1eu004o0cfv09j7ceto","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1ex004t0cfvh5lv0m2l"},{"post_id":"clr6zs1ev004p0cfv7qck5sxw","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1ex004u0cfv3mu8bpwp"},{"post_id":"clr6zs1ew004r0cfveo6h8ohr","category_id":"clr6zs1da000g0cfv8orpex0x","_id":"clr6zs1ex004w0cfv8l8d33i7"},{"post_id":"clr6zs1ew004s0cfvgyd9eq1n","category_id":"clr6zs1d7000a0cfvfyvmdh3h","_id":"clr6zs1ex004x0cfv6yera4ii"}],"PostTag":[{"post_id":"clr6zs1cy00010cfvfigvhrei","tag_id":"clr6zs1d400050cfvg2n4cq82","_id":"clr6zs1d8000c0cfva5a8ey7v"},{"post_id":"clr6zs1d100030cfv7oxp6lcm","tag_id":"clr6zs1d7000b0cfvh39y31fv","_id":"clr6zs1df000p0cfvao9nhdsc"},{"post_id":"clr6zs1d100030cfv7oxp6lcm","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1dg000s0cfvecfv6708"},{"post_id":"clr6zs1d500070cfv19mg505s","tag_id":"clr6zs1dd000m0cfv2wmobi0m","_id":"clr6zs1dl00120cfv8ofqg5ba"},{"post_id":"clr6zs1d500070cfv19mg505s","tag_id":"clr6zs1dh000u0cfv23lthwd3","_id":"clr6zs1dm00150cfvefqsckkp"},{"post_id":"clr6zs1d600080cfvf42qapml","tag_id":"clr6zs1dd000m0cfv2wmobi0m","_id":"clr6zs1dp001g0cfva4um8ydb"},{"post_id":"clr6zs1d600080cfvf42qapml","tag_id":"clr6zs1dm00180cfv125kbl74","_id":"clr6zs1dr001j0cfveqjvfbu3"},{"post_id":"clr6zs1d700090cfv1irhafvt","tag_id":"clr6zs1dd000m0cfv2wmobi0m","_id":"clr6zs1dx001s0cfveeci0rne"},{"post_id":"clr6zs1d700090cfv1irhafvt","tag_id":"clr6zs1dr001k0cfvc1nqehos","_id":"clr6zs1dy001v0cfvbzpd1v8n"},{"post_id":"clr6zs1d8000d0cfvf2iifzjv","tag_id":"clr6zs1dt001p0cfv14cxafed","_id":"clr6zs1dz001z0cfv7xss40r8"},{"post_id":"clr6zs1d9000e0cfv4eaq3zz6","tag_id":"clr6zs1dy001w0cfvduv1ejva","_id":"clr6zs1e5002b0cfv93f56gah"},{"post_id":"clr6zs1d9000e0cfv4eaq3zz6","tag_id":"clr6zs1e200240cfv98mo6ull","_id":"clr6zs1e6002d0cfvdxq2apz8"},{"post_id":"clr6zs1db000i0cfv3xz3caql","tag_id":"clr6zs1e400290cfvevdpgyms","_id":"clr6zs1e7002g0cfv2vfjatln"},{"post_id":"clr6zs1dc000j0cfv0o656cph","tag_id":"clr6zs1e6002e0cfv6mnk404j","_id":"clr6zs1e7002k0cfvgq6h0epm"},{"post_id":"clr6zs1dc000j0cfv0o656cph","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1e7002m0cfv7vze9f33"},{"post_id":"clr6zs1de000n0cfv6m4q50ib","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1e8002p0cfvb0nm9kjb"},{"post_id":"clr6zs1de000n0cfv6m4q50ib","tag_id":"clr6zs1e7002i0cfv04sk8njo","_id":"clr6zs1e8002q0cfvbvm3e18m"},{"post_id":"clr6zs1dg000q0cfv868l50hc","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1e8002s0cfvc9nr52du"},{"post_id":"clr6zs1dg000q0cfv868l50hc","tag_id":"clr6zs1e8002o0cfverqk2od8","_id":"clr6zs1e8002t0cfveppbd5ad"},{"post_id":"clr6zs1dh000v0cfv10ssg7s4","tag_id":"clr6zs1e8002r0cfv74lobt5h","_id":"clr6zs1e9002x0cfv6anrego8"},{"post_id":"clr6zs1dh000v0cfv10ssg7s4","tag_id":"clr6zs1e8002u0cfv9tx27d5k","_id":"clr6zs1e9002y0cfv2t4n8h56"},{"post_id":"clr6zs1dh000v0cfv10ssg7s4","tag_id":"clr6zs1e9002v0cfvg42h5g1w","_id":"clr6zs1ea00300cfv9wdobrec"},{"post_id":"clr6zs1di000x0cfvh02gff3q","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1ea00310cfv5yg95e3z"},{"post_id":"clr6zs1di000x0cfvh02gff3q","tag_id":"clr6zs1e7002i0cfv04sk8njo","_id":"clr6zs1ea00330cfv96wm5qau"},{"post_id":"clr6zs1dj000z0cfv7bn72x9j","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1ea00350cfvhe3oeh4e"},{"post_id":"clr6zs1dj000z0cfv7bn72x9j","tag_id":"clr6zs1e9002z0cfvfim608h4","_id":"clr6zs1ea00360cfvhvnxdob1"},{"post_id":"clr6zs1dj000z0cfv7bn72x9j","tag_id":"clr6zs1ea00320cfvc8r41yr4","_id":"clr6zs1eb00380cfv9tihe834"},{"post_id":"clr6zs1dl00130cfvd1ml0tl4","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1eb00390cfv33m36u3p"},{"post_id":"clr6zs1dl00130cfvd1ml0tl4","tag_id":"clr6zs1ea00340cfvds2phjt3","_id":"clr6zs1eb003b0cfvd4qpcjr6"},{"post_id":"clr6zs1dm00160cfv23fsdoes","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1eb003c0cfve9yy7lh0"},{"post_id":"clr6zs1dm00160cfv23fsdoes","tag_id":"clr6zs1eb00370cfv1gx17euu","_id":"clr6zs1eb003e0cfv7cskbvnd"},{"post_id":"clr6zs1dn00190cfvak61hyzt","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1ec003f0cfv2iuuhhf0"},{"post_id":"clr6zs1dn00190cfvak61hyzt","tag_id":"clr6zs1eb003a0cfvb2nl92g4","_id":"clr6zs1eg003g0cfv86gtgsp8"},{"post_id":"clr6zs1do001b0cfvgc9nd7nv","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1eg003i0cfvdlfl8pdx"},{"post_id":"clr6zs1do001b0cfvgc9nd7nv","tag_id":"clr6zs1eb003d0cfvhgg5dg5t","_id":"clr6zs1eh003j0cfv7immen91"},{"post_id":"clr6zs1dp001e0cfvfnch7umx","tag_id":"clr6zs1eg003h0cfvdk5e8f2e","_id":"clr6zs1eh003l0cfvdwdw0ale"},{"post_id":"clr6zs1dp001e0cfvfnch7umx","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1eh003m0cfv1k929r0f"},{"post_id":"clr6zs1dq001h0cfv3f1vdvq4","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1eh003o0cfvbk8y6ufi"},{"post_id":"clr6zs1dq001h0cfv3f1vdvq4","tag_id":"clr6zs1eh003k0cfv7migb7co","_id":"clr6zs1eh003p0cfv3yax4wi5"},{"post_id":"clr6zs1dr001l0cfv0fzi0ds5","tag_id":"clr6zs1e8002r0cfv74lobt5h","_id":"clr6zs1ei003t0cfvfhmr1o1s"},{"post_id":"clr6zs1dr001l0cfv0fzi0ds5","tag_id":"clr6zs1e8002u0cfv9tx27d5k","_id":"clr6zs1ei003u0cfv3ztpa0ne"},{"post_id":"clr6zs1dr001l0cfv0fzi0ds5","tag_id":"clr6zs1e9002v0cfvg42h5g1w","_id":"clr6zs1ej003w0cfvg124bha1"},{"post_id":"clr6zs1ds001n0cfvb5lj7vi8","tag_id":"clr6zs1ei003s0cfv2jc64ctr","_id":"clr6zs1ej003x0cfv381897kt"},{"post_id":"clr6zs1ds001n0cfvb5lj7vi8","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1ej003z0cfvcewjeifx"},{"post_id":"clr6zs1dv001q0cfv5a6aasog","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1ej00400cfv1nczhgpx"},{"post_id":"clr6zs1dv001q0cfv5a6aasog","tag_id":"clr6zs1ei003s0cfv2jc64ctr","_id":"clr6zs1ek00420cfvaa6t1pku"},{"post_id":"clr6zs1dx001t0cfv3yjz6rlj","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1ek00430cfv95p87tdf"},{"post_id":"clr6zs1dx001t0cfv3yjz6rlj","tag_id":"clr6zs1ei003s0cfv2jc64ctr","_id":"clr6zs1ek00450cfv75zsbhwk"},{"post_id":"clr6zs1dy001x0cfv2i4u3qrj","tag_id":"clr6zs1ej00410cfvaby13hu5","_id":"clr6zs1el00480cfvalajcywd"},{"post_id":"clr6zs1dy001x0cfv2i4u3qrj","tag_id":"clr6zs1ek00440cfv58ei1qgk","_id":"clr6zs1el00490cfv20v18snw"},{"post_id":"clr6zs1dy001x0cfv2i4u3qrj","tag_id":"clr6zs1ek00460cfvcu079sam","_id":"clr6zs1el004b0cfv2hv865aj"},{"post_id":"clr6zs1dz00200cfv2gui0hmk","tag_id":"clr6zs1ek00470cfvgp53dsjj","_id":"clr6zs1el004c0cfvgami6f6y"},{"post_id":"clr6zs1dz00200cfv2gui0hmk","tag_id":"clr6zs1dy001w0cfvduv1ejva","_id":"clr6zs1el004e0cfvbq5z0uib"},{"post_id":"clr6zs1e100220cfv1bgcf6qo","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1el004f0cfv9pg3dxp2"},{"post_id":"clr6zs1e100220cfv1bgcf6qo","tag_id":"clr6zs1el004a0cfvfsu24rh6","_id":"clr6zs1em004h0cfvepjo0ya0"},{"post_id":"clr6zs1e300250cfvdobs9wke","tag_id":"clr6zs1el004d0cfv8nmr4kdz","_id":"clr6zs1em004j0cfv02gh5hwj"},{"post_id":"clr6zs1e300250cfvdobs9wke","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1em004k0cfvchzba0ot"},{"post_id":"clr6zs1e300250cfvdobs9wke","tag_id":"clr6zs1ei003s0cfv2jc64ctr","_id":"clr6zs1em004l0cfvajtw6npu"},{"post_id":"clr6zs1e300270cfva0wkge0s","tag_id":"clr6zs1em004i0cfvb92mepgl","_id":"clr6zs1em004m0cfvghaaflfp"},{"post_id":"clr6zs1e300270cfva0wkge0s","tag_id":"clr6zs1da000h0cfvhf3z5n7l","_id":"clr6zs1em004n0cfvfupcgf10"},{"post_id":"clr6zs1eu004o0cfv09j7ceto","tag_id":"clr6zs1ev004q0cfvbrsicktd","_id":"clr6zs1ey004z0cfv76ao20kp"},{"post_id":"clr6zs1eu004o0cfv09j7ceto","tag_id":"clr6zs1ex004v0cfv03hb48cz","_id":"clr6zs1ey00500cfvhdwfc3ah"},{"post_id":"clr6zs1ev004p0cfv7qck5sxw","tag_id":"clr6zs1ex004y0cfvhime97yj","_id":"clr6zs1ey00520cfv1p885s4i"},{"post_id":"clr6zs1ew004r0cfveo6h8ohr","tag_id":"clr6zs1ey00510cfv12laan98","_id":"clr6zs1ey00540cfv5zci5ale"},{"post_id":"clr6zs1ew004s0cfvgyd9eq1n","tag_id":"clr6zs1ey00530cfv9cc8cv9p","_id":"clr6zs1ey00550cfv0iwhfpmu"},{"post_id":"clr6zs1ew004s0cfvgyd9eq1n","tag_id":"clr6zs1ei003s0cfv2jc64ctr","_id":"clr6zs1ez00560cfvgf45cyqk"}],"Tag":[{"name":"开始","_id":"clr6zs1d400050cfvg2n4cq82"},{"name":"背包问题","_id":"clr6zs1d7000b0cfvh39y31fv"},{"name":"go","_id":"clr6zs1da000h0cfvhf3z5n7l"},{"name":"k8s","_id":"clr6zs1dd000m0cfv2wmobi0m"},{"name":"kubeadm","_id":"clr6zs1dh000u0cfv23lthwd3"},{"name":"containerd","_id":"clr6zs1dm00180cfv125kbl74"},{"name":"ca","_id":"clr6zs1dr001k0cfvc1nqehos"},{"name":"DHCP","_id":"clr6zs1dt001p0cfv14cxafed"},{"name":"网络","_id":"clr6zs1dy001w0cfvduv1ejva"},{"name":"TCP","_id":"clr6zs1e200240cfv98mo6ull"},{"name":"DNS","_id":"clr6zs1e400290cfvevdpgyms"},{"name":"Web","_id":"clr6zs1e6002e0cfv6mnk404j"},{"name":"web","_id":"clr6zs1e7002i0cfv04sk8njo"},{"name":"mysql","_id":"clr6zs1e8002o0cfverqk2od8"},{"name":"hexo","_id":"clr6zs1e8002r0cfv74lobt5h"},{"name":"next","_id":"clr6zs1e8002u0cfv9tx27d5k"},{"name":"博客","_id":"clr6zs1e9002v0cfvg42h5g1w"},{"name":"xml","_id":"clr6zs1e9002z0cfvfim608h4"},{"name":"json","_id":"clr6zs1ea00320cfvc8r41yr4"},{"name":"正则表达式","_id":"clr6zs1ea00340cfvds2phjt3"},{"name":"linux","_id":"clr6zs1eb00370cfv1gx17euu"},{"name":"strings","_id":"clr6zs1eb003a0cfvb2nl92g4"},{"name":"socket","_id":"clr6zs1eb003d0cfvhgg5dg5t"},{"name":"websocket","_id":"clr6zs1eg003h0cfvdk5e8f2e"},{"name":"rpc","_id":"clr6zs1eh003k0cfv7migb7co"},{"name":"算法","_id":"clr6zs1ei003s0cfv2jc64ctr"},{"name":"nodejs","_id":"clr6zs1ej00410cfvaby13hu5"},{"name":"nvm","_id":"clr6zs1ek00440cfv58ei1qgk"},{"name":"版本管理","_id":"clr6zs1ek00460cfvcu079sam"},{"name":"osi","_id":"clr6zs1ek00470cfvgp53dsjj"},{"name":"build","_id":"clr6zs1el004a0cfvfsu24rh6"},{"name":"完全背包","_id":"clr6zs1el004d0cfv8nmr4kdz"},{"name":"01背包问题","_id":"clr6zs1em004i0cfvb92mepgl"},{"name":"java","_id":"clr6zs1ev004q0cfvbrsicktd"},{"name":"shell","_id":"clr6zs1ex004v0cfv03hb48cz"},{"name":"Kafka","_id":"clr6zs1ex004y0cfvhime97yj"},{"name":"zookeeper","_id":"clr6zs1ey00510cfv12laan98"},{"name":"背包九讲","_id":"clr6zs1ey00530cfv9cc8cv9p"}]}}